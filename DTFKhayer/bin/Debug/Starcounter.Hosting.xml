<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Starcounter.Hosting</name>
    </assembly>
    <members>
        <member name="T:Starcounter.Hosting.CommandLineConfiguration">
            <summary>
            Host configuration based on a (syntantically correct and parsed)
            command-line.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.ProgramArguments">
            <summary>
            Gets or sets the program arguments.
            </summary>
            <value>The program arguments.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.SchedulerCount">
            <summary>
            Gets the scheduler count.
            </summary>
            <value>The scheduler count.</value>
        </member>
        <member name="M:Starcounter.Hosting.CommandLineConfiguration.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Hosting.CommandLineConfiguration" /> class.
            </summary>
            <param name="args">Arguments to parse</param>
        </member>
        <member name="M:Starcounter.Hosting.CommandLineConfiguration.#ctor(Starcounter.CommandLine.ApplicationArguments)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Hosting.CommandLineConfiguration" /> class.
            </summary>
            <param name="programArguments">The program arguments.</param>
        </member>
        <member name="M:Starcounter.Hosting.CommandLineConfiguration.GetAutoExecStart">
            <summary>
            Return an <c>IAppStart</c> based on command-line values if specified,
            or null otherwise.
            </summary>
            <returns><c>IAppStart</c> or <c>null</c></returns>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.DbUUID">
            <summary>
            Gets the database UUID.
            </summary>
            <value>The database UUID.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.OutputDirectory">
            <summary>
            Gets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.TempDirectory">
            <summary>
            Gets the temp directory.
            </summary>
            <value>The temp directory.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.ServerName">
            <summary>
            Gets the name of the server.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.GatewayNumberOfWorkers">
            <summary>
            Number of workers in gateway.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.DefaultSessionTimeoutMinutes">
            <summary>
            Default session timeout.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.ChunksNumber">
            <summary>
            Gets the chunks number.
            </summary>
            <value>The chunks number.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.SQLProcessPort">
            <summary>
            Gets the SQL process port.
            </summary>
            <value>The SQL process port.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.DefaultUserHttpPort">
            <summary>
            Gets the default user HTTP port.
            </summary>
            <value>The default user HTTP port.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.DefaultSystemHttpPort">
            <summary>
            Gets the default user HTTP port.
            </summary>
            <value>The default user HTTP port.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.NoDb">
            <summary>
            Gets a value indicating whether [no db].
            </summary>
            <value><c>true</c> if [no db]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Starcounter.Hosting.CommandLineConfiguration.NoNetworkGateway">
            <summary>
            Gets a value indicating whether network gateway should not be used.
            </summary>
            <value><c>true</c> if network gateway should not be used; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Starcounter.Hosting.CommandLineConfiguration.ParseAutoStartingAppUserArguments(System.String)">
            <summary>
            Simple parser for user arguments.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.ApplicationDirectory">
            <summary>
            Represent the application directory of an application that has been
            requested to launch into a host.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationDirectory.Path">
            <summary>
            Full path to the primary application directory.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationDirectory.Binaries">
            <summary>
            Set of binaries that have been resolved from the current
            directory.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.ApplicationDirectory.#ctor(System.IO.DirectoryInfo,System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo})">
            <summary>
            Initialize a new <see cref="T:Starcounter.Hosting.ApplicationDirectory"/>.
            </summary>
            <param name="primaryDirectory">The directory to initialize from.</param>
            <param name="secondaryDirectories">Optional secondary directories.</param>
        </member>
        <member name="M:Starcounter.Hosting.ApplicationDirectory.GetApplicationSchemaFiles">
            <summary>
            Return a list of schema files from the given virtual directory.
            </summary>
            <returns>List of schema files.</returns>
        </member>
        <member name="M:Starcounter.Hosting.ApplicationDirectory.GetApplicationSchemaFilesFromDirectory(System.String)">
            <summary>
            Return a list of schema files found in a specific directory.
            </summary>
            <param name="directory">The target directory to look in.</param>
            <returns>List of schema files</returns>
        </member>
        <member name="T:Starcounter.Hosting.AppStart">
            <summary>
            Simple implementation of <c>IAppStart</c> sugared with a few
            convenience factory methods for common cases.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.RuntimeHosts.SelfHosted.SelfHostingRuntimeHost.ApplicationMainLoop">
            <summary>
            Optional callback invoked by the self-hosting host when ready for service.
            </summary>
            <remarks>
            The self-hosting host will invoke this callback and block the
            bootstrapping thread on it. When the application main loop return,
            the host will shut down and dispose.
            </remarks>
        </member>
        <member name="P:Starcounter.Hosting.RuntimeHosts.SelfHosted.SelfHostingRuntimeHost.NonBlockingBootstrap">
            <summary>
            Configure the lifetime service to bootstrap the host in a non-blocking
            fashion.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.Shared.ExceptionManager.HandleUnhandledException(System.Exception)">
            <summary>
            Handles the unhandled exception.
            </summary>
            <param name="ex">The ex.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Starcounter.Hosting.RuntimeHosts.RuntimeHost">
            <summary>
            Represent the runtime host and govern its bootstrapping.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.RuntimeHosts.RuntimeHost.configuration">
            <summary>
            Loaded configuration info.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.RuntimeHosts.RuntimeHost.withdb_">
            <summary>
            The withdb_
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.RuntimeHosts.RuntimeHost.hsched_">
            <summary>
            The hsched_
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.Run(System.Func{Starcounter.Hosting.IAppStart})">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.Cleanup">
            <summary>
            Cleanups this instance.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.RuntimeHosts.RuntimeHost.processControl_">
            <summary>
            The process control_
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.AssureNoOtherProcessWithTheSameName(Starcounter.Hosting.IHostConfiguration)">
            <summary>
            Assures the name of the no other process with the same.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.CalculateAmountOfMemoryNeededForRuntimeEnvironment(System.UInt32)">
            <summary>
            Calculates the amount of memory needed for runtime environment.
            </summary>
            <param name="schedulerCount">The scheduler count.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.ConfigureLogging(Starcounter.Hosting.IHostConfiguration)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.ConfigureHost(Starcounter.Hosting.IHostConfiguration,System.UInt64)">
            <summary>
            Configures the host.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.ConfigureScheduler(Starcounter.Hosting.IHostConfiguration,System.Void*,System.UInt32,System.UInt64)">
            <summary>
            Configures the scheduler.
            </summary>
            <param name="c">The c.</param>
            <param name="mem">The mem.</param>
            <param name="hmenv">The hmenv.</param>
            <param name="schedulerCount">The scheduler count.</param>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.ConfigureDatabase(Starcounter.Hosting.IHostConfiguration)">
            <summary>
            Configures the database.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="M:Starcounter.Hosting.RuntimeHosts.RuntimeHost.ConnectDatabase(System.Guid,System.UInt32,System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.AssemblyResolver">
            <summary>
            Implements the Starcounter Code Host Assembly resolver.
            The primary service offered by the assembly resolver is
            to locate referenced assemblies the CLR don't know how
            to load.
            </summary>
            <remarks>
            There is an article about the assembly resolver on the
            wiki: /wiki/How-the-Code-Host-Locates-Assemblies. Make
            sure to update this article of any of the resolving
            internals change.
            </remarks>
        </member>
        <member name="T:Starcounter.Hosting.CodeHostError">
            <summary>
            Expose utility code used when propagating and consuming
            error data relating to errors in the code host.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.CodeHostError.ErrorParcelID">
            <summary>
            Gets a value used by hosting components to propagate errors via
            a simple parcelling mechanism.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.CodeHostError.Report(System.String)">
            <summary>
            Reports <paramref name="error"/> as a code host error.
            </summary>
            <param name="error">The error to report.</param>
        </member>
        <member name="M:Starcounter.Hosting.CodeHostError.Report(System.Exception,System.Boolean)">
            <summary>
            Reports <paramref name="exception"/> as a code host error.
            </summary>
            <param name="exception">The error to report.</param>
            <param name="includeStackTrace"><c>true</c> if the stacktrace should be
            part of the report; <c>false</c> otherwise.</param>
        </member>
        <member name="T:Starcounter.Hosting.EntrypointOptions">
            <summary>
            Define how the runtime host should execute an entrypoint
            method.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.EntrypointOptions.RunSynchronous">
            <summary>
            Assure an entrypoint can be found and run it synchronously.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.EntrypointOptions.RunAsynchronous">
            <summary>
            Assure an entrypoint can be found and run it asynchronously.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.EntrypointOptions.DontRun">
            <summary>
            Don't look for an entrypoint at all.
            </summary>
            <remarks>
            Used in self-hosting scenarios where the OS has already
            invoked the entrypoint, and to support running libraries,
            not only executables. Also used internally when bootstrapping
            packages with no application.
            </remarks>
        </member>
        <member name="T:Starcounter.Hosting.HostConfigurationFromServerConfiguration">
            <summary>
            Host configuration provider that leverage configuration from an
            admin server based API (and it's underlying configuration).
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.IAssemblyResolver">
            <summary>
            Defines the behavior of a custom assembly resolver.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.IAssemblyResolver.RegisterApplication(System.String,Sc.Server.Weaver.Schema.DatabaseSchema@)">
            <summary>
            Register the given application executable with the resolver.
            </summary>
            <param name="executablePath">Path to the executable file.</param>
            <param name="schema">The database schema of the application.</param>
            <returns>A virtual application directory that the host can use to resolve
            assemblies and schema files from.</returns>
        </member>
        <member name="M:Starcounter.Hosting.IAssemblyResolver.ResolveApplication(System.String)">
            <summary>
            Resolves the application main assembly given a path.
            </summary>
            <param name="executablePath">The path to the main assembly.</param>
            <returns>The main assembly loaded in the current domain.</returns>
        </member>
        <member name="M:Starcounter.Hosting.IAssemblyResolver.ResolveApplicationReference(System.ResolveEventArgs)">
            <summary>
            Resolve a reference when it can't be done by the CLR.
            </summary>
            <param name="args">Resolve arguments</param>
            <returns>A loaded assembly, or null it it could not be resolved.
            </returns>
        </member>
        <member name="T:Starcounter.Hosting.IPrivateAssemblyStore">
            <summary>
            Represents the collection of private assemblies the code host is
            aware of, based on loaded applications.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.IPrivateAssemblyStore.IsApplicationDirectory(System.String)">
            <summary>
            Evaluates the given <paramref name="applicationDirectory"/> to see
            if it is a directory previously registered with the current store.
            </summary>
            <param name="applicationDirectory">The directory to look for.</param>
            <returns><c>true</c> if the given directory is a known application
            directory; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Starcounter.Hosting.IPrivateAssemblyStore.GetAssembly(System.String)">
            <summary>
            Gets the name of the assembly stored for the specified path.
            </summary>
            <param name="filePath">That path to translate to a name.</param>
            <returns>The assembly name</returns>
        </member>
        <member name="M:Starcounter.Hosting.IPrivateAssemblyStore.GetAssemblies(System.String)">
            <summary>
            Get all assemblies matching the given name, accross our ingoing
            application directories.
            </summary>
            <param name="assemblyName">The name to consult</param>
            <returns>Each assembly corresponding to the given name.</returns>
        </member>
        <member name="T:Starcounter.Hosting.Package">
            <summary>
            Class Package
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.Package.InitInternalHttpHandlers_">
            <summary>
            Initializes internal HTTP handlers.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.Package.packageInitialized_">
            <summary>
            Indicates if package was already initialized for all executables.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Package.InitPackage(System.Action)">
            <summary>
            Initializes package with global settings.
            </summary>
            <param name="initInternalHttpHandlers">Initializes internal HTTP handlers.</param>
        </member>
        <member name="M:Starcounter.Hosting.Package.Process(System.IntPtr)">
            <summary>
            Processes the specified h package.
            </summary>
            <param name="hPackage">The h package.</param>
        </member>
        <member name="F:Starcounter.Hosting.Package.exportedSchemas_">
            <summary>
            Exported schema.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.Package.typeDefinitions">
            <summary>
            Set of type definitions to consider during processing
            of this package.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.Package.systemTypeDefinitions_">
            <summary>
            System type definitions.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.Package.processedEvent_">
            <summary>
            The processed event_
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Package.#ctor(Starcounter.Binding.TypeDef[],System.Diagnostics.Stopwatch)">
            <summary>
            Initialize a simple package, not representing a user code
            application, but rather just a set of types to register.
            </summary>
            <param name="typeDefs">Set of type definitions to
            consider.</param>
            <param name="stopwatch">A watch used to time package loading.</param>
        </member>
        <member name="M:Starcounter.Hosting.Package.#ctor(Starcounter.Binding.TypeDef[],System.Diagnostics.Stopwatch,Starcounter.Application,Starcounter.Hosting.ApplicationDirectory,Starcounter.Hosting.EntrypointOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Hosting.Package" /> class.
            </summary>
            <param name="typeDefs">Set of type definitions to consider.</param>
            <param name="stopwatch">A watch used to time package loading.</param>
            <param name="application">The application that is being launched.</param>
            <param name="appDir">The materialized application directory.</param>
            <param name="entryOptions">How and if to execute an entrypoint</param>
        </member>
        <member name="M:Starcounter.Hosting.Package.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Package.WaitUntilProcessed">
            <summary>
            Waits the until processed.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Package.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Package.UpdateDatabaseSchemaAndRegisterTypes(System.String,Starcounter.Binding.TypeDef[],Starcounter.Binding.TypeDef[])">
            <summary>
            Updates the database schema and register types.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Package.CreateOrUpdateDatabaseTable(Starcounter.Binding.TypeDef)">
            <summary>
            Creates the or update database table.
            </summary>
            <param name="typeDef">The type definition for the table to update or create.</param>
            <returns>f.</returns>
        </member>
        <member name="M:Starcounter.Hosting.Package.ExecuteEntryPoint(Starcounter.Application,System.Reflection.Assembly)">
            <summary>
            Executes the entry point.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.PrivateAssemblyStore">
            <summary>
            Code-host specific adapter of a private assembly store, supporting immutable
            consistent views of the store at different generations to be retrived using
            the <c>Immutable</c> property.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.PrivateAssemblyStore.ImmutableState">
            <summary>
            Provide a consistent view of the code-host global private assembly store
            by means of only using immutable state.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.PrivateAssemblyStore.Immutable">
            <summary>
            Gets a snapshot of an immutable state, providing a consistent view
            of the assembly store.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.PrivateAssemblyStore.#ctor">
            <summary>
            Creates the code-host singleton, empty store.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.PrivateAssemblyStore.RegisterApplicationDirectory(Starcounter.Hosting.ApplicationDirectory)">
            <summary>
            Register a new application within the store, effectively transitioning
            the underlying immutable state.
            </summary>
            <param name="dir">The application directory</param>
        </member>
        <member name="T:Starcounter.Hosting.PrivateBinaryFile">
            <summary>
            Represents a binary file the host is aware of, possibly an
            assembly, located in one of the application directories.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.StarcounterPackage">
            <summary>
            The package provided by Starcounter, containing types that are to be
            loaded and maintained in every host.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.StarcounterPackage.Create(System.Diagnostics.Stopwatch)">
            <summary>
            Create a <see cref="T:Starcounter.Hosting.StarcounterPackage"/>, governing the right set of
            type definitions.
            </summary>
            <param name="watch">Stop watch for diagnostics</param>
            <returns>The package, ready to be processed.</returns>
        </member>
        <member name="M:Starcounter.Hosting.StarcounterPackage.LookupTable(System.String)">
            <summary>
            Gets the metadata table definition based on the name. This method
            differs from the public method in Db class with that it uses internal 
            metadata API and never queries RawView for expexted layout.
            There can only ever be one layout for the metadata types as well so if more
            exists something is broken.
            </summary>
            <param name="name">The fullname of the table.</param>
            <returns>TableDef.</returns>
        </member>
        <member name="M:Starcounter.Hosting.TaskSchedulerImpl.Run(Starcounter.Internal.ITask,System.Byte)">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.IAppStart">
            <summary>
            Defines the traits of an app that is to be started.
            </summary>
            <remarks>
            The normal use of this is when there is a desire to bootstrap
            and application as part bootstrapping the runtime host, e.g
            the "auto start" feature we support from the past.
            </remarks>
        </member>
        <member name="P:Starcounter.Hosting.IAppStart.AssemblyPath">
            <summary>
            The full path to the assembly that is to be loaded by the host.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.IAppStart.WorkingDirectory">
            <summary>
            The logical application working directory.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.IAppStart.EntrypointOptions">
            <summary>
            Options that dictate how the host should consider an application
            entrypoint ("Main").
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.IAppStart.EntrypointArguments">
            <summary>
            Arguments the host should pass to an entrypoint, if found and
            instucted to run.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.ILifetimeService">
            <summary>
            Defines the semantics of a service that are in charge of the
            lifetime of a runtime host. The primary duty of such service
            is to provide a mechanism (Run()) for the runtime host to use
            to decide when it's time to shut down.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.ILifetimeService.Configure(Starcounter.Hosting.IHostConfiguration)">
            <summary>
            Configure the current life-time service.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Starcounter.Hosting.ILifetimeService.Start(System.IntPtr)">
            <summary>
            Announce to the lifetime service when the runtime host
            moves into "started" mode.
            </summary>
            <param name="schedulerContext"></param>
        </member>
        <member name="M:Starcounter.Hosting.ILifetimeService.Run(System.Action)">
            <summary>
            Called by the runtime host, giving control to the lifetime
            service to run until told to shut down.
            </summary>
            <param name="hostShutdown">Host shutdown callback any lifetime
            service is encouraged to invoke when shut down is initiated.
            </param>
        </member>
        <member name="T:Starcounter.Hosting.AppHostBuilder">
            <summary>
            Semantic entrypoint for independent applications to build and
            bootstrap self-hosted code hosts.
            </summary>
            <example>
            // The idea:
            <code>
            var appHost = AppHostBuilder
              UseDatabase("default"). // or ...
              UseDatabaseFileDirectory(""). // and ...
              UseConfiguration(DatabaseConfiguration). // and ...
              UseAppHostSettings(new AppHostSettings() { WrapJSON, LoadExtensionLibraries, etc }). // and ...
              UseApplication("path/to/exe"). // or ..
              UseApplication(Assembly.Current). // or ...
              UseCurrentAssemblyAsApplication().	// This should be the default
              Build();
              
              appHost.Run(() => { Console.Write("Press ENTER to exit"); Console.ReadLine(); });
            </code>
            When Run(Action) is invoked, the delegate can do the stuff a standard hosted
            application can do, like Application.Current.CodeHost, etc. Plus what standard
            console/desktop applications can.
            </example>
        </member>
        <member name="M:Starcounter.Hosting.AppHostBuilder.UseApplication(System.Reflection.Assembly,Starcounter.Hosting.EntrypointOptions)">
            <summary>
            Specifies the application to bootstrap into the host, given its assembly.
            </summary>
            <param name="application">Assembly that contains the application.</param>
            <param name="entrypointOptions">How the host should consider the entrypoint of
            the application.</param>
            <returns>An <c>AppHostBuilder</c> including the specified change and that can
            be configured further</returns>
        </member>
        <member name="M:Starcounter.Hosting.AppHostBuilder.UseApplication(System.String,Starcounter.Hosting.EntrypointOptions)">
            <summary>
            Specifies the application to bootstrap into the host, given a path to the assembly.
            </summary>
            <param name="assemblyPath">Path to the application assembly.</param>
            <param name="entrypointOptions">How the host should consider the entrypoint of
            the application.</param>
            <returns>An <c>AppHostBuilder</c> including the specified change and that can
            be configured further</returns>
        </member>
        <member name="M:Starcounter.Hosting.AppHostBuilder.UseCurrentApplication">
            <summary>
            Specifies that the entrypoint assembly of the currently running application
            should be used as the application to host.
            </summary>
            <remarks>
            This is a shorthand version of <c>UseApplication(Assembly.GetEntryAssembly(),
            EntrypointOptions.DontRun).</c>
            </remarks>
            <returns>An <c>AppHostBuilder</c> including the specified change and that can
            be configured further</returns>
        </member>
        <member name="T:Starcounter.Hosting.SelfHostedCodeHost">
            <summary>
            Implement the <see cref="T:Starcounter.ICodeHost"/> returned to applications using
            <see cref="M:Starcounter.Hosting.AppHostBuilder.Build"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.SelfHostedCodeHost.Run(System.Action)">
            <summary>
            Execute the host in blocking mode. The host will block on the thread until
            disposed.
            </summary>
            <param name="applicationMainLoop">
            Application main loop to invoke once the host is operational.</param>
        </member>
        <member name="M:Starcounter.Hosting.SelfHostedCodeHost.Start">
            <summary>
            Execute the host in a non-blocking fashion.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.Management.CodeHostAPI">
            <summary>
            Defines the management API of the code host, mainly
            providing its URIs.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.Management.CodeHostAPI.Uris">
            <summary>
            Provides the set of code host URIs offered by the
            current instance.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Management.CodeHostAPI.Setup(Starcounter.Hosting.Management.ManagementService)">
            <summary>
            Performs setup of the <see cref="T:Starcounter.Hosting.Management.CodeHostAPI"/>.
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:Starcounter.Hosting.Management.CodeHostAPI.Shutdown">
            <summary>
            Initiates shutdown of the current code host.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.Management.CodeHostAPI.ResourceUris">
            <summary>
            Provides the URI's used for code host management.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.Management.CodeHostAPI.ResourceUris.RootContext">
            <summary>
            Defines the relative URI of the root context for
            the code host.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.Management.CodeHostAPI.ResourceUris.ContextPath">
            <summary>
            Gets the context path in use. Assinged in the constructor.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Management.CodeHostAPI.ResourceUris.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Starcounter.Hosting.Management.CodeHostAPI.ResourceUris"/>.
            </summary>
            <param name="hostIdentity">
            The identity of the host, normally in the form of a database
            name.</param>
        </member>
        <member name="P:Starcounter.Hosting.Management.CodeHostAPI.ResourceUris.Host">
            <summary>
            Gets the URI of the host resource.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.Management.CodeHostAPI.ResourceUris.Executables">
            <summary>
            Gets the URI of the host executables resource.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.Management.CodeHostHandler">
            <summary>
            Implements the code host functionality behind the code host "Host"
            management resource.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.Management.CodeHostHandler.JSON">
            <summary>
            Provides a set of utility methods for working with JSON representations
            in the code host management context.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Management.CodeHostHandler.JSON.CreateResponse(System.String,System.Int32)">
            <summary>
            Creates a response based on JSON content, passed as a string.
            </summary>
            <param name="jsonContent">A JSON body.</param>
            <param name="status">The status code; 200/OK by default.</param>
            <param name="headers">Optional headers.</param>
            <returns>A response to be sent back to the client.</returns>
        </member>
        <member name="M:Starcounter.Hosting.Management.CodeHostHandler.JSON.CreateFromRequest``1(Starcounter.Request,``0@)">
            <summary>
            Creates a JSON representation from the body/content of a given
            request and returns it on successful. If the request is somehow
            considered invalid for the current (JSON) context, a response
            is created and the caller is expected to immediately return it.
            </summary>
            <remarks>
            The most obvious failure is a problem parsing the request body.
            But other conditions specific for JSON representations are, or
            will be, handled here too, like the failure to accept JSON as a
            media type.
            </remarks>
            <typeparam name="T">The strongly typed JSON to create and populate
            from the enclosed entity.</typeparam>
            <param name="request">The request whose body we'll use.</param>
            <param name="obj">The resulting strongly typed object.</param>
            <returns>A response to be returned if the request can not be
            accepted.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Hosting.Management.CodeHostHandler.JSON.CreateError(System.UInt32,System.String,System.String)" -->
        <member name="M:Starcounter.Hosting.Management.CodeHostHandler.Setup(Starcounter.Hosting.Management.ManagementService)">
            <summary>
            Performs setup of the <see cref="T:Starcounter.Hosting.Management.CodeHostHandler"/>.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.Management.ExecutablesHandler">
            <summary>
            Implements the code host functionality behind the code host "Executables"
            management resource.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Management.ExecutablesHandler.Setup(Starcounter.Hosting.Management.ManagementService,System.Void*)">
            <summary>
            Performs setup of the <see cref="T:Starcounter.Hosting.Management.ExecutablesHandler"/>.
            </summary>
            <param name="manager"></param>
            <param name="handleScheduler">Handle to the scheduler to use when
            management services need to schedule work to be done.</param>
        </member>
        <member name="T:Starcounter.Hosting.Management.ManagementService">
            <summary>
            Governs the interface the shared app code host process expose over HTTP
            to allow code host level management.
            </summary>
            <remarks>
            Managing the code host is primarly done by the admin server as
            part of providing a way to run executables and start and stop
            engines and code host processes.
            </remarks>
        </member>
        <member name="P:Starcounter.Hosting.Management.ManagementService.HostIdentity">
            <summary>
            Gets the host identity, used to expose management services
            over HTTP.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.Management.ManagementService.Port">
            <summary>
            Gets the port used to expose management services over HTTP.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.Management.ManagementService.Unavailable">
            <summary>
            Governs the availability of the management service.
            </summary>
            <remarks>
            When the service is unavailable, all HTTP requests to any of
            its  resources will return a 503. Normally, the service will
            be unavailable during the bootstrap sequence of the code host
            and after it has been shut down (and before the process exits
            while handlers are still registered).
            </remarks>
        </member>
        <member name="P:Starcounter.Hosting.Management.ManagementService.IsAdministrator">
            <summary>
            Gets a value that indicates if the current service is running
            in the administrator host.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Management.ManagementService.Setup(System.UInt16,System.Void*,System.Boolean)">
            <summary>
            Sets up the management service.
            </summary>
            <param name="port">The port all handlers should register under.</param>
            <param name="handleScheduler">Handle to the scheduler to use when
            management services need to schedule work to be done.</param>
            <param name="setupAPI">Indicates if the API should be set up.</param>
        </member>
        <member name="M:Starcounter.Hosting.Management.ManagementService.Shutdown">
            <summary>
            Instructs the service to shut down.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.Management.ManagementService.RunUntilShutdown">
            <summary>
            Makes the management service functionality available to clients
            and blocks the calling thread until a request indicates the service
            should shut down (semantically eqivivalent to stopping the code
            host).
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.Management.Representations.JSON.Executable">
            <summary>
            Defines a JSON representation of an executable resource, as
            defined by the code host.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.Management.Representations.JSON.CodeHost">
            <summary>
            Defines the JSON representation of a code host, used to communicate
            independent hosts of self-hosted apps for registration in the admin
            server.
            </summary>
        </member>
        <member name="T:StarcounterInternal.Bootstrap.ProgramCommandLine">
            <summary>
            Contains a set of utility methods responsible for defining, parsing
            and handling errors for the command line parameters given to this
            program.
            </summary>
        </member>
        <member name="P:StarcounterInternal.Bootstrap.ProgramCommandLine.Syntax">
            <summary>
            Gets the command-line syntax of the code host bootstrapping
            program
            </summary>
        </member>
        <member name="M:StarcounterInternal.Bootstrap.ProgramCommandLine.TryGetProgramArguments(System.String[],Starcounter.CommandLine.ApplicationArguments@)">
            <summary>
            Tries the get program arguments.
            </summary>
            <param name="args">The args.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:StarcounterInternal.Bootstrap.ProgramCommandLine.Usage(Starcounter.CommandLine.Syntax.IApplicationSyntax,Starcounter.CommandLine.InvalidCommandLineException)">
            <summary>
            Usages the specified syntax.
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="argumentException">The argument exception.</param>
        </member>
        <member name="T:StarcounterInternal.Hosting.ExceptionManager">
            <summary>
            Class ExceptionManager
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.ExceptionManager.HandleUnhandledException(System.Exception)">
            <summary>
            Handles the unhandled exception.
            </summary>
            <param name="ex">The ex.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="T:StarcounterInternal.Hosting.Loader">
            <summary>
            Class Loader
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.Loader.AddBasePackage(System.Void*,System.Diagnostics.Stopwatch)">
            <summary>
            Adds the package defined by Starcounter, part of every code host
            and always loaded first.
            </summary>
            <param name="hsched">Pointer to scheduler.</param>
            <param name="stopwatch">Optional stop watch</param>
        </member>
        <member name="M:StarcounterInternal.Hosting.Loader.ExecuteApplication(System.Void*,Starcounter.Hosting.ApplicationBase,Starcounter.Hosting.EntrypointOptions,System.Diagnostics.Stopwatch)">
            <summary>
            Executes an application in the code host.
            </summary>
            <param name="hsched">Handle to the environment.</param>
            <param name="appBase">The application to execute.</param>
            <param name="execEntryPointSynchronously">Indicates if the entrypoint
            should be executed synchrounously, i.e. before this method return.</param>
            <param name="stopwatch">An optional stopwatch to use for timing.</param>
        </member>
        <member name="T:StarcounterInternal.Hosting.orange">
            <summary>
            Class orange
            </summary>
        </member>
        <member name="F:StarcounterInternal.Hosting.orange.th_start">
            <summary>
            The th_start
            </summary>
        </member>
        <member name="F:StarcounterInternal.Hosting.orange.th_yield">
            <summary>
            The th_yield
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange.orange_configure_scheduler_callbacks(Starcounter.Internal.sccorelib.CM2_SETUP@)">
            <summary>
            Orange_configure_scheduler_callbackses the specified setup.
            </summary>
            <param name="setup">The setup.</param>
        </member>
        <member name="F:StarcounterInternal.Hosting.orange.orange_on_index_updated">
            <summary>
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange.orange_configure_database_callbacks(Starcounter.Internal.sccoredb.sccoredb_callbacks@)">
            <summary>
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange.OnThreadStart(System.UInt32)">
            <summary>
            Called when [thread start].
            </summary>
            <param name="sf">The sf.</param>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange.orange_thread_enter(System.Void*,System.Byte,System.Void*,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange.orange_thread_leave(System.Void*,System.Byte,System.Void*,System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange.orange_thread_start(System.Void*,System.Byte,System.Void*,System.UInt32)">
            <summary>
            Orange_thread_starts the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="sf">The sf.</param>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange.orange_thread_yield(System.Void*,System.Byte,System.Void*,System.UInt32)">
            <summary>
            Orange_thread_yields the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="yr">The yr.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange.on_index_updated(System.UInt32,System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange.orange_fatal_error(System.UInt32)">
            <summary>
            Orange_fatal_errors the specified e.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="T:StarcounterInternal.Hosting.orange_nodb">
            <summary>
            Class orange_nodb
            </summary>
        </member>
        <member name="F:StarcounterInternal.Hosting.orange_nodb.th_enter">
            <summary>
            </summary>
        </member>
        <member name="F:StarcounterInternal.Hosting.orange_nodb.th_leave">
            <summary>
            </summary>
        </member>
        <member name="F:StarcounterInternal.Hosting.orange_nodb.th_start">
            <summary>
            </summary>
        </member>
        <member name="F:StarcounterInternal.Hosting.orange_nodb.th_reset">
            <summary>
            </summary>
        </member>
        <member name="F:StarcounterInternal.Hosting.orange_nodb.th_yield">
            <summary>
            </summary>
        </member>
        <member name="F:StarcounterInternal.Hosting.orange_nodb.vp_idle">
            <summary>
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange_nodb.orange_configure_scheduler_callbacks(Starcounter.Internal.sccorelib.CM2_SETUP@)">
            <summary>
            Orange_configure_scheduler_callbackses the specified setup.
            </summary>
            <param name="setup">The setup.</param>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange_nodb.orange_thread_enter(System.Void*,System.Byte,System.Void*,System.Int32)">
            <summary>
            Orange_thread_enters the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="init">The init.</param>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange_nodb.orange_thread_leave(System.Void*,System.Byte,System.Void*,System.UInt32)">
            <summary>
            Orange_thread_leaves the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="yr">The yr.</param>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange_nodb.orange_thread_start(System.Void*,System.Byte,System.Void*,System.UInt32)">
            <summary>
            Orange_thread_starts the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="ignore">The ignore.</param>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange_nodb.orange_thread_reset(System.Void*,System.Byte,System.Void*)">
            <summary>
            Orange_thread_resets the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange_nodb.orange_thread_yield(System.Void*,System.Byte,System.Void*,System.UInt32)">
            <summary>
            Orange_thread_yields the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="yr">The yr.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange_nodb.orange_vproc_idle(System.Void*,System.Byte,System.Void*)">
            <summary>
            Orange_vproc_idles the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:StarcounterInternal.Hosting.orange_nodb.orange_fatal_error(System.UInt32)">
            <summary>
            Orange_fatal_errors the specified e.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="T:StarcounterInternal.Hosting.Processor">
            <summary>
            Class Processor
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.Processor.Setup(System.Void*)">
            <summary>
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.Processor.RunMessageLoop(System.Void*)">
            <summary>
            Runs the message loop.
            </summary>
            <param name="hsched">The hsched.</param>
        </member>
        <member name="T:StarcounterInternal.Hosting.sccoreapp">
            <summary>
            Class sccoreapp
            </summary>
        </member>
        <member name="M:StarcounterInternal.Hosting.sccoreapp.sccoreapp_init(System.Void*)">
            <summary>
            Sccoreapp_inits the specified hlogs.
            </summary>
            <param name="hlogs">The hlogs.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:StarcounterInternal.Hosting.sccoreapp.sccoreapp_standby(System.Void*,Starcounter.Internal.sccorelib.CM2_TASK_DATA*)">
            <summary>
            Sccoreapp_standbies the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="ptask_data">The ptask_data.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:StarcounterInternal.Hosting.sccoreapp.sccoreapp_log_critical_code(System.UInt32)">
            <summary>
            Sccoreapp_log_critical_codes the specified e.
            </summary>
            <param name="e">The e.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:StarcounterInternal.Hosting.sccoreapp.sccoreapp_log_critical_message(System.String)">
            <summary>
            Sccoreapp_log_critical_messages the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns>System.UInt32.</returns>
        </member>
    </members>
</doc>
