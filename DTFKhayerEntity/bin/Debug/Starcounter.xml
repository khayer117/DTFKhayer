<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Starcounter</name>
    </assembly>
    <members>
        <member name="T:Starcounter.Advanced.DbEnvironment">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.DbEnvironment.#ctor(System.String,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.DbEnvironment.DatabaseNameLower">
            <summary>
            Name of the database.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.DbEnvironment.HasDatabase">
            <summary>
            Gets a value indicating whether there is a database attached to the current applet
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.DbEnvironment.cm3_get_cpuc(System.Void*,System.Byte*)">
            <summary>
            Gets the number of schedulers.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.DbEnvironment.SchedulerCount">
            <summary>
            Gets the number of schedulers.
            </summary>
        </member>
        <member name="T:Starcounter.Advanced.ISetValueCallback">
            <summary>
            Causes Starcounter to notify the implementing database
            class every time a database attribute is updated.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteBinary(System.String,Starcounter.Binary)">
            <summary>
            Invoked when a binary database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteBoolean(System.String,System.Nullable{System.Boolean})">
            <summary>
            Invoked when a boolean database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            Invoked when a DateTime database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteDecimal(System.String,System.Nullable{System.Decimal})">
            <summary>
            Invoked when a decimal database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteDouble(System.String,System.Nullable{System.Double})">
            <summary>
            Invoked when a double database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteInteger(System.String,System.Nullable{System.Int64})">
            <summary>
            Invoked when a signed integer database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteObject(System.String,Starcounter.Binding.IObjectProxy)">
            <summary>
            Invoked when an object reference database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteSingle(System.String,System.Nullable{System.Single})">
            <summary>
            Invoked when a single/float database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteString(System.String,System.String)">
            <summary>
            Invoked when a string database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteTimeSpan(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Invoked when a TimeSpan database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="M:Starcounter.Advanced.ISetValueCallback.OnWriteUnsignedInteger(System.String,System.Nullable{System.UInt64})">
            <summary>
            Invoked when an unsigned integer database column is written.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="value">The value written.</param>
        </member>
        <member name="T:Starcounter.Advanced.DatabaseObjectRetriever">
            <summary>
            Used by the data binding implementation (IBindable) to find a database object using its object number.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.DatabaseObjectRetriever.Instance">
            <summary>
            The single instance of this object look class
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.DatabaseObjectRetriever.Retrieve(System.UInt64)">
            <summary>
            Returns the database object with the supplied object number
            </summary>
            <param name="id">The ObjectNo of the database object</param>
            <returns>The database objects</returns>
        </member>
        <member name="M:Starcounter.Advanced.DatabaseObjectRetriever.Equals(System.Object)">
            <summary>
            Gets a value that indicates if <paramref name="obj"/> is
            considered equal to the current instance.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if equal; false otherwise.</returns>
        </member>
        <member name="M:Starcounter.Advanced.DatabaseObjectRetriever.GetHashCode">
            <summary>
            Computes the hash code of the current instance.
            </summary>
            <returns>A hashcode representing the current instance.</returns>
        </member>
        <member name="T:Starcounter.Application">
            <summary>
            Represents a Starcounter application, executing in or configured
            to run in, a Starcounter code host.
            </summary>
        </member>
        <member name="P:Starcounter.Application.Host">
            <summary>
            Gets the <see cref="T:Starcounter.ICodeHost"/> the current application
            execute within.
            </summary>
        </member>
        <member name="P:Starcounter.Application.TransactEntrypoint">
            <summary>
            Gets indicator if the host should wrap the entrypoint call in a
            write transaction.
            </summary>
        </member>
        <member name="P:Starcounter.Application.Name">
            <summary>
            Gets the name of the application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.DisplayName">
            <summary>
            Gets the display name of the current application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.FullName">
            <summary>
            Gets the full name of the current application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.FilePath">
            <summary>
            Gets the file that was used to launch the current
            application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.WorkingDirectory">
            <summary>
            Gets the working directory of the application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.ResourceDirectories">
            <summary>
            Gets the set of resource directories for the current application.
            </summary>
            <remarks>
            This set contains resource directories specified when the application
            started, and are all resolved to their fully qualified paths by our
            standard algorithm to do so. This list does not contain all resource
            directories; its is possible Starcounter add convention-based directories
            to the full set, and these are not part of this list.
            </remarks>
        </member>
        <member name="P:Starcounter.Application.Arguments">
            <summary>
            Gets the arguments that was used to start the
            current application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.HostedFilePath">
            <summary>
            Gets the full path to the binary file that is actually hosted, i.e.
            the weaved executable.
            </summary>
        </member>
        <member name="P:Starcounter.Application.Current">
            <summary>
            Gets the current application, running in the current Starcounter
            code host.
            </summary>
            <remarks>
            The current application is determined by context where this property
            is read. The code host has several ways to figure out the which is
            the current application, based on the calling code.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when the application can't
            be resolved based on the given context.</exception>
        </member>
        <member name="M:Starcounter.Application.Use(System.Func{Starcounter.Request,Starcounter.Response})">
            <summary>
            Register a request filter middleware, affecting the request
            pipeline, possibly filtering requests as they arrive.
            </summary>
            <param name="requestFilter">The request filter middleware the
            current application want to enable.</param>
        </member>
        <member name="M:Starcounter.Application.Use(System.Func{Starcounter.Request,Starcounter.Response,Starcounter.Response})">
            <summary>
            Register a response filter middleware, affecting the request
            pipeline, possibly customizing responses before they are sent
            back to the client.
            </summary>
            <param name="responseFilter">The response filter middleware the
            current application want to enable.</param>
        </member>
        <member name="M:Starcounter.Application.Use(Starcounter.IMiddleware)">
            <summary>
            Register a custom middleware exposed via <see cref="T:Starcounter.IMiddleware"/>.
            </summary>
            <param name="middleware">The middleware component the current
            application want to enable.
            </param>
        </member>
        <member name="M:Starcounter.Application.GetApplication(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:Starcounter.Application"/> the given <paramref name="assembly"/>
            represent or is part of.
            </summary>
            <param name="assembly">The assembly whose <see cref="T:Starcounter.Application"/> are
            being requested.</param>
            <returns>The application <paramref name="assembly"/> represent or runs
            as a part of.</returns>
            <exception cref="!:AgrumentNullException">Thrown when <paramref name="assembly"/>
            is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the application can't
            be resolved based on the given assembly.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Application.GetApplication(System.String)" -->
        <member name="M:Starcounter.Application.GetFastNamedApplication(System.String)">
            <summary>
            Gets an application only by consulting its name. Internal version, not
            checking the name for null, and assuming the application is indexed.
            </summary>
            <param name="name">The name of the application</param>
            <returns>The application.</returns>
        </member>
        <member name="M:Starcounter.Application.ToString">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Application.GetAllApplications">
            <summary>
            Returns a copy of all applications currently indexed.
            </summary>
            <returns>An array of all running, indexed applications.</returns>
        </member>
        <member name="M:Starcounter.Application.Index(Starcounter.Application)">
            <summary>
            Assures the given <see cref="T:Starcounter.Application"/> is properly indexed,
            allowing it to be later retrived from any of the supported lookup
            methods.
            </summary>
            <param name="application">The application to index.</param>
        </member>
        <member name="M:Starcounter.Application.#ctor(Starcounter.Hosting.ApplicationBase,Starcounter.ICodeHost)">
            <summary>
            Initialize an <see cref="T:Starcounter.Application"/>.
            </summary>
            <param name="appBase">The underlying state.</param>
            <param name="host">The code host the application runs
            within.</param>
        </member>
        <member name="M:Starcounter.Application.CreateArgumentExceptionWithCode(System.String,System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starcounter.AppNew">
            <summary>
            The base Apps class representing a logical App.
            </summary>
        </member>
        <member name="M:Starcounter.AppNew.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Starcounter.AppNew" /> class.
            </summary>
        </member>
        <member name="T:Starcounter.GatewayHandlers">
            <summary>
            Class GatewayHandlers
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.allHandlers_">
            <summary>
            All handler types.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.uniqueHandlersId_">
            <summary>
            Global unique handlers id.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.HandleManaged(System.UInt64,System.Byte*,Starcounter.Internal.bmx.BMX_TASK_INFO*,System.Boolean*)">
            <summary>
            Handles generic managed handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterManagedHandler(Starcounter.HandlerTypes,System.UInt16,System.UInt64@)">
            <summary>
            Registers generic managed handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.UnregisterManagedHandler(System.UInt16)">
            <summary>
            Unregisters managed handler.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.MAX_HANDLERS">
            <summary>
            Maximum number of user handlers to register.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.tcpSocketHandlers_">
            <summary>
            TCP socket handlers.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.numTcpPortHandlers_">
            <summary>
            Number of registered TCP port handlers.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.udpSocketHandlers_">
            <summary>
            UDP socket handlers.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.numUdpPortHandlers_">
            <summary>
            Number of registered UDP port handlers.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Starcounter.GatewayHandlers" /> class.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.SchedulerNumRequests">
            <summary>
            Contains number of requests for each scheduler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.HandleUdpSocket(System.UInt16,System.Byte*,Starcounter.Internal.bmx.BMX_TASK_INFO*,System.Boolean*)">
            <summary>
            UDP outer handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.HandleTcpSocket(System.UInt16,System.Byte*,Starcounter.Internal.bmx.BMX_TASK_INFO*,System.Boolean*)">
            <summary>
            Handles TCP socket data.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.StartSessionThatCameWithRequest(Starcounter.Request)">
            <summary>
            Start the session that came with request.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.HandleHttpRequest(System.UInt16,System.Byte*,Starcounter.Internal.bmx.BMX_TASK_INFO*,System.Boolean*)">
            <summary>
            This is the main entry point of incoming HTTP requests.
            It is called from the Gateway via the shared memory IPC (interprocess communication).
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterHttpHandlerInGateway(System.UInt16,System.String,System.String,System.Byte[],System.UInt16,System.UInt64@)">
            <summary>
            Registers handler with gateway.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.UnregisterHttpHandlerInGateway(System.UInt16,System.String)">
            <summary>
            Unregister existing URI handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.HandleWebSocket(System.UInt16,System.Byte*,Starcounter.Internal.bmx.BMX_TASK_INFO*,System.Boolean*)">
            <summary>
            This is the main entry point of incoming WebSocket requests.
            It is called from the Gateway via the shared memory IPC (interprocess communication).
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterWsChannelHandlerInGateway(System.UInt16,System.String,System.String,System.UInt32,System.UInt16,System.UInt64@)">
            <summary>
            Registers the WebSocket handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterUdpSocketHandlerInGateway(System.UInt16,System.String,System.Action{System.Net.IPAddress,System.UInt16,System.Byte[]},System.UInt64@)">
            <summary>
            Registers UDP port handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterTcpSocketHandlerInGateway(System.UInt16,System.String,System.Action{Starcounter.TcpSocket,System.Byte[]},System.UInt64@)">
            <summary>
            Registers TCP port handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterPortHandler(System.UInt16,System.String,System.Action{Starcounter.TcpSocket,System.Byte[]},System.Action{System.Net.IPAddress,System.UInt16,System.Byte[]},System.UInt64@)">
            <summary>
            Registering port handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.UnregisterPort(System.UInt16,System.UInt64)">
            <summary>
            Unregister port handler.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.JsonResponseMerger.JsonMergeCallback">
            <summary>
            Private class that holds information about which app that registered 
            the callback and the callback itself.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.JsonResponseMerger.afterMergeCallbacks_">
            <summary>
            List of registered hooks that should be called after a merge of jsons.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.JsonResponseMerger.RegisterMergeCallback(System.Func{Starcounter.Request,System.String,System.Collections.Generic.IEnumerable{Starcounter.Json},Starcounter.Json})">
            <summary>
            Registers a callback that is triggered when one or more responses containing json are merged.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Starcounter.Internal.JsonResponseMerger.DefaultMerger(Starcounter.Request,Starcounter.Response,System.Collections.Generic.List{Starcounter.Response})">
            <summary>
            Default JSON merger function.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.JsonResponseMerger.DoMerge(Starcounter.Request,Starcounter.Response,System.Collections.Generic.List{Starcounter.Response})">
            <summary>
            Default JSON merger function.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.MapConfig">
            <summary>
            Temporary class providing global on/off for mapping.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.MapConfig.IsGlobalMappingEnabled">
            <summary>
            Global mapping flag.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.MapConfig.isMappingEnabled_">
            <summary>
            Variable that stores decision if database mapping is enabled.
            </summary>
        </member>
        <member name="P:Starcounter.Internal.MapConfig.Enabled">
            <summary>
            Indicates if mapping of applications should be enabled
            or not. Configuration will probably be on another level (app
            level?) in the final solution.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.Map">
            <summary>
            Implements the actual handler layer of the mapping functionality.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.Map.POST(System.String)">
            <summary>
            Invoked when a new instance of a database class is created,
            i.e. mapping INSERT.
            </summary>
            <param name="uri">The unique mapping URI of the object being
            created.</param>
        </member>
        <member name="M:Starcounter.Internal.Map.PUT(System.String)">
            <summary>
            Invoked when a instance of a database class is assigned to,
            i.e. mapping UPDATE.
            </summary>
            <param name="uri">The unique mapping URI of the object being
            updated.</param>
        </member>
        <member name="M:Starcounter.Internal.Map.DELETE(System.String)">
            <summary>
            Invoked when a instance of a database class is deleted,
            i.e. mapping DELETE.
            </summary>
            <param name="uri">The unique mapping URI of the object being
            deleted.</param>
        </member>
        <member name="T:Starcounter.Internal.MapInvoke">
            <summary>
            Implement an intermediate call level layer, in between
            the weaver/host and the actual mapper logic. Will be replaced
            in the final, optimized solution.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.SetValueCallbackInvoke">
            <summary>
            Provide the facade to the weaver to generate calls to implementations
            of <see cref="T:Starcounter.Advanced.ISetValueCallback"/>.
            </summary>
            <remarks>
            Use caution when refactoring this class since it's methods are soft
            referenced by name from the weaver, and need to match the names of
            corresponding write methods in <see cref="T:Starcounter.Internal.DbState"/>.
            </remarks>
        </member>
        <member name="T:Starcounter.Internal.SystemEntity">
            <summary>
            Serves as a base class for Starcounter-provided entities,
            such as system tables.
            </summary>
            <remarks>
            Eventually, we'll rename this class to Entity, once we have
            removed all references to the obsolete class with the same
            name. Also, we might consider adapting this class so it can
            be used by end-user developers too.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.#ctor(Starcounter.Internal.Uninitialized)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Internal.SystemEntity" /> class.
            </summary>
            <param name="u">An instance of <see cref="T:Starcounter.Internal.Uninitialized"/>,
            serving the purpose to assure we have a unique signature for
            this constructor.</param>
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Internal.SystemEntity.Starcounter#Binding#IObjectProxy#ThisHandle">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#Binding#IObjectProxy#Bind(System.UInt64,System.UInt64,Starcounter.Binding.TypeBinding)">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#TypeBinding">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#EqualsOrIsDerivedFrom(Starcounter.IObjectView)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetBinary(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetDateTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetDecimal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetSByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetSingle(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetUInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetUInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectView#GetUInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Internal.SystemEntity.Starcounter#Advanced#IBindable#Identity">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Internal.SystemEntity.Starcounter#Advanced#IBindable#Retriever">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Internal.DatabaseExceptionFactory">
            <summary>
            The database specific exception factory to be installed inside the
            database worker process.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.DatabaseExceptionFactory.InstallInCurrentAppDomain">
            <summary>
            Installs the in current app domain.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.DatabaseExceptionFactory.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Starcounter.Internal.DatabaseExceptionFactory" /> class from being created.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.DatabaseExceptionFactory.CreateException(System.UInt32,System.Exception,System.String,System.Func{System.UInt32,System.String,System.Object[],System.String},System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Internal.ExceptionManager">
            <summary>
            Class ExceptionManager
            </summary>
        </member>
        <member name="M:Starcounter.Internal.ExceptionManager.HandleInternalFatalError(System.UInt32)">
            <summary>
            Handles the internal fatal error.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="T:Starcounter.Internal.Initialized">
            <summary>
            Type used to assure unique signatures when weaving database
            user code.
            </summary>
            <remarks>
            The weaver assures this class is never used explicitly
            in user code in a way that can violate the uniqeness of our
            required signatures.
            </remarks>
            <see cref="T:Starcounter.Internal.Uninitialized"/>
        </member>
        <member name="T:Starcounter.Internal.HostedThread">
            <summary>
            Provides a set of utility methods for hosted threads, i.e.
            threads that execute in the Starcounter code host process.
            </summary>
            <remarks>
            The methods of this class are primary intended for the Starcounter
            tools and the runtime host.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.HostedThread.SetPriority(System.Threading.Thread,System.Threading.ThreadPriority)">
            <summary>
            Sets the thread priority of <paramref name="self"/> to the
            given <paramref name="value"/>.
            </summary>
            <param name="self">The thread whose priority to set.</param>
            <param name="value">The new priority.</param>
            <remarks>
            The Starcounter runtime will investigate all hosted code and
            replace all assignments to <see cref="!:System.Thread.Priority"/>
            with a call to this method.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.HostedThread.Sleep(System.Int32)">
            <summary>
            Sleeps the specified milliseconds timeout.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout to sleep.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">millisecondsTimeout</exception>
            <remarks>
            The Starcounter runtime will investigate all hosted code and
            replace all calls to <see cref="!:System.Thread.Sleep(int)"/>
            with a call to this method.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.HostedThread.Sleep(System.TimeSpan)">
            <summary>
            Sleeps the specified timeout.
            </summary>
            <param name="timeout">The timeout to sleep</param>
            <exception cref="T:System.ArgumentOutOfRangeException">timeout</exception>
            <remarks>
            The Starcounter runtime will investigate all hosted code and
            replace all calls to <see cref="!:System.Thread.Sleep(TimeSpan)"/>
            with a call to this method.
            </remarks>
        </member>
        <member name="T:Starcounter.Internal.StarcounterAssemblyAttribute">
            <summary>
            Custom attrbute that is used initially just as a tag set
            on assemblies targeting Starcounter to assure the compiler
            does not omit adding a reference to the Starcounter assembly,
            something that is required for assemblies that are to be
            processed by the weaver.
            </summary>
        </member>
        <member name="P:Starcounter.Internal.StarcounterAssemblyAttribute.QualifyTypesOnlyByFullNameInQueries">
            <summary>
            Gets or sets a value dictating if database types are to be qualified
            only by their full name. Default is <c>false</c>.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.TaskHelper">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.TaskHelper.Reset">
            <summary>
            Called when exiting managed task entry point to cleanup managed
            resources attached to the task.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.Kernel32">
            <summary>
            Class Kernel32
            </summary>
        </member>
        <member name="T:Starcounter.Internal.Kernel32.MEMORYSTATUSEX">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.GlobalMemoryStatusEx(Starcounter.Internal.Kernel32.MEMORYSTATUSEX*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.ExitProcess(System.UInt32)">
            <summary>
            Exits the process.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.GetCurrentProcess">
            <summary>
            Gets the current process.
            </summary>
            <returns>IntPtr.</returns>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.GetProcAddress(System.Void*,System.String)">
            <summary>
            Gets the proc address.
            </summary>
            <param name="hModule">The h module.</param>
            <param name="procName">Name of the proc.</param>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.LoadLibraryA(System.String)">
            <summary>
            Loads the library A.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.MoveByteMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Moves the byte memory.
            </summary>
            <param name="Destination">The destination.</param>
            <param name="Source">The source.</param>
            <param name="LengthBytes">The length bytes.</param>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.SetProcessPriorityBoost(System.IntPtr,System.Int32)">
            <summary>
            Sets the process priority boost.
            </summary>
            <param name="hProcess">The h process.</param>
            <param name="DisablePriorityBoost">The disable priority boost.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:Starcounter.Internal.Kernel32.MEM_COMMIT">
            <summary>
            The ME m_ COMMIT
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Kernel32.PAGE_READWRITE">
            <summary>
            The PAG e_ READWRITE
            </summary>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.VirtualAlloc(System.Void*,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Virtuals the alloc.
            </summary>
            <param name="lpAddress">The lp address.</param>
            <param name="dwSize">Size of the dw.</param>
            <param name="flAllocationType">Type of the fl allocation.</param>
            <param name="flProtect">The fl protect.</param>
        </member>
        <member name="T:Starcounter.Internal.Metadata.MetaBinder">
            <summary>
            Defines the semantics we need to bind metadata classes, and
            provides a way to inject a concrete binder from generated
            code.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Metadata.MetaBinder.Instance">
            <summary>
            Gets the runtime instance of the binder. Assigned by
            generated code.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.Metadata.MetaBinder.GetDefinitions">
            <summary>
            Return the set of <see cref="T:Starcounter.Binding.TypeDef"/> instances representing
            metadata host classes.
            </summary>
            <returns>Metadata host definitions.</returns>
        </member>
        <member name="M:Starcounter.Internal.Metadata.MetaBinder.GetSpecifications">
            <summary>
            Gets the type of every type specification belonging to a
            metadata class.
            </summary>
            <returns>Types of specifications.</returns>
        </member>
        <member name="T:Starcounter.Internal.TransactionManager">
            <summary>
            Class that keeps track of created (kernel) transactions during a task. All transactions 
            that have not been explicitly claimed will be released in the end of the task, the others
            is up to the claimee to properly release them when finished.
            </summary>
            <remarks>
            1) The transactions created using <c>Db.Transact</c> is not handled by this class. The transactions here
            are created using <c>Db.Scope</c> or <c>Transaction</c> object directly.
            2) Since parts of this class needs to be exposed to other projects it needs to use an interface that is
            injected with this instance during startup. The implementation is threadsafe however. No state is kept on 
            the instance.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.Create(System.Boolean,System.Boolean)">
            <summary>
            Creates a new transaction in the kernel and adds a reference to the transactionlist and 
            returns a handle to the transaction.
            </summary>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.WrapHandle(Starcounter.Internal.TransactionHandle)">
            <summary>
            Wraps a transaction handle in a managed transaction object.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.DisposeNoException(Starcounter.Internal.TransactionHandle)">
            <summary>
            Releases the kerneltransaction and removes the handle from the references.
            </summary>
            <param name="handle"></param>
            <param name="index"></param>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.CheckForRefOrDisposeTransaction(Starcounter.Internal.TransactionHandle)">
            <summary>
            Checks if the specified transaction has any temporary references or is managed by another.
            If not it will be disposed.
            </summary>
            <param name="handle"></param>
            <returns>
            True if the transaction has a reference, false otherwise which means that it's been disposed.
            </returns>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.SetTemporaryRef(Starcounter.Advanced.ITransaction)">
            <summary>
            
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.SetTemporaryRef(Starcounter.Internal.TransactionHandle)">
            <summary>
            Marks the transaction with the specified index as temporary in use. This means
            the transaction cannot be cleaned up in the end of the scope, but will be cleaned
            up in the end of the request, unless the ownership of the transaction is claimed.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.VerifyTransaction(Starcounter.Internal.TransactionHandle)">
            <summary>
            Verifies that the handle is still valid by either check that it points to
            the correct handle in the list for the current task, or that ownership have 
            been properly transfered.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.VerifyTransaction(Starcounter.Internal.TransactionHandle,Starcounter.Internal.TransactionHandle)">
            <summary>
            Verifies that both parameters, the handle coming from usercode and the handle stored in
            this class for the current task, points to the same kernelhandle.
            </summary>
            <param name="handle"></param>
            <param name="kept"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Internal.TransactionManager.Touch(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Internal.TransactionManager.Touch(Starcounter.Binding.IObjectProxy)" -->
        <member name="M:Starcounter.Internal.TransactionManager.Scope(Starcounter.Internal.TransactionHandle,System.Action)">
            <summary>
            Executes some code within this transaction scope.
            </summary>
            <param name="action">Delegate that is called on transaction.</param>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.Commit(System.UInt64,System.Int32)">
            <summary>
            Commits current transaction.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.Rollback(Starcounter.Internal.TransactionHandle)">
            <summary>
            Rollbacks uncommitted changes on transaction.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.DbState">
            <summary>
            Class DbState
            </summary>
        </member>
        <member name="T:Starcounter.Internal.DbState.View">
            <summary>
            Defines a set of read-only methods used by the weaver to emit
            calls from weave-time implementations of <see cref="T:Starcounter.IObjectView"/>
            that must call into Starcounter.
            </summary>
            <remarks>
            This alternative allows us to keep the visibility of TypeBinding
            and PropertyBinding intact. If we find it makes for slower calls
            we have to adapt the call layer using IObjectView.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.DbState.Insert(System.UInt16,System.UInt64@,System.UInt64@)">
            <summary>
            Inserts a new object/record of the specified type.
            </summary>
            <param name="tableId">Identity of the table to insert into.</param>
            <param name="oid">A new unique identity, assigned before this method
            returns.</param>
            <param name="address">The current (opaque) address of the new object
            in the database, assigned before this method returns.</param>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadBoolean(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableBoolean(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadByte(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableByte(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadDateTime(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableDateTime(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadDecimal(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="recordID"></param>
            <param name="recordAddr"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableDecimal(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="recordID"></param>
            <param name="recordAddr"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadDouble(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableDouble(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadInt16(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableInt16(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadInt32(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableInt32(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadInt64(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableInt64(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadObject(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadTypeReference(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadInherits(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadTypeName(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadSByte(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableSByte(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadSingle(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableSingle(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadString(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            Reads a database string.
            </summary>
            <param name="oid">The identity of the object to read the value
            from.</param>
            <param name="address">The last-known address of the object to
            read the value from.</param>
            <param name="index">The index of the string inside the object.
            </param>
            <returns>The value of the string at the given index.</returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadBinary(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadTimeSpan(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableTimeSpan(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadTimeSpanEx(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadUInt16(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableUInt16(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadUInt32(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableUInt32(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadUInt64(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.ReadNullableUInt64(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteBoolean(System.UInt64,System.UInt64,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableBoolean(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteByte(System.UInt64,System.UInt64,System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableByte(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Byte})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteDateTime(System.UInt64,System.UInt64,System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableDateTime(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteDateTimeEx(System.UInt64,System.UInt64,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
            <exception cref="T:System.NotImplementedException">Negative timestamps are currently not supported.</exception>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteDecimal(System.UInt64,System.UInt64,System.Int32,System.Decimal)">
            <summary>
            
            </summary>
            <param name="recordID"></param>
            <param name="recordAddr"></param>
            <param name="columnIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableDecimal(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Decimal})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteDouble(System.UInt64,System.UInt64,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableDouble(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Double})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteInt16(System.UInt64,System.UInt64,System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableInt16(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Int16})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteInt32(System.UInt64,System.UInt64,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableInt32(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteInt64(System.UInt64,System.UInt64,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableInt64(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Int64})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteObject(System.UInt64,System.UInt64,System.Int32,Starcounter.Binding.IObjectProxy)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteTypeReference(System.UInt64,System.UInt64,System.Int32,Starcounter.Binding.IObjectProxy)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteInherits(System.UInt64,System.UInt64,System.Int32,Starcounter.Binding.IObjectProxy)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteTypeName(System.UInt64,System.UInt64,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteSByte(System.UInt64,System.UInt64,System.Int32,System.SByte)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableSByte(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.SByte})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteSingle(System.UInt64,System.UInt64,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableSingle(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Single})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteString(System.UInt64,System.UInt64,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteTimeSpan(System.UInt64,System.UInt64,System.Int32,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableTimeSpan(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteTimeSpanEx(System.UInt64,System.UInt64,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
            <exception cref="T:System.NotImplementedException">Negative timestamps are currently not supported.</exception>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteUInt16(System.UInt64,System.UInt64,System.Int32,System.UInt16)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableUInt16(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.UInt16})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteUInt32(System.UInt64,System.UInt64,System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableUInt32(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteUInt64(System.UInt64,System.UInt64,System.Int32,System.UInt64)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableUInt64(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.UInt64})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteBinary(System.UInt64,System.UInt64,System.Int32,Starcounter.Binary)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNull(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
        </member>
        <member name="T:Starcounter.Internal.LoaderHelper">
            <summary>
            Class LoaderHelper
            </summary>
        </member>
        <member name="M:Starcounter.Internal.LoaderHelper.MapPropertyDefsToColumnDefs(Starcounter.Binding.TableDef,Starcounter.Binding.ColumnDef[],Starcounter.Binding.PropertyDef[],Starcounter.Binding.DbTypeCode[]@)">
            <summary>
            Maps the property defs to column defs.
            </summary>
            <param name="columnDefs">The column defs.</param>
            <param name="propertyDefs">The property defs.</param>
            <param name="columnRuntimeTypes">
            Array parallel to columnDefs with type codes of columns as mapped by properties.
            </param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Starcounter.Internal.SchemaLoader">
            <summary>
            Class SchemaLoader
            </summary>
        </member>
        <member name="M:Starcounter.Internal.SchemaLoader.LoadAndConvertSchema(Sc.Server.Weaver.Schema.DatabaseSchema)">
            <summary>
            Loads and convert the schema.
            </summary>
            <param name="databaseSchema">The schema to work upon.</param>
            <returns>List of type definitions</returns>
        </member>
        <member name="M:Starcounter.Internal.SchemaLoader.EntityClassToTypeDef(Sc.Server.Weaver.Schema.DatabaseEntityClass,Starcounter.Binding.TypeLoader)">
            <summary>
            Entities the class to type def.
            </summary>
            <param name="databaseClass">The database class.</param>
            <param name="typeLoader">The type loader.</param>
            <returns>TypeDef.</returns>
        </member>
        <member name="M:Starcounter.Internal.SchemaLoader.GatherColumnAndPropertyDefs(Sc.Server.Weaver.Schema.DatabaseEntityClass,System.Collections.Generic.List{Starcounter.Binding.ColumnDef},System.Collections.Generic.List{Starcounter.Binding.PropertyDef},System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Gathers the column and property defs.
            </summary>
            <param name="databaseClass">The database class.</param>
            <param name="columnDefs">The column defs.</param>
            <param name="propertyDefs">The property defs.</param>
            <param name="subClass">if set to <c>true</c> [sub class].</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Starcounter.Internal.SchemaLoader.AddProperty(Starcounter.Binding.PropertyDef,System.Collections.Generic.List{Starcounter.Binding.PropertyDef})">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Starcounter.Internal.SchemaLoader.PrimitiveToTypeCode(Sc.Server.Weaver.Schema.DatabasePrimitive)">
            <summary>
            Primitives to type code.
            </summary>
            <param name="primitive">The primitive.</param>
            <returns>DbTypeCode.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:Starcounter.Internal.sccoredb">
            <summary>
            Class sccoredb
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.MDBIT_OBJECTID">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.INVALID_RECORD_REF">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STAR_TYPE_STRING">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STAR_TYPE_BINARY">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STAR_TYPE_LONG">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STAR_TYPE_ULONG">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STAR_TYPE_DECIMAL">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STAR_TYPE_FLOAT">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STAR_TYPE_DOUBLE">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STAR_TYPE_REFERENCE">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STAR_TYPE_KEY">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccoredb.ON_INDEX_UPDATED">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccoredb.sccoredb_callbacks">
            <summary>
            Struct sccoredb_config
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_set_system_callbacks(Starcounter.Internal.sccoredb.sccoredb_callbacks*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.sccoredb_connect(System.Guid@,System.UInt32,System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.sccoredb_get_db_info_by_path(System.String,System.String,System.Guid@,System.UInt64@,System.UInt64@)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_get_context(System.UInt32,System.UInt64*)">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccoredb.STARI_LAYOUT_INFO">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_LAYOUT_INFO.token">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_LAYOUT_INFO.column_count">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_LAYOUT_INFO.layout_handle">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_LAYOUT_INFO.inherited_layout_handle">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO.handle">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO.token">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO.column_count">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO.sort_mask">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO.flags">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO.column_definitions">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_COLUMN_INFO.token">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_COLUMN_INFO.index">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_COLUMN_INFO.nullable">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_COLUMN_INFO.type">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_COLUMN_DEFINITION.type">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_COLUMN_DEFINITION.is_nullable">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_COLUMN_DEFINITION.token">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO_OLD.handle">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO_OLD.token">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO_OLD.layout_handle">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO_OLD.column_count">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO_OLD.sort_mask">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO_OLD.flags">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.STARI_INDEX_INFO_OLD.column_indexes">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.SC_UNIQUE_CONSTRAINT">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.SC_INDEXCREATE_UNIQUE_CONSTRAINT">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_transaction(System.UInt64,System.UInt64@)">
            <summary>
            Gets the context current transaction.
            </summary>
            <returns>
            Always 0. Operation can not fail.
            </returns>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_set_transaction(System.UInt64,System.UInt64)">
            <summary>
            Sets the context current transaction.
            </summary>
            <returns>
            Always 0. Operation can not fail.
            </returns>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.MDB_TRANSCREATE_LONG_RUNNING">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.MDB_TRANSCREATE_READ_ONLY">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_create_transaction(System.UInt32,System.UInt64@)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_transaction_free(System.UInt64)">
            <summary>
            Frees transaction.
            </summary>
            <returns>
            Always 0. Operation can not fail.
            </returns>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_transaction_reset(System.UInt64)">
            <summary>
            Replaces the transaction with a new one with the same configuration.
            </summary>
            <returns>
            Always 0. Operation can not fail.
            </returns>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_external_abort(System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_insert(System.UInt64,System.UInt16,System.UInt64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_put_setspec(System.UInt64,System.UInt64,System.UInt64,System.Char*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_insert_system(System.UInt64,System.UInt16,System.UInt64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.stari_context_insert_with_id(System.UInt64,System.UInt16,System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_transaction_is_dirty(System.UInt64,System.Int32@)">
            <summary>
            Checks if there are any pending changes on given transaction.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_binary_OLD(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Byte**)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_decimal(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Int64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_double(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Double*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_long(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Int64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_reference(System.UInt64,System.UInt64,System.UInt64,System.Int32,Starcounter.Internal.sccoredb.STAR_REFERENCE_VALUE*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_float(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Single*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_string(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Byte**)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_ulong(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.UInt64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_put_binary_OLD(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_put_decimal(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Int64)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_put_double(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Double)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_put_long(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Int64)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_put_reference(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.UInt64,System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_put_float(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_put_default(System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_put_string(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Char*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_put_ulong(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_trans_flags(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_set_trans_flags(System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_reset_trans_flags(System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.SC_ITERATOR_RANGE_INCLUDE_FIRST_KEY">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.SC_ITERATOR_RANGE_INCLUDE_LAST_KEY">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccoredb.SC_ITERATOR_SORTED_DESCENDING">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_create_iterator(System.UInt64,System.UInt64,System.UInt32,System.Byte*,System.Byte*,System.UInt64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_iterator_next(System.UInt64,Starcounter.Internal.sccoredb.STAR_REFERENCE_VALUE*)">
            <summary>
            </summary>
            <remarks>
            Calling thread must be the owning thread of the context where the iterator is created
            and the current transaction of context must be the transaction the iterator belongs to.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_iterator_free(System.UInt64)">
            <summary>
            Frees iterator.
            </summary>
            <returns>
            Always 0. Operation can not fail.
            </returns>
            <remarks>
            Calling thread must be the owning thread of the context where the iterator resides.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_create_filter_iterator(System.UInt64,System.UInt64,System.UInt32,System.Void*,System.Void*,System.UInt64,System.Void*,System.UInt64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_filter_iterator_next(System.UInt64,Starcounter.Internal.sccoredb.STAR_REFERENCE_VALUE*)">
            <summary>
            Frees filter iterator.
            </summary>
            <returns>
            Always 0. Operation can not fail.
            </returns>
            <remarks>
            Calling thread must be the owning thread of the context where the iterator resides.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_get_index_position_key(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Byte**)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_recreate_iterator(System.UInt64,System.UInt64,System.UInt32,System.Void*,System.Void*,System.UInt64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_recreate_filter_iterator(System.UInt64,System.UInt64,System.UInt32,System.Void*,System.Void*,System.UInt64,System.Void*,System.UInt64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_filter_iterator_free(System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_convert_ucs2_to_turbotext_OLD(System.String,System.UInt32,System.Byte*,System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_convert_ucs2_to_setspectt_OLD(System.String,System.UInt32,System.Byte*,System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_convert_ucs2_to_turbotext(System.UInt64,System.String,System.UInt32,System.Byte**)">
            <summary>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Internal.sccoredb.star_context_compare_strings(System.UInt64,System.String,System.String)" -->
        <member name="M:Starcounter.Internal.sccoredb.star_context_lookup(System.UInt64,System.UInt64,System.UInt64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccoredb.star_context_delete(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Internal.NewCodeGen">
            <summary>
            Class NewCodeGen
            </summary>
        </member>
        <member name="M:Starcounter.Internal.NewCodeGen.NewCodeGen_LoadGenCodeLibrary(System.UInt64,System.String)">
            <summary>
            News the code gen_ load gen code library.
            </summary>
            <param name="queryID">The query ID.</param>
            <param name="pathToGenLibrary">The path to gen library.</param>
            <returns>Int32.</returns>
        </member>
        <member name="M:Starcounter.Internal.NewCodeGen.NewCodeGen_InitEnumerator(System.UInt64,System.Byte*)">
            <summary>
            News the code gen_ init enumerator.
            </summary>
            <param name="queryID">The query ID.</param>
            <param name="queryParameters">The query parameters.</param>
            <returns>Int32.</returns>
        </member>
        <member name="M:Starcounter.Internal.NewCodeGen.NewCodeGen_MoveNext(System.UInt64,System.UInt64*,System.UInt64*,System.UInt16*)">
            <summary>
            News the code gen_ move next.
            </summary>
            <param name="queryID">The query ID.</param>
            <param name="oid">The oid.</param>
            <param name="eti">The eti.</param>
            <param name="currentCCI">The current CCI.</param>
            <returns>Int32.</returns>
        </member>
        <member name="M:Starcounter.Internal.NewCodeGen.NewCodeGen_Reset(System.UInt64)">
            <summary>
            News the code gen_ reset.
            </summary>
            <param name="queryID">The query ID.</param>
            <returns>Int32.</returns>
        </member>
        <member name="T:Starcounter.Internal.CodeGenFilterNativeInterface">
            <summary>
            Class CodeGenFilterNativeInterface
            </summary>
        </member>
        <member name="M:Starcounter.Internal.CodeGenFilterNativeInterface.star_register_expected_layout(System.UInt16,System.UInt16)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.CodeGenFilterNativeInterface.star_context_create_filter(System.UInt64,System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.UInt64*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.CodeGenFilterNativeInterface.star_filter_release(System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Internal.SqlConn_GetQueryUniqueId_Type">
            <summary>
            Delegate SqlConn_GetQueryUniqueId_Type
            </summary>
            <param name="query">The query.</param>
            <param name="uniqueQueryId">The unique query id.</param>
            <param name="flags">The flags.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="T:Starcounter.Internal.SqlConn_GetResults_Type">
            <summary>
            Delegate SqlConn_GetResults_Type
            </summary>
            <param name="uniqueQueryId">The unique query id.</param>
            <param name="queryParams">The query params.</param>
            <param name="results">The results.</param>
            <param name="resultsMaxBytes">The results max bytes.</param>
            <param name="resultsNum">The results num.</param>
            <param name="recreationKey">The recreation key.</param>
            <param name="recreationKeyMaxBytes">The recreation key max bytes.</param>
            <param name="flags">The flags.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="T:Starcounter.Internal.SqlConn_GetInfo_Type">
            <summary>
            Delegate SqlConn_GetInfo_Type
            </summary>
            <param name="infoType">Type of the info.</param>
            <param name="param">The param.</param>
            <param name="result">The result.</param>
            <param name="maxBytes">The max bytes.</param>
            <param name="outLenBytes">The out len bytes.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="T:Starcounter.Internal.SqlConnectivityInterface">
            <summary>
            Class SqlConnectivityInterface
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.RECREATION_KEY_MAX_BYTES">
            <summary>
            The RECREATIO n_ KE y_ MA x_ BYTES
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.MAX_HITS_PER_PAGE_SORTING">
            <summary>
            The MA x_ HIT s_ PE r_ PAG e_ SORTING
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.MAX_STATUS_STRING_LEN">
            <summary>
            The MA x_ STATU s_ STRIN g_ LEN
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.FLAG_MORE_RESULTS">
            <summary>
            The FLA g_ MOR e_ RESULTS
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.FLAG_HAS_PROJECTION">
            <summary>
            The FLA g_ HA s_ PROJECTION
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.FLAG_HAS_SORTING">
            <summary>
            The FLA g_ HA s_ SORTING
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.FLAG_HAS_AGGREGATION">
            <summary>
            The FLA g_ HA s_ AGGREGATION
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.FLAG_FETCH_VARIABLE">
            <summary>
            The FLA g_ FETC h_ VARIABLE
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.FLAG_RECREATION_KEY_VARIABLE">
            <summary>
            The FLA g_ RECREATIO n_ KE y_ VARIABLE
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.FLAG_POST_MANAGED_FILTER">
            <summary>
            The FLA g_ POS t_ MANAGE d_ FILTER
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.FLAG_LAST_FETCH">
            <summary>
            The FLA g_ LAS t_ FETCH
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.GET_LAST_ERROR">
            <summary>
            The GE t_ LAS t_ ERROR
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.GET_ENUMERATOR_EXEC_PLAN">
            <summary>
            The GE t_ ENUMERATO r_ EXE c_ PLAN
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.GET_QUERY_CACHE_STATUS">
            <summary>
            The GE t_ QUER y_ CACH e_ STATUS
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.GET_FETCH_VARIABLE">
            <summary>
            The GE t_ FETC h_ VARIABLE
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.GET_RECREATION_KEY_VARIABLE">
            <summary>
            The GE t_ RECREATIO n_ KE y_ VARIABLE
            </summary>
        </member>
        <member name="F:Starcounter.Internal.SqlConnectivityInterface.PRINT_PROFILER_RESULTS">
            <summary>
            The PRIN t_ PROFILE r_ RESULTS
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccorelib">
            <summary>
            Class sccorelib
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.THREAD_ENTER">
            <summary>
            Delegate THREAD_ENTER
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="init">The init.</param>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.THREAD_LEAVE">
            <summary>
            Delegate THREAD_LEAVE
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="yr">The yr.</param>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_START_FLAG_FIRST_THREAD">
            <summary>
            The C M5_ STAR t_ FLA g_ FIRS t_ THREAD
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.THREAD_START">
            <summary>
            Delegate THREAD_START
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="sf">The sf.</param>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.THREAD_RESET">
            <summary>
            Delegate THREAD_RESET
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.THREAD_YIELD">
            <summary>
            Delegate THREAD_YIELD
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="yr">The yr.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.VPROC_IDLE">
            <summary>
            Delegate VPROC_IDLE
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_TIMES_UP">
            <summary>
            The C M5_ YIEL d_ REASO n_ TIME s_ UP
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_USER_INITIATED">
            <summary>
            The C M5_ YIEL d_ REASO n_ USE r_ INITIATED
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_INTERRUPTED">
            <summary>
            The C M5_ YIEL d_ REASO n_ INTERRUPTED
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_DETACHED">
            <summary>
            The C M5_ YIEL d_ REASO n_ DETACHED
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_BLOCKED">
            <summary>
            The C M5_ YIEL d_ REASO n_ BLOCKED
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_SUSPENDED">
            <summary>
            The C M5_ YIEL d_ REASO n_ SUSPENDED
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_RELEASED">
            <summary>
            The C M5_ YIEL d_ REASO n_ RELEASED
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.CM2_SETUP">
            <summary>
            Struct CM2_SETUP
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.db_data_dir_path">
            <summary>
            The db_data_dir_path
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.server_name">
            <summary>
            The server_name
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.mem">
            <summary>
            The mem
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.mem_size">
            <summary>
            The mem_size
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.num_shm_chunks">
            <summary>
            The num_shm_chunks
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.gateway_num_workers">
            <summary>
            Number of workers in gateway
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.cpuc">
            <summary>
            The cpuc
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.is_system">
            <summary>
            The is_system
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.th_enter">
            <summary>
            The th_enter
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.th_leave">
            <summary>
            The th_leave
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.th_start">
            <summary>
            The th_start
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.th_reset">
            <summary>
            The th_reset
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.th_yield">
            <summary>
            The th_yield
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.vp_idle">
            <summary>
            The vp_idle
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.pex_ctxt">
            <summary>
            The pex_ctxt
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_setup(Starcounter.Internal.sccorelib.CM2_SETUP*,System.Void**)">
            <summary>
            Cm2_setups the specified psetup.
            </summary>
            <param name="psetup">The psetup.</param>
            <param name="phsched">The phsched.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_start(System.Void*)">
            <summary>
            Cm2_starts the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_stop(System.Void*,System.Int32)">
            <summary>
            Cm2_stops the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="wait">The wait.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_get_cpun(System.Void*,System.Byte*)">
            <summary>
            Cm3_get_cpuns the specified ignore.
            </summary>
            <param name="ignore">The ignore.</param>
            <param name="pcpun">The pcpun.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_schedule(System.Void*,System.Byte,System.UInt16,System.UInt16,System.UInt32,System.UInt64,System.UInt64)">
            <summary>
            Cm2_schedules the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="type">The type.</param>
            <param name="prio">The prio.</param>
            <param name="output1">The output1.</param>
            <param name="output2">The output2.</param>
            <param name="output3">The output3.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TYPE_RELEASE">
            <summary>
            The C M2_ TYP e_ RELEASE
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TYPE_REQUEST">
            <summary>
            The C M2_ TYP e_ REQUEST
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TYPE_CALLBACK">
            <summary>
            The C M2_ TYP e_ CALLBACK
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.CM2_TASK_DATA">
            <summary>
            Struct CM2_TASK_DATA
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TASK_DATA.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TASK_DATA.Prio">
            <summary>
            The prio
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TASK_DATA.Output1">
            <summary>
            The output1
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TASK_DATA.Output2">
            <summary>
            The output2
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TASK_DATA.Output3">
            <summary>
            The output3
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_standby(System.Void*,Starcounter.Internal.sccorelib.CM2_TASK_DATA*)">
            <summary>
            Cm2_standbies the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="ptask_data">The ptask_data.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_get_cpuc(System.IntPtr,System.Byte*)">
            <summary>
            Cm2_get_cpucs the specified h.
            </summary>
            <param name="h">The h.</param>
            <param name="pcpuc">The pcpuc.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_eautodet(System.IntPtr)">
            <summary>
            Cm3_eautodets the specified h_opt.
            </summary>
            <param name="h_opt">The h_opt.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_set_yblk(System.IntPtr)">
            <summary>
            Cm3_set_yblks the specified h_opt.
            </summary>
            <param name="h_opt">The h_opt.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_rel_yblk(System.IntPtr)">
            <summary>
            Cm3_rel_yblks the specified h_opt.
            </summary>
            <param name="h_opt">The h_opt.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_sleep(System.IntPtr,System.UInt32)">
            <summary>
            Expose the kernel method <c>cm3_sleep</c> to managed code.
            </summary>
            <param name="h_opt">Optional handle.</param>
            <param name="time">The time to sleep.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_yieldc(System.IntPtr)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_get_stash(System.Void*,System.UInt32**)">
            <summary>
            Cm3_get_stashes the specified ignore.
            </summary>
            <param name="ignore">The ignore.</param>
            <param name="ppstash">The ppstash.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm_send_to_client(System.UInt32,System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_mevt_new(System.Void*,System.Int32,System.Void**)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_mevt_rel(System.Void*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_mevt_set(System.Void*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_mevt_wait(System.Void*,System.UInt32,System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.fix_wait_for_gateway_available(System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.fix_get_performance_counter_file_map">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.GetCpuCount(System.IntPtr)">
            <summary>
            Gets the cpu count.
            </summary>
            <param name="handle">The handle.</param>
            <returns>Byte.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.GetCpuNumber">
            <summary>
            Gets the cpu number.
            </summary>
            <returns>System.Byte.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.GetStateShare">
            <summary>
            Gets the state share.
            </summary>
            <returns>System.UInt32.</returns>
        </member>
        <member name="T:Starcounter.Internal.sccorelib_ext">
            <summary>
            Class sccorelib_ext
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib_ext.TYPE_RECYCLE_SCRAP">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib_ext.TYPE_RUN_TASK">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib_ext.TYPE_PROCESS_PACKAGE">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Internal.Uninitialized">
            <summary>
            Class Uninitialized
            </summary>
        </member>
        <member name="T:Starcounter.Internal.ITask">
            <summary>
            Interface representing a task. Used by the in process task scheduler to
            run the task.
            </summary>
        </member>
        <member name="P:Starcounter.Internal.ITask.UserAction">
            <summary>
            User action.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.ITask.Run">
            <summary>
            Called to execute the task.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.ITask.GetException">
            <summary>
            Getting exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Starcounter.Internal.ITaskScheduler">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.ITaskScheduler.Run(Starcounter.Internal.ITask,System.Byte)">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Internal.TaskScheduler">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.TaskScheduler.SetImplementation(Starcounter.Internal.ITaskScheduler)">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.UriMapping.EndsWithStringParam">
            <summary>
            Supported parameter string.
            </summary>
        </member>
        <member name="F:Starcounter.UriMapping.MappingUriPrefix">
            <summary>
            Required URI mapping prefix.
            </summary>
        </member>
        <member name="F:Starcounter.UriMapping.OntologyMappingUriPrefix">
            <summary>
            Mapping class URI prefix.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.Map(System.String,System.String,System.String)">
            <summary>
            Maps an existing application URI to another URI.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.Map(System.String,System.String,System.Func{System.String,System.String},System.Func{System.String,System.String},System.String)">
            <summary>
            Maps an existing application URI to another URI.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.DefaultConverter(System.String)">
            <summary>
            Default parameters converter.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.UriMapping.OntologyMap``1(System.String)">
            <summary>
            Maps an existing application URI to class URI.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.OntologyMap(System.String,System.String)">
            <summary>
            Maps an existing application URI to class URI.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.OntologyMap(System.String,System.String,System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Maps an existing application URI to class URI.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.Init">
            <summary>
            Initializes everything needed for mapping.
            </summary>
        </member>
        <member name="T:Starcounter.Binary">
            <summary>
            Represents an immutable relatively small block of binary data.
            </summary>
        </member>
        <member name="F:Starcounter.Binary.Null">
            <summary>
            The null
            </summary>
        </member>
        <member name="F:Starcounter.Binary.BINARY_DATA_MAX_SIZE">
            <summary>
            Max size allowed for unpacked binary data (excluding header).
            </summary>
        </member>
        <member name="M:Starcounter.Binary.Equals(Starcounter.Binary,Starcounter.Binary)">
            <summary>
            Equalses the specified LB1.
            </summary>
            <param name="lb1">The LB1.</param>
            <param name="lb2">The LB2.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:Starcounter.Binary.op_Equality(Starcounter.Binary,Starcounter.Binary)">
            <summary>
            Implements the ==.
            </summary>
            <param name="lb1">The LB1.</param>
            <param name="lb2">The LB2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Starcounter.Binary.op_Inequality(Starcounter.Binary,Starcounter.Binary)">
            <summary>
            Implements the !=.
            </summary>
            <param name="lb1">The LB1.</param>
            <param name="lb2">The LB2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Starcounter.Binary.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binary" /> struct.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Starcounter.Binary.IsNull">
            <summary>
            Gets the is null.
            </summary>
            <value>The is null.</value>
        </member>
        <member name="P:Starcounter.Binary.Length">
            <summary>
            Gets the length of the Binary.
            </summary>
        </member>
        <member name="P:Starcounter.Binary.InternalLength">
            <summary>
            Gets the internal length of the Binary buffer.
            </summary>
        </member>
        <member name="M:Starcounter.Binary.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Binary.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Binary.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Binary.CompareTo(Starcounter.Binary)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Binary.CompareTo(System.Byte[])">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Binary.Equals(Starcounter.Binary)">
            <summary>
            
            </summary>
            <param name="lb"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Binary.GetStream">
            <summary>
            Creates and returns a read-only stream based on the Binary.
            </summary>
        </member>
        <member name="M:Starcounter.Binary.GetByte(System.Int32)">
            <summary>
            Returns the byte at the specified index.
            </summary>
        </member>
        <member name="M:Starcounter.Binary.ToArray">
            <summary>
            Returns a copy of the Binary as a byte-array.
            </summary>
        </member>
        <member name="M:Starcounter.Binary.GetInternalBuffer">
            <summary>
            Returns the reference to internal byte buffer.
            </summary>
        </member>
        <member name="T:Starcounter.BinaryStream">
            <summary>
            Class BinaryStream
            </summary>
        </member>
        <member name="M:Starcounter.BinaryStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.BinaryStream" /> class.
            </summary>
        </member>
        <member name="M:Starcounter.BinaryStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.BinaryStream" /> class.
            </summary>
            <param name="initialCapacity">The initial capacity.</param>
        </member>
        <member name="P:Starcounter.BinaryStream.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starcounter.BinaryStream.CanSeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starcounter.BinaryStream.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.BinaryStream.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starcounter.BinaryStream.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starcounter.BinaryStream.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starcounter.BinaryStream.Position">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.BinaryStream.ReadByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starcounter.BinaryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.BinaryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.BinaryStream.SetLength(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.BinaryStream.WriteByte(System.Byte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.BinaryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Starcounter.BinaryStream.Write(Starcounter.Binary)">
            <summary>
            
            </summary>
            <param name="lb"></param>
        </member>
        <member name="M:Starcounter.BinaryStream.ToBinary">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starcounter.BinaryStream.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Starcounter.Binding.BinaryPropertyBinding">
            <summary>
            Class BinaryPropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.BinaryPropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a binary attribute as something other then a binary attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.BindingBuilder">
            <summary>
            Class BindingBuilder
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder._typeDef">
            <summary>
            The _type def
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder._assemblyName">
            <summary>
            The _assembly name
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder._assemblyBuilder">
            <summary>
            The _assembly builder
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder._moduleBuilder">
            <summary>
            The _module builder
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.#ctor(Starcounter.Binding.TypeDef,System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.BindingBuilder" /> class.
            </summary>
            <param name="typeDef">The type def.</param>
            <param name="currentAndBaseTableIds">The baseTableIds.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.WriteAssemblyToDisk">
            <summary>
            Writes the assembly to disk.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateTypeBinding">
            <summary>
            Creates the type binding.
            </summary>
            <returns>TypeBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.entityType">
            <summary>
            The entity type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.SetTypeBindingFlags(Starcounter.Binding.TypeBinding,System.Type)">
            <summary>
            Sets the type binding flags.
            </summary>
            <param name="binding">The binding.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.BuildPropertyBindingList(Starcounter.Binding.TypeBinding,System.Type)">
            <summary>
            Builds the property binding list.
            </summary>
            <param name="typeBinding">The type binding.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.boolPropertyBindingBaseType">
            <summary>
            The bool property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.boolPropertyBindingReturnType">
            <summary>
            The bool property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableBoolPropertyBindingReturnType">
            <summary>
            The nullable bool property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateBooleanPropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the boolean property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.datetimePropertyBindingBaseType">
            <summary>
            The datetime property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.datetimePropertyBindingReturnType">
            <summary>
            The datetime property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableDatetimePropertyBindingReturnType">
            <summary>
            The nullable datetime property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateDateTimePropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the date time property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.decimalPropertyBindingBaseType">
            <summary>
            The decimal property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.decimalPropertyBindingReturnType">
            <summary>
            The decimal property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableDecimalPropertyBindingReturnType">
            <summary>
            The nullable decimal property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateDecimalPropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the decimal property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.doublePropertyBindingBaseType">
            <summary>
            The double property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.doublePropertyBindingReturnType">
            <summary>
            The double property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableDoublePropertyBindingReturnType">
            <summary>
            The nullable double property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateDoublePropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the double property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.singlePropertyBindingBaseType">
            <summary>
            The single property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.singlePropertyBindingReturnType">
            <summary>
            The single property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableSinglePropertyBindingReturnType">
            <summary>
            The nullable single property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateSinglePropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the single property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.objectPropertyBindingBaseType">
            <summary>
            The object property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.objectPropertyBindingReturnType">
            <summary>
            The object property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateObjectPropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the object property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int8PropertyBindingBaseType">
            <summary>
            The int8 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int8PropertyBindingReturnType">
            <summary>
            The int8 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableInt8PropertyBindingReturnType">
            <summary>
            The nullable int8 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateSBytePropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the S byte property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int16PropertyBindingBaseType">
            <summary>
            The int16 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int16PropertyBindingReturnType">
            <summary>
            The int16 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableInt16PropertyBindingReturnType">
            <summary>
            The nullable int16 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateInt16PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the int16 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int32PropertyBindingBaseType">
            <summary>
            The int32 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int32PropertyBindingReturnType">
            <summary>
            The int32 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableInt32PropertyBindingReturnType">
            <summary>
            The nullable int32 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateInt32PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the int32 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int64PropertyBindingBaseType">
            <summary>
            The int64 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int64PropertyBindingReturnType">
            <summary>
            The int64 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableInt64PropertyBindingReturnType">
            <summary>
            The nullable int64 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateInt64PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the int64 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.stringPropertyBindingBaseType">
            <summary>
            The string property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.stringPropertyBindingReturnType">
            <summary>
            The string property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateStringPropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the string property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint8PropertyBindingBaseType">
            <summary>
            The uint8 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint8PropertyBindingReturnType">
            <summary>
            The uint8 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableUint8PropertyBindingReturnType">
            <summary>
            The nullable uint8 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateBytePropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the byte property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint16PropertyBindingBaseType">
            <summary>
            The uint16 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint16PropertyBindingReturnType">
            <summary>
            The uint16 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableUint16PropertyBindingReturnType">
            <summary>
            The nullable uint16 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateUInt16PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the U int16 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint32PropertyBindingBaseType">
            <summary>
            The uint32 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint32PropertyBindingReturnType">
            <summary>
            The uint32 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableUint32PropertyBindingReturnType">
            <summary>
            The nullable uint32 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateUInt32PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the U int32 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint64PropertyBindingBaseType">
            <summary>
            The uint64 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint64PropertyBindingReturnType">
            <summary>
            The uint64 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableUint64PropertyBindingReturnType">
            <summary>
            The nullable uint64 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateUInt64PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the U int64 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.binaryPropertyBindingBaseType">
            <summary>
            The binary property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.binaryPropertyBindingReturnType">
            <summary>
            The binary property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateBinaryPropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the binary property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.GeneratePropertyBindingDefault(Starcounter.Binding.PropertyDef,System.Type,System.String,System.Type,System.Type,System.Type)">
            <summary>
            Generates the property binding default.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="bindingBaseType">Type of the binding base.</param>
            <param name="methodName">Name of the method.</param>
            <param name="returnType">Type of the return.</param>
            <param name="nullableReturnType">Type of the nullable return.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.propertyBindingGetParams">
            <summary>
            The property binding get params
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.GeneratePropertyBindingDefault(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates the property binding default.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="methodName">Name of the method.</param>
            <param name="implReturnType">Type of the impl return.</param>
            <param name="targetReturnType">Type of the target return.</param>
            <param name="thisType">Type of the this.</param>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.GeneratePropertyBindingDefaultNullable(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates the property binding default nullable.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="methodName">Name of the method.</param>
            <param name="returnType">Type of the return.</param>
            <param name="thisType">Type of the this.</param>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.GeneratePropertyBindingNoNullOut(Starcounter.Binding.PropertyDef,System.Type,System.String,System.Type,System.Type)">
            <summary>
            Generates the property binding no null out.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="bindingBaseType">Type of the binding base.</param>
            <param name="methodName">Name of the method.</param>
            <param name="returnType">Type of the return.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.GeneratePropertyBindingNoNullOut(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates the property binding no null out.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="methodName">Name of the method.</param>
            <param name="returnType">Type of the return.</param>
            <param name="thisType">Type of the this.</param>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.VerifyProperty(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Verifies the property.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="returnType">Type of the return.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.VerifyObjectProperty(System.Reflection.PropertyInfo)">
            <summary>
            Verifies the object property.
            </summary>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="T:Starcounter.Binding.BooleanPropertyBinding">
            <summary>
            Class BooleanPropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.BooleanPropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a boolean attribute as something other then a boolean attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.ColumnDef">
            <summary>
            Class ColumnDef
            </summary>
        </member>
        <member name="F:Starcounter.Binding.ColumnDef.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Starcounter.Binding.ColumnDef.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.ColumnDef.IsNullable">
            <summary>
            The is nullable
            </summary>
        </member>
        <member name="F:Starcounter.Binding.ColumnDef.IsInherited">
            <summary>
            The is inherited
            </summary>
        </member>
        <member name="M:Starcounter.Binding.ColumnDef.#ctor(System.String,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.ColumnDef" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="isInherited">if set to <c>true</c> [is inherited].</param>
        </member>
        <member name="M:Starcounter.Binding.ColumnDef.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>ColumnDef.</returns>
        </member>
        <member name="M:Starcounter.Binding.ColumnDef.Equals(Starcounter.Binding.ColumnDef)">
            <summary>
            Equalses the specified column def.
            </summary>
            <param name="columnDef">The column def.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Starcounter.Binding.AppTypeDefs">
            <summary>
            Registered type definitions per application.
            </summary>
        </member>
        <member name="F:Starcounter.Binding.AppTypeDefs.typeDefsByName_">
            <summary>
            The type definitions by class name.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.AppTypeDefs.GetTypeDef(System.String)">
            <summary>
            Gets the type definition by class name.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.AppTypeDefs.RegisterTypeDefs(Starcounter.Binding.TypeDef[])">
            <summary>
            Registering type definitions by name.
            </summary>
            <param name="typeDefs"></param>
        </member>
        <member name="T:Starcounter.Binding.Bindings">
            <summary>
            Class Bindings
            </summary>
        </member>
        <member name="F:Starcounter.Binding.Bindings.typeDefsForApps_">
            <summary>
            Dictionary containing type definitions per application.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.Bindings.GetTypeDefsForApp(System.String)">
            <summary>
            Gets registered type definitions per application.
            </summary>
        </member>
        <member name="F:Starcounter.Binding.Bindings.typeBindingsById_">
            <summary>
            The type bindings by id_
            </summary>
        </member>
        <member name="F:Starcounter.Binding.Bindings.typeBindingsByName_">
            <summary>
            The type bindings by name_
            </summary>
        </member>
        <member name="F:Starcounter.Binding.Bindings.typeDefsById_">
            <summary>
            The type defs by id_
            </summary>
        </member>
        <member name="F:Starcounter.Binding.Bindings.typeDefsByName_">
            <summary>
            The type defs by name_
            </summary>
        </member>
        <member name="F:Starcounter.Binding.Bindings.syncRoot_">
            <summary>
            The sync root_
            </summary>
        </member>
        <member name="M:Starcounter.Binding.Bindings.RegisterTypeDefs(Starcounter.Binding.TypeDef[])">
            <summary>
            Registers the type defs.
            </summary>
            <param name="typeDefs">The type defs.</param>
        </member>
        <member name="M:Starcounter.Binding.Bindings.GetTypeDef(System.Int32)">
            <summary>
            Gets the type def.
            </summary>
            <param name="tableId">The table id.</param>
            <returns>TypeDef.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.GetTypeDef(System.String)">
            <summary>
            Gets the type def.
            </summary>
            <param name="name">The name.</param>
            <returns>TypeDef.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.GetTypeDefInsensitive(System.String)">
            <summary>
            Gets the type def.
            </summary>
            <param name="name">The name, which case doesn't need match.</param>
            <returns>TypeDef.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.GetAllTypeDefs">
            <summary>
            Gets all type defs.
            </summary>
            <returns>IEnumerable{TypeDef}.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.GetTypeBinding(System.Int32)">
            <summary>
            Gets the type binding.
            </summary>
            <param name="tableId">The table id.</param>
            <returns>TypeBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.GetTypeBinding(System.String)">
            <summary>
            Gets the type binding.
            </summary>
            <param name="name">The name.</param>
            <returns>TypeBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.GetTypeBindingInsensitive(System.String)">
            <summary>
            Gets the type binding.
            </summary>
            <param name="name">The name, which case doesn't need to match.</param>
            <returns>TypeBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.BuildTypeBindingFromTypeDef(System.Int32)">
            <summary>
            Builds the type binding from type def.
            </summary>
            <param name="tableId">The table id.</param>
            <returns>TypeBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.BuildTypeBindingFromTypeDef(System.String)">
            <summary>
            Builds the type binding from type def.
            </summary>
            <param name="name">The name.</param>
            <returns>TypeBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.BuildTypeBindingFromTypeDef(Starcounter.Binding.TypeDef)">
            <summary>
            Builds the type binding from type def.
            </summary>
            <param name="typeDef">The type def.</param>
            <returns>TypeBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.AddTypeBinding(Starcounter.Binding.TypeBinding)">
            <summary>
            Adds the type binding.
            </summary>
            <param name="typeBinding">The type binding.</param>
        </member>
        <member name="M:Starcounter.Binding.Bindings.CreateExceptionOnTypeDefNotFound">
            <summary>
            Creates the exception on type def not found.
            </summary>
            <returns>Exception.</returns>
        </member>
        <member name="M:Starcounter.Binding.Bindings.CreateExceptionOnTypeDefNotFound(System.Int32)">
            <summary>
            Creates the exception on type def not found.
            </summary>
            <returns>Exception.</returns>
        </member>
        <member name="T:Starcounter.Binding.BindingHelper">
            <summary>
            Class BindingHelper
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingHelper.ConvertDbTypeCodeToScTypeCode(Starcounter.Binding.DbTypeCode)">
            <summary>
            Converts the db type code to sc type code.
            </summary>
            <param name="t">The t.</param>
            <returns>System.Byte.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Starcounter.Binding.BindingHelper.ConvertScTypeCodeToDbTypeCode(System.Byte)">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Binding.BytePropertyBinding">
            <summary>
            Class BytePropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.BytePropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.DotNetBindingHelpers">
            <summary>
            Expose some utility code used when binding .NET code to
            Starcounter.
            </summary>
        </member>
        <member name="T:Starcounter.Binding.DotNetBindingHelpers.CSharp">
            <summary>
            Expose utility code for binding stuff relating to the
            C# langauge.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.DotNetBindingHelpers.CSharp.GetAutoImplementedBackingFieldName(System.String)">
            <summary>
            Gets the name of the backing field generated by the C# compiler
            to back up an auto-implemented property, given it's property name.
            </summary>
            <param name="propertyName">The name of the property whose backing
            field name should be returned.</param>
            <returns>The backing field name for the given property.</returns>
        </member>
        <member name="M:Starcounter.Binding.DotNetBindingHelpers.CSharp.BackingFieldNameToPropertyName(System.String)">
            <summary>
            Gets the washed property name from a given backing field name,
            emitted by the compiler for an auto-implemented property.
            </summary>
            <remarks>
            If the backing field name supplied doesn't match the decoration
            used for backing fields, the name is returned as-is.
            </remarks>
            <param name="backingFieldName">The backing field name.</param>
            <returns>The name of the auto-implemented property being backed.
            </returns>
        </member>
        <member name="T:Starcounter.Binding.TableCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Binding.TableCreate.#ctor(Starcounter.Binding.TableDef)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.TableCreate" /> class.
            </summary>
            <param name="tableDef">The definition for the table to create</param>
        </member>
        <member name="M:Starcounter.Binding.TableCreate.Eval">
            <summary>
            Evaluates and creates the table.
            </summary>
            <returns>The created table</returns>
        </member>
        <member name="T:Starcounter.Binding.ObjectPropertyBinding">
            <summary>
            Class ObjectPropertyBinding
            </summary>
        </member>
        <member name="F:Starcounter.Binding.ObjectPropertyBinding.targetTypeBinding_">
            <summary>
            The target type binding_
            </summary>
        </member>
        <member name="F:Starcounter.Binding.ObjectPropertyBinding.targetTypeName_">
            <summary>
            The target type name_
            </summary>
        </member>
        <member name="P:Starcounter.Binding.ObjectPropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="P:Starcounter.Binding.ObjectPropertyBinding.TypeBinding">
            <summary>
            Gets the type binding.
            </summary>
            <value>The type binding.</value>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.SetTargetTypeName(System.String)">
            <summary>
            Sets the name of the target type.
            </summary>
            <param name="targetTypeName">Name of the target type.</param>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a reference attribute as something other then a reference attribute.</exception>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.LookupTargetTypeBinding">
            <summary>
            Lookups the target type binding.
            </summary>
            <returns>TypeBinding.</returns>
        </member>
        <member name="T:Starcounter.Binding.SinglePropertyBinding">
            <summary>
            Class SinglePropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.SinglePropertyBinding.TypeCode">
            <summary>
            Property value type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.SinglePropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="T:Starcounter.Binding.DateTimePropertyBinding">
            <summary>
            Class DateTimePropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.DateTimePropertyBinding" /> class.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.DateTimePropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a date-time attribute as something other then a date-time attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.DecimalPropertyBinding">
            <summary>
            Class DecimalPropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.DecimalPropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a decimal attribute as something other then a decimal attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.DoublePropertyBinding">
            <summary>
            Class DoublePropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.DoublePropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.DoublePropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a single to a double.</exception>
        </member>
        <member name="T:Starcounter.Binding.RealPropertyBinding">
            <summary>
            Class RealPropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a real attribute as something other then a real attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.TableUpgrade">
             <summary>
            
             </summary>
        </member>
        <member name="M:Starcounter.Binding.TableUpgrade.#ctor(System.String,Starcounter.Binding.TableDef,Starcounter.Binding.TableDef)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.TableUpgrade" /> class.
            </summary>
            <param name="tableName">Name of the table to upgrade.</param>
            <param name="oldTableDef">The existing definition of the table.</param>
            <param name="newTableDef">The new definition of the table.</param>
        </member>
        <member name="M:Starcounter.Binding.TableUpgrade.Eval">
            <summary>
            Evaluates and upgrades the table.
            </summary>
            <returns>The new table definition.</returns>
        </member>
        <member name="T:Starcounter.Binding.UInt16PropertyBinding">
            <summary>
            Class UInt16PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.UInt16PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 16-bit unsigned value to a 8-bit unsigned value.</exception>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.UInt32PropertyBinding">
            <summary>
            Class UInt32PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.UInt32PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 32-bit unsigned value to a 8-bit unsigned value.</exception>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 32-bit unsigned value to a 16-bit unsigned value.</exception>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.UInt64PropertyBinding">
            <summary>
            Class UInt64PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.UInt64PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit unsigned value to a 8-bit unsigned value.</exception>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit unsigned value to a 16-bit unsigned value.</exception>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit unsigned value to a 32-bit unsigned value.</exception>
        </member>
        <member name="T:Starcounter.Binding.SBytePropertyBinding">
            <summary>
            Class SBytePropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.SBytePropertyBinding.TypeCode">
            <summary>
            Property value type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.SBytePropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.SBytePropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.SBytePropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.Int16PropertyBinding">
            <summary>
            Class Int16PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.Int16PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.Int16PropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 16-bit integer value to a 8-bit integer value.</exception>
        </member>
        <member name="M:Starcounter.Binding.Int16PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.Int16PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.Int32PropertyBinding">
            <summary>
            Class Int32PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.Int32PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.Int32PropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 32-bit integer value to a 8-bit integer value.</exception>
        </member>
        <member name="M:Starcounter.Binding.Int32PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 32-bit integer value to a 16-bit integer value.</exception>
        </member>
        <member name="M:Starcounter.Binding.Int32PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.Int64PropertyBinding">
            <summary>
            Class Int64PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.Int64PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.Int64PropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit integer value to a 8-bit integer value.</exception>
        </member>
        <member name="M:Starcounter.Binding.Int64PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit integer value to a 16-bit integer value.</exception>
        </member>
        <member name="M:Starcounter.Binding.Int64PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit integer value to a 32-bit integer value.</exception>
        </member>
        <member name="T:Starcounter.Binding.IntPropertyBinding">
            <summary>
            Class IntPropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.IntPropertyBinding" /> class.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access an integer attribute as something other then an integer attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.PrimitivePropertyBinding">
            <summary>
            Class PrimitivePropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.PrimitivePropertyBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.PrimitivePropertyBinding" /> class.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.PrimitivePropertyBinding.TypeBinding">
            <summary>
            Gets the type binding.
            </summary>
            <value>The type binding.</value>
        </member>
        <member name="T:Starcounter.Binding.PropertyDef">
            <summary>
            Class PropertyDef
            </summary>
        </member>
        <member name="F:Starcounter.Binding.PropertyDef.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Starcounter.Binding.PropertyDef.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.PropertyDef.IsNullable">
            <summary>
            The is nullable
            </summary>
        </member>
        <member name="F:Starcounter.Binding.PropertyDef.TargetTypeName">
            <summary>
            The target type name
            </summary>
        </member>
        <member name="F:Starcounter.Binding.PropertyDef.ColumnName">
            <summary>
            Name of column if representing a database column. NULL otherwise.
            </summary>
        </member>
        <member name="F:Starcounter.Binding.PropertyDef.ColumnIndex">
            <summary>
            Index of column if representing a database column. -1 otherwise.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.PropertyDef.SpecialFlags">
            <summary>
            Flags that gives the current property extended semantics if applied.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.PropertyDef.IsTypeReference">
            <summary>
            Gets a value indicating of the current property is to be
            considered a type reference, part of Starcounter dynamic
            types.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.PropertyDef.IsInheritsReference">
            <summary>
            Gets a value indicating if the current property is to be
            considered a reference to a base type, part of Starcounter
            dynamic types.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.PropertyDef.IsTypeName">
            <summary>
            Gets a value indicating if the current property is to be
            considered holding the type name of a class part of the new
            dynamic types domain.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.PropertyDef.#ctor(System.String,Starcounter.Binding.DbTypeCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.PropertyDef" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Starcounter.Binding.PropertyDef.#ctor(System.String,Starcounter.Binding.DbTypeCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.PropertyDef" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="targetTypeName">Name of the target type.</param>
        </member>
        <member name="M:Starcounter.Binding.PropertyDef.#ctor(System.String,Starcounter.Binding.DbTypeCode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.PropertyDef" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
        </member>
        <member name="M:Starcounter.Binding.PropertyDef.#ctor(System.String,Starcounter.Binding.DbTypeCode,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.PropertyDef" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="targetTypeName">Name of the target type.</param>
        </member>
        <member name="T:Starcounter.Binding.DbTypeCode">
            <summary>
            Enum DbTypeCode
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Boolean">
            <summary>
            The boolean
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Byte">
            <summary>
            The byte
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.DateTime">
            <summary>
            The date time
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Decimal">
            <summary>
            The decimal
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Single">
            <summary>
            The single
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Double">
            <summary>
            The double
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Int64">
            <summary>
            The int64
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Int32">
            <summary>
            The int32
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Int16">
            <summary>
            The int16
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Object">
            <summary>
            The object
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.SByte">
            <summary>
            The S byte
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.String">
            <summary>
            The string
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.UInt64">
            <summary>
            The U int64
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.UInt32">
            <summary>
            The U int32
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.UInt16">
            <summary>
            The U int16
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Binary">
            <summary>
            The binary
            </summary>
        </member>
        <member name="F:Starcounter.Binding.DbTypeCode.Key">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Binding.StringPropertyBinding">
            <summary>
            Class StringPropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.StringPropertyBinding" /> class.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.StringPropertyBinding.TypeCode">
            <summary>
            Property value type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a string attribute as something other then a string attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.TypeDef">
            <summary>
            Class TypeDef
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeDef.UseOnlyFullNamespaceSqlName">
            <summary>
            SQL should access this class only using full name.
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeDef.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeDef.BaseName">
            <summary>
            The base name
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeDef._PropertyDefs">
            <summary>
            The property defs
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeDef.TypeLoader">
            <summary>
            The type loader
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeDef.TableDef">
            <summary>
            The table def
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeDef.ColumnRuntimeTypes">
            <summary>
            Array parallel to TableDef.ColumnDefs with type codes of columns as mapped by
            properties.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeDef.LowerName">
            <summary>
            Gets the full name of the class in lowercase.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeDef.ShortName">
            <summary>
            Gets the class name without namespaces in lowercase.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeDef.TypePropertyIndex">
            <summary>
            Gets the index of the property that references the (dynamic)
            type (if any) of the current TypeDef. Set to -1 when no such
            information is available.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeDef.InheritsPropertyIndex">
            <summary>
            Gets the index of the property that references the (dynamic)
            based type (if any) of the current TypeDef. Set to -1 when no such
            information is available.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeDef.TypeNameIndex">
            <summary>
            Gets the index of the property that references the (dynamic)
            type name (if any) of the current TypeDef. Set to -1 when no such
            information is available.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.TypeDef.#ctor(System.String,System.String,Starcounter.Binding.PropertyDef[],Starcounter.Binding.TypeLoader,Starcounter.Binding.TableDef,Starcounter.Binding.DbTypeCode[])">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.TypeDef" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseName">Name of the base.</param>
            <param name="propertyDefs">The property defs.</param>
            <param name="typeLoader">The type loader.</param>
            <param name="tableDef">The table def.</param>
        </member>
        <member name="M:Starcounter.Binding.TypeDef.CreateTypeTableDef(System.Type)">
            <summary>
            This is a help method, which creates TypeDef and TableDef for given meta-data type.
            </summary>
            <param name="sysType">Instance of System.Type describing the meta-data type.</param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Binding.TypeDef.PopulatePropertyDef(Starcounter.Binding.TableDef,Starcounter.Binding.TypeDef[])">
            <summary>
            Populates properties PropertyDefs, ColumnRuntimeTypes, and TableDef.ColumnDefs
            to describe meta-tables, since they cannot be created when TypeDef is created
            </summary>
        </member>
        <member name="M:Starcounter.Binding.TypeDef.AssignDymanicTypeInformation">
            <summary>
            Invoked every time _PropertyDefs is assigned. Reevaluates
            dynamic type information for the current TypeDef.
            </summary>
        </member>
        <member name="T:Starcounter.Binding.TypeLoader">
            <summary>
            Class TypeLoader
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeLoader.assemblyName_">
            <summary>
            The assembly name_
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeLoader.typeName_">
            <summary>
            The type name_
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeLoader.AssemblyName">
            <summary>
            Gets the assembly name of the current instance.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeLoader.ScopedName">
            <summary>
            Gets the name of the current type, scoped by
            the assembly.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.TypeLoader.#ctor(System.Reflection.AssemblyName,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.TypeLoader" /> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Starcounter.Binding.TypeLoader.Load">
            <summary>
            Loads this instance.
            </summary>
            <returns>Type.</returns>
        </member>
        <member name="T:Starcounter.Binding.UIntPropertyBinding">
            <summary>
            Class UIntPropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.UIntPropertyBinding" /> class.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access an unsigned attribute as something other then an unsigned attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.IObjectProxy">
            <summary>
            Expose a low-level state related interface to managed database
            objects. A proxy is a view with a small additional API to allow
            modification of the underlying state.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.IObjectProxy.ThisHandle">
            <summary>
            Gets the underlying "this handle".
            </summary>
            <remarks>
            To assign the handle, use <see cref="M:Starcounter.Binding.IObjectProxy.Bind(System.UInt64,System.UInt64,Starcounter.Binding.TypeBinding)"/>.
            </remarks>
        </member>
        <member name="M:Starcounter.Binding.IObjectProxy.Bind(System.UInt64,System.UInt64,Starcounter.Binding.TypeBinding)">
            <summary>
            Binds the underlying object to the given address, object id
            and type binding.
            </summary>
            <param name="addr">The objects (opaque) address.</param>
            <param name="oid">The objects unique identity.</param>
            <param name="typeBinding">The <see cref="T:Starcounter.Binding.TypeBinding"/> to
            assign the underlying object.</param>
        </member>
        <member name="P:Starcounter.Binding.IndexInfo.Handle">
            <summary>
            Index handle. Used to access the index.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.IndexInfo.TableId">
            <summary>
            Table Id for which index is defined.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.IndexInfo.Name">
            <summary>
            Name of the index. Used by user to identify the index, for example in query hints.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.IndexInfo.Token">
            <summary>
            </summary>
        </member>
        <member name="P:Starcounter.Binding.IndexInfo.AttributeCount">
            <summary>
            The number of attributes (paths) in the (combined) index.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.IndexInfo.GetColumnIndex(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Binding.IndexInfo.GetColumnName(System.Int32)">
            <summary>
            Returns the name of the path with the specified index number within the combined index.
            </summary>
            <param name="index">An index number within the combined index.</param>
            <returns>The name of the path with the input index number.</returns>
        </member>
        <member name="M:Starcounter.Binding.IndexInfo.GetColumnType(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Binding.IndexInfo.GetSortOrdering(System.Int32)">
            <summary>
            Returns the sort ordering of the path with the specified index number within the combined index.
            </summary>
            <param name="index">An index number within the combined index.</param>
            <returns>The sort ordering of the path with the input index number.</returns>
        </member>
        <member name="T:Starcounter.Binding.IndexInfo2">
            <summary>
            <para>
            Extension of index info representing an index info mapped to a type
            (rather then to the underlying table).
            </para>
            <para>
            Maps column type codes to that of type properties mapping the columns
            part of the key rather then the types of underlying columns.
            </para>
            </summary>
        </member>
        <member name="M:Starcounter.Binding.IndexInfo2.GetTypeCode(System.Int32)">
            <summary>
            Returns the database type code of the path with the specified index number within the combined index.
            </summary>
            <param name="index">An index number within the combined index.</param>
            <returns>The type code of the path with the input index number.</returns>
        </member>
        <member name="T:Starcounter.Binding.IPropertyBinding">
            <summary>
            Interface to an object representing a binding between a propery (or
            field before enhanced) of a managed type and an attribute of a
            database type. The managed type could either be a static or dynamic
            type.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.IPropertyBinding.Index">
            <summary>
            Property index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Starcounter.Binding.IPropertyBinding.Name">
            <summary>
            Property name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Starcounter.Binding.IPropertyBinding.DisplayName">
            <summary>
            Gets name friendly for displaying
            </summary>
        </member>
        <member name="P:Starcounter.Binding.IPropertyBinding.TypeBinding">
            <summary>
            Binding used by the property type if any.
            </summary>
            <value>The type binding.</value>
            <returns>
            A type binding. Null if the target is a literal, only set if a
            reference property.
              </returns>
        </member>
        <member name="P:Starcounter.Binding.IPropertyBinding.TypeCode">
            <summary>
            Property value type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="T:Starcounter.Binding.ITypeBinding">
            <summary>
            Interface ITypeBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.ITypeBinding.Name">
            <summary>
            Type binding name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Starcounter.Binding.ITypeBinding.PropertyCount">
            <summary>
            Returns number of properties bindings.
            </summary>
            <value>The property count.</value>
        </member>
        <member name="M:Starcounter.Binding.ITypeBinding.GetPropertyBinding(System.String)">
            <summary>
            Gets the property binding for the property with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>A property binding. Returns null is no property with the specified
            name exists.</returns>
        </member>
        <member name="M:Starcounter.Binding.ITypeBinding.GetPropertyBinding(System.Int32)">
            <summary>
            Gets the property binding for the property at the specified index.
            </summary>
            <param name="index">Index of the property binding</param>
            <returns>A property binding. Returns null is no property with the specified
            name exists.</returns>
        </member>
        <member name="T:Starcounter.Binding.PropertyBinding">
            <summary>
            Class PropertyBinding
            </summary>
        </member>
        <member name="F:Starcounter.Binding.PropertyBinding._dataIndex">
            <summary>
            Index of column if representing a database column. -1 otherwise.
            </summary>
        </member>
        <member name="F:Starcounter.Binding.PropertyBinding._index">
            <summary>
            The _index
            </summary>
        </member>
        <member name="F:Starcounter.Binding.PropertyBinding._name">
            <summary>
            The _name
            </summary>
        </member>
        <member name="F:Starcounter.Binding.PropertyBinding._lowername">
            <summary>
            The _uppername
            </summary>
        </member>
        <member name="P:Starcounter.Binding.PropertyBinding.Index">
            <summary>
            Property index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Starcounter.Binding.PropertyBinding.Name">
            <summary>
            Property name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Starcounter.Binding.PropertyBinding.DisplayName">
            <summary>
            Gets property name friendly to display.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.PropertyBinding.LowerName">
            <summary>
            Gets the name of the upper.
            </summary>
            <value>The name of the upper.</value>
        </member>
        <member name="P:Starcounter.Binding.PropertyBinding.TypeBinding">
            <summary>
            Binding used by the property type if any.
            </summary>
            <value>The type binding.</value>
            <returns>
            A type binding. Null if the target is a literal, only set if a
            reference property.
              </returns>
        </member>
        <member name="P:Starcounter.Binding.PropertyBinding.TypeCode">
            <summary>
            Property value type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetBinary(System.Object)">
            <summary>
            Gets the binary.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetBoolean(System.Object)">
            <summary>
            Gets the boolean.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetByte(System.Object)">
            <summary>
            Gets the byte.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetDateTime(System.Object)">
            <summary>
            Gets the date time.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetDecimal(System.Object)">
            <summary>
            Gets the decimal.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetDouble(System.Object)">
            <summary>
            Gets the double.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetInt16(System.Object)">
            <summary>
            Gets the int16.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetInt32(System.Object)">
            <summary>
            Gets the int32.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetInt64(System.Object)">
            <summary>
            Gets the int64.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetObject(System.Object)">
            <summary>
            Gets the object.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetSByte(System.Object)">
            <summary>
            Gets the S byte.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetSingle(System.Object)">
            <summary>
            Gets the single.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetString(System.Object)">
            <summary>
            Gets the string.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetUInt16(System.Object)">
            <summary>
            Gets the U int16.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetUInt32(System.Object)">
            <summary>
            Gets the U int32.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetUInt64(System.Object)">
            <summary>
            Gets the U int64.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.GetDataIndex">
            <summary>
            Gets the Index of column if representing a database column. -1 otherwise.
            </summary>
            <returns>the index of column if so</returns>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.SetDataIndex(System.Int32)">
            <summary>
            Sets the index of the data.
            </summary>
            <param name="dataIndex">Index of the data.</param>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.SetIndex(System.Int32)">
            <summary>
            Sets the index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Starcounter.Binding.PropertyBinding.SetName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:Starcounter.Binding.TypeRepository">
            <summary>
            Class TypeRepository
            </summary>
        </member>
        <member name="M:Starcounter.Binding.TypeRepository.GetTypeBinding(System.UInt16)">
            <summary>
            Gets the type binding.
            </summary>
            <param name="tableId">The table id.</param>
            <returns>TypeBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeRepository.GetTypeBinding(System.String)">
            <summary>
            Gets the type binding.
            </summary>
            <param name="name">The name.</param>
            <returns>TypeBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeRepository.TryGetTypeBindingByShortName(System.String,Starcounter.Binding.TypeBinding@)">
            <summary>
            Tries the short name of the get type binding by.
            </summary>
            <param name="name">The name.</param>
            <param name="typeBind">The type bind.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Starcounter.Binding.TableDef">
            <summary>
            Definition of a database table.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.TableDef.ConstructTableDef(Starcounter.Internal.sccoredb.STARI_LAYOUT_INFO,System.UInt32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TableDef.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TableDef.BaseName">
            <summary>
            The base name
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TableDef._ColumnDefs">
            <summary>
            The column defs
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TableDef.TableId">
            <summary>
            The table id
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TableDef.allLayoutIds">
            <summary>
            Contains all different layout used for this table. 
            </summary>
        </member>
        <member name="M:Starcounter.Binding.TableDef.#ctor(System.String,Starcounter.Binding.ColumnDef[])">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.TableDef" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="columnsDefs">The columns defs.</param>
        </member>
        <member name="M:Starcounter.Binding.TableDef.#ctor(System.String,System.String,Starcounter.Binding.ColumnDef[])">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.TableDef" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseName">Name of the base.</param>
            <param name="columnsDefs">The columns defs.</param>
        </member>
        <member name="M:Starcounter.Binding.TableDef.#ctor(System.String,System.String,Starcounter.Binding.ColumnDef[],System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.TableDef" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseName">Name of the base.</param>
            <param name="columnsDefs">The columns defs.</param>
            <param name="tableId">The table id.</param>
        </member>
        <member name="P:Starcounter.Binding.TableDef.ShortName">
            <summary>
            Gets the short name.
            </summary>
            <value>The short name.</value>
        </member>
        <member name="M:Starcounter.Binding.TableDef.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>TableDef.</returns>
        </member>
        <member name="M:Starcounter.Binding.TableDef.Equals(Starcounter.Binding.TableDef)">
            <summary>
            
            </summary>
            <param name="tableDef"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Binding.TableDef.GetAllIndexInfos">
            <summary>
            Gets all index infos.
            </summary>
            <returns>IndexInfo[][].</returns>
        </member>
        <member name="M:Starcounter.Binding.TableDef.GetIndexInfo(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Binding.TypeBindingFlags">
            <summary>
            Enum TypeBindingFlags
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeBindingFlags.Callback_OnDelete">
            <summary>
            Set if the type provide a concrete OnDelete method
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeBindingFlags.Hook_OnDelete">
            <summary>
            Set if there are at least 1 hook installed that need
            to be invoked on delete
            </summary>
        </member>
        <member name="T:Starcounter.Binding.TypeBinding">
            <summary>
            Class TypeBinding
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeBinding.Flags">
            <summary>
            The flags
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeBinding.TypeDef">
            <summary>
            The type def
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeBinding.propertyBindings_">
            <summary>
            The property bindings_
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeBinding.propertyBindingsByName_">
            <summary>
            The property bindings by name_
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeBinding.name_">
            <summary>
            The name_
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeBinding.Name">
            <summary>
            Type binding name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:Starcounter.Binding.TypeBinding.tableId_">
            <summary>
            The table id_
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeBinding.TableId">
            <summary>
            Gets the table id.
            </summary>
            <value>The table id.</value>
        </member>
        <member name="F:Starcounter.Binding.TypeBinding.shortname_">
            <summary>
            Short name is class name, i.e., last name of the full name.
            </summary>
        </member>
        <member name="F:Starcounter.Binding.TypeBinding.lowername_">
            <summary>
            The uppername_
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeBinding.LowerName">
            <summary>
            Gets the name of the lower.
            </summary>
            <value>The name of the lower.</value>
        </member>
        <member name="P:Starcounter.Binding.TypeBinding.ShortName">
            <summary>
            Gets the class name without namespaces in lowercase.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeBinding.Type">
            <summary>
            Gets the property that is considered the dynamic type
            of the current type binding, or null if no such reference
            has been established.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeBinding.Inherits">
            <summary>
            Gets the property that is considered the dynamic base type
            of the current type binding, or null if no such reference
            has been established.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.TypeBinding.TypeName">
            <summary>
            Gets the property that is considered the dynamic type name
            of the current type binding, or null if no such reference
            has been established.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.NewUninitializedInst">
            <summary>
            News the uninitialized inst.
            </summary>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.NewInstanceUninit">
            <summary>
            News the instance uninit.
            </summary>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.NewInstance(System.UInt64,System.UInt64)">
            <summary>
            News the instance.
            </summary>
            <param name="addr">The addr.</param>
            <param name="oid">The oid.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.SubTypeOf(Starcounter.Binding.TypeBinding)">
            <summary>
            Controls if this type-binding represents a subtype of the type of the input type-binding (superTypeBind).
            </summary>
            <param name="superTypeBind">Input type-binding.</param>
            <returns>True, if this type-binding represents a subtype of (or equals) the type of the input type-binding (superTypeBind),
            otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.GetPropertyBinding(System.Int32)">
            <summary>
            Gets the property binding.
            </summary>
            <param name="index">The index.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.GetPropertyBinding(System.String)">
            <summary>
            Gets the property binding.
            </summary>
            <param name="name">The name.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.GetPropertyBindingInsensitive(System.String)">
            <summary>
            Gets the property binding.
            </summary>
            <param name="name">The name, which case does not need to match.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.GetAllInheritedIndexInfos">
            <summary>
            Gets all index infos including base classes.
            </summary>
            <returns>Array of index infos.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.GetIndexInfo(System.String)">
            <summary>
            Gets the index info.
            </summary>
            <param name="name">The name.</param>
            <returns>IndexInfo2.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.GetInheritedIndexInfo(System.String)">
            <summary>
            Gets the index info for the given index in this type or its supertypes.
            </summary>
            <param name="name">The name.</param>
            <returns>IndexInfo2.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.SetPropertyBindings(Starcounter.Binding.PropertyBinding[])">
            <summary>
            Sets the property bindings.
            </summary>
            <param name="propertyBindings">The property bindings.</param>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.Starcounter#Binding#ITypeBinding#GetPropertyBinding(System.String)">
            <summary>
            Gets the property binding for the property with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>A property binding. Returns null is no property with the specified
            name exists.</returns>
        </member>
        <member name="M:Starcounter.Binding.TypeBinding.Starcounter#Binding#ITypeBinding#GetPropertyBinding(System.Int32)">
            <summary>
            Gets the property binding for the property at the specified index.
            </summary>
            <param name="index">Index of the property binding</param>
            <returns>A property binding. Returns null is no property with the specified
            name exists.</returns>
        </member>
        <member name="P:Starcounter.Binding.TypeBinding.Starcounter#Binding#ITypeBinding#PropertyCount">
            <summary>
            Returns number of properties bindings.
            </summary>
            <value>The property count.</value>
        </member>
        <member name="T:Starcounter.Hook`1">
            <summary>
            Principal entrypoint to the Starcounter hook API Provides
            a set of events allowing hooks to be registered.
            </summary>
            <typeparam name="T">The database type to hook.</typeparam>
        </member>
        <member name="E:Starcounter.Hook`1.BeforeDelete">
            <summary>
            Occurs before an object of {T} is being deleted.
            </summary>
        </member>
        <member name="E:Starcounter.Hook`1.CommitDelete">
            <summary>
            Occurs when an object of the {T} is deleted in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="E:Starcounter.Hook`1.CommitInsert">
            <summary>
            Occurs when an object of the {T} is inserted in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="E:Starcounter.Hook`1.CommitUpdate">
            <summary>
            Occurs when an object of the {T} is updated in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="T:Starcounter.CommitHookConfiguration">
            <summary>
            Defines constants and methods relating to configuration of
            commit hooks in the kernel.
            </summary>
        </member>
        <member name="F:Starcounter.CommitHookConfiguration.Insert">
            <summary>
            Internal token/flag representing inserts.
            </summary>
        </member>
        <member name="F:Starcounter.CommitHookConfiguration.Update">
            <summary>
            Internal token/flag representing updates.
            </summary>
        </member>
        <member name="F:Starcounter.CommitHookConfiguration.Delete">
            <summary>
            Internal token/flag representing deletes.
            </summary>
        </member>
        <member name="M:Starcounter.CommitHookConfiguration.FromHookType(System.UInt32)">
            <summary>
            Gets the <see cref="T:Starcounter.CommitHookConfiguration"/> corresponding to
            the given <see cref="T:Starcounter.HookType"/>.
            </summary>
            <param name="type">The configuration whose
            corresponding type of hook to return.</param>
            <returns>Hook configuration corresponding to the given type.</returns>
        </member>
        <member name="M:Starcounter.CommitHookConfiguration.ToHookType(System.UInt32)">
            <summary>
            Gets the <see cref="T:Starcounter.HookType"/> corresponding to the given
            <see cref="T:Starcounter.CommitHookConfiguration"/>.
            </summary>
            <param name="configuration">The configuration whose
            corresponding type of hook to return.</param>
            <returns>Hook type corresponding to the given config.</returns>
        </member>
        <member name="M:Starcounter.CommitHookConfiguration.CalculateEffectiveConfiguration(Starcounter.HookKey)">
            <summary>
            Returns a mask with all configuration installed for
            the type given a <see cref="T:Starcounter.HookKey"/>.
            </summary>
            <param name="key">Key whose type we should gather installed
            configuration for.</param>
            <returns>Mask with all hook configuration installed for the
            given type.
            </returns>
        </member>
        <member name="T:Starcounter.HookDelegateList`1">
            <summary>
            List of delegates with the same signature type.
            </summary>
            <typeparam name="T">Type of target.</typeparam>
        </member>
        <member name="M:Starcounter.HookDelegateList`1.Add(System.EventHandler{`0})">
            <summary>
            Adds a new handler with the given target.
            </summary>
            <param name="h">The handler to add.</param>
            <returns>The index of the added handler.</returns>
        </member>
        <member name="M:Starcounter.HookDelegateList`1.Get(System.Int32)">
            <summary>
            Gets a handler/delegate by index.
            </summary>
            <param name="index">The index of the handler to
            retreive</param>
            <returns>The handler with the given index.</returns>
        </member>
        <member name="T:Starcounter.Hooks.RuntimeDelegate`1">
            <summary>
            Encapsulates a delegate and a named database type and expose
            a set of events that can be manipulated to subscribe/unsubscribe
            to certain database triggers, fired when the triggering type is
            being mutated.
            </summary>
            <typeparam name="T">The host type used in the delegate signature.
            Must align with the triggering type.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Hooks.RuntimeDelegate`1.TriggeredBy(System.Type,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Hooks.RuntimeDelegate`1.TriggeredBy(System.String,System.Boolean)" -->
        <member name="E:Starcounter.Hooks.RuntimeDelegate`1.BeforeDelete">
            <summary>
            Occurs before an object of the triggering type is being deleted.
            </summary>
        </member>
        <member name="E:Starcounter.Hooks.RuntimeDelegate`1.CommitDelete">
            <summary>
            Occurs when an object of the triggering type is deleted in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="E:Starcounter.Hooks.RuntimeDelegate`1.CommitInsert">
            <summary>
            Occurs when an object of the triggering type is inserted in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="E:Starcounter.Hooks.RuntimeDelegate`1.CommitUpdate">
            <summary>
            Occurs when an object of the triggering type is updated in a
            transaction that is being committed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Starcounter.RuntimeInstalledHookDelegate`1" -->
        <member name="P:Starcounter.RuntimeInstalledHookDelegate`1.Delegates">
            <summary>
            The list of delegates the current entry reference.
            </summary>
        </member>
        <member name="P:Starcounter.RuntimeInstalledHookDelegate`1.Index">
            <summary>
            The particular hook in the list of deleages the current
            entry reference.
            </summary>
        </member>
        <member name="P:Starcounter.RuntimeInstalledHookDelegate`1.ApplicationName">
            <summary>
            The application name that defines in what scope the
            current delegate should execute when triggered.
            </summary>
        </member>
        <member name="M:Starcounter.RuntimeInstalledHookDelegate`1.Invoke(System.Object)">
            <summary>
            Invokes the referenced delegate with the given argument.
            </summary>
            <param name="triggeringObject">Carry to be passed to the
            delegate.</param>
        </member>
        <member name="T:Starcounter.HookKey">
            <summary>
            A key identifying a triggering hook type, including its
            identity and the operation being hooked (e.g. Insert);
            </summary>
            <example>
            Here, the <see cref="T:Starcounter.HookKey"/> will contain a TypeID
            that is the table ID of the "Foo" table (e.g 25), and
            the TypeOfHook will have a value equal to the 
            <see cref="F:Starcounter.HookType.CommitInsert"/> constant.
            <code>
            // Register an insertion hook on class/table Foo
            Hook{Foo}.OnInsert(f => {...});
            </code>
            </example>
        </member>
        <member name="P:Starcounter.HookKey.TypeId">
            <summary>
            Gets the type id of this hook, normally a table id.
            </summary>
        </member>
        <member name="P:Starcounter.HookKey.TypeOfHook">
            <summary>
            Gets the type of hook the current key represent.
            <see cref="T:Starcounter.HookType"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Starcounter.HookKey.EqualityComparer" -->
        <member name="M:Starcounter.HookKey.FromTable(System.UInt16,System.UInt32,Starcounter.HookKey)">
            <summary>
            Creates a key based on a table id.
            </summary>
            <param name="tableId">The table id that identifies the type
            of the key.</param>
            <param name="hookType">The type of hook the key are to
            represent. Valid values are from <see cref="T:Starcounter.HookType"/>.
            </param>
            <param name="keyToReuse">Optional key to reuse. If not given,
            a new key is instantiated.</param>
            <returns>A new <see cref="T:Starcounter.HookKey"/> based on the given values.
            </returns>
        </member>
        <member name="T:Starcounter.HookType">
            <summary>
            Defines the type of hooks supported by Starcounter.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.CommitInsert">
            <summary>
            Integer returned on commit when an INSERT is detected
            on a kernel type that has the corresponding hook flag set.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.CommitUpdate">
            <summary>
            Integer returned on commit when an UPDATE is detected
            on a kernel type that has the corresponding hook flag set.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.CommitDelete">
            <summary>
            Integer returned on commit when a DELETE is detected
            on a kernel type that has the corresponding hook flag set.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.BeforeDelete">
            <summary>
            Represents a hook that trigger just before a delete is carried
            out.
            </summary>
        </member>
        <member name="M:Starcounter.HookType.IsCommitInsertOrUpdate(System.UInt32)">
            <summary>
            Returns true if the given type represents either an
            commt hook insert or an update; false otherwise.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>True if insert or update; false otherwise.</returns>
        </member>
        <member name="M:Starcounter.HookType.IsCommitHook(System.UInt32)">
            <summary>
            Returns true if the given type represents one of the
            commit hooks; false otherwise.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>True the type represents a commit hook; false otherwise.</returns>
        </member>
        <member name="T:Starcounter.InvokableHook">
            <summary>
            Provides a way for Starcounter to list all hooks in a unified way
            and allows them to be mapped and invoked.
            </summary>
        </member>
        <member name="F:Starcounter.InvokableHook.HooksPerTrigger">
            <summary>
            Code host scoped dictonary mapping every triggering type
            and operation to a set of hooks that are to be invoked when
            the corresponding commit occurs.
            </summary>
        </member>
        <member name="M:Starcounter.InvokableHook.InvokeInsert(Starcounter.HookKey,Starcounter.IObjectView)">
            <summary>
            Invokes all hooks installed to watch when instances of 
            <paramref name="key"/> are inserted.
            </summary>
            <param name="key">The key to look for.</param>
            <param name="proxy">The carry to pass to the delegate.</param>
        </member>
        <member name="M:Starcounter.InvokableHook.InvokeUpdate(Starcounter.HookKey,Starcounter.IObjectView)">
            <summary>
            Invokes all hooks installed to watch when instances of 
            <paramref name="key"/> are updated.
            </summary>
            <param name="key">The key to look for.</param>
            <param name="proxy">The carry to pass to the delegate.</param>
        </member>
        <member name="M:Starcounter.InvokableHook.InvokeBeforeDelete(Starcounter.HookKey,Starcounter.IObjectView)">
            <summary>
            Invokes all hooks installed to watch before instances of 
            <paramref name="key"/> are deleted.
            </summary>
            <param name="key">The key to look for.</param>
            <param name="proxy">The carry in the form of an proxy
            to pass to the delegate.</param>
        </member>
        <member name="M:Starcounter.InvokableHook.InvokeDelete(Starcounter.HookKey,System.UInt64)">
            <summary>
            Invokes all hooks installed to watch when instances of 
            <paramref name="key"/> are deleted.
            </summary>
            <param name="key">The key to look for.</param>
            <param name="proxy">The carry in the form of an object ID
            to pass to the delegate.</param>
        </member>
        <member name="M:Starcounter.InvokableHook.InvokeAllWithKey(Starcounter.HookKey,System.Object)">
            <summary>
            Invokes every hook installed for a given key.
            </summary>
            <param name="key">The key whose hooks are to be invoked.</param>
            <param name="instance">Carry to each hook.</param>
        </member>
        <member name="M:Starcounter.InvokableHook.Invoke(System.Object)">
            <summary>
            Invokes the current hook.
            </summary>
            <param name="triggeringObject">Reference to the instance
            representing the carry the hook receives.</param>
        </member>
        <member name="T:Starcounter.ConstraintViolationException">
            <summary>
            Exception thrown when a transaction is aborted because of a constraint violation (error
            code 8001, ScErrConstraintViolationAbort).
            </summary>
        </member>
        <member name="M:Starcounter.ConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.ConstraintViolationException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Starcounter.DbException">
            <summary>
            Exception thrown on when a database error is detected (4000 or 8000 series error codes).
            </summary>
            <remarks>
            On some errors a specialized exception inheriting <see cref="T:Starcounter.DbException"/> is
            raised.
            </remarks>
        </member>
        <member name="P:Starcounter.DbException.ErrorCode">
            <summary>
            Starcounter error code.
            </summary>
        </member>
        <member name="M:Starcounter.DbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Starcounter.DbException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Starcounter.Entity">
            <summary>
            Defines a common base class for Starcounter database
            classes, as an alternative to the [Database] attribute.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.Type">
            <summary>
            Gets or sets the dynamic type of the current entity.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.Quantity">
            <summary>
            Allows any single entity to represent a set of instances 
            (such as 2 cars or 3.5 litres of water)
            </summary>
        </member>
        <member name="M:Starcounter.Entity.Create">
            <summary>
            Creates a new entity whose dynamic type will be the
            current entity, i.e. instantiating the current entity
            (where the current entity is to be considered a type).
            </summary>
            <returns>A new entity whose dynamic type is the
            current entity.</returns>
        </member>
        <member name="M:Starcounter.Entity.Derive">
            <summary>
            Creates a new entity whose parent dynamic type
            will be the current entity, i.e. deriving the
            current entity (where the current entity is to
            be considered a type).
            </summary>
            <returns>A new entity whose base dynamic type is
            the current entity.</returns>
        </member>
        <member name="P:Starcounter.Entity.Name">
            <summary>
            Gets or sets the name of the current entity. The
            name is commonly used to name entities that are
            types, but can be used on entities that are not
            types too, giving them a logical name.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.TypeID">
            <summary>
            Gets the unique type ID of the current entity.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.ObjectNo">
            <summary>
            Gets the unique object number of the current
            entity.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.ObjectID">
            <summary>
            Gets the unique object number of the current
            entity, represented as a string.
            </summary>
        </member>
        <member name="M:Starcounter.Entity.Delete">
            <summary>
            Deletes the current entity.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.Item(System.String)">
            <summary>
            Gets or sets a property of the current entity.
            </summary>
            <param name="propertName">The name of the
            property to set.</param>
            <returns>The value of the named property.</returns>
        </member>
        <member name="P:Starcounter.Entity.TypeInherits">
            <summary>
            Gets or sets the parent dynamic type of the
            current entity.
            </summary>
            <seealso cref="M:Starcounter.Entity.Derive"/>
        </member>
        <member name="P:Starcounter.Entity.IsType">
            <summary>
            Gets or sets a value indicating if the current
            entity should be considered a dynamic type.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.IsEdge">
            <summary>
            Gets or sets a value indicating if the current
            entity is an edge.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.EdgeSubject">
            <summary>
            Gets or sets the subject of the current entity in
            a context where the current entity is to be
            considered a relation (edge).
            </summary>
        </member>
        <member name="P:Starcounter.Entity.EdgeObject">
            <summary>
            Gets or sets the object of the current entity in
            a context where the current entity is to be
            considered a relation (edge).
            </summary>
        </member>
        <member name="M:Starcounter.Entity.#ctor">
            <summary>
            Initialize a new <see cref="T:Starcounter.Entity"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Entity.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.OnDelete">
            <summary>
            Called on the current entity when it is being
            deleted.
            </summary>
        </member>
        <member name="M:Starcounter.Entity.Starcounter#Binding#IObjectProxy#Bind(System.UInt64,System.UInt64,Starcounter.Binding.TypeBinding)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#EqualsOrIsDerivedFrom(Starcounter.IObjectView)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetBinary(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetDateTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetDecimal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetSByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetSingle(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetUInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetUInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectView#GetUInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Entity.Starcounter#Advanced#IBindable#Identity">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Entity.Starcounter#Advanced#IBindable#Retriever">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Entity.Starcounter#Binding#IObjectProxy#ThisHandle">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Entity.Starcounter#IObjectView#TypeBinding">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Hosting.ApplicationBase">
            <summary>
            Represents a Starcounter application and defines its most
            rudimentary properties, as shared by all components and tools
            being part of application hosting.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.Name">
            <summary>
            Gets the logical name of the application.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.FilePath">
            <summary>
            Path to the application file that was used to invoke the
            starting of the current application.
            </summary>
            <remarks>
            In the simplest scenario, this path will be equal to 
            <c>BinaryFilePath</c>, but in a scenario where there is a
            transform between the input and the actual executable
            (e.g when the input is a source code file), this property
            will return the path of the source code file while the
            <c>BinaryFilePath</c> will return the path to the assembly
            compiled on the fly.
            </remarks>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.BinaryFilePath">
            <summary>
            Gets the path of the application binary file of the
            current application.
            </summary>
            <remarks>
            This path is not neccessary (and even most likely not)
            the path to the executable really loaded, since Starcounter
            will process application input in between it's being launched
            and when they actually become hosted, and hosting is
            normally done from a copy, running in another directory.
            </remarks>
        </member>
        <member name="P:Starcounter.Hosting.ApplicationBase.HostedFilePath">
            <summary>
            Gets the path from which the represented application
            actually runs (governed by the system).
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.WorkingDirectory">
            <summary>
            Gets the working directory of the application.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.ResourceDirectories">
            <summary>
            Gets the list of application resource directories.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.Arguments">
            <summary>
            Gets the arguments that are to be sent to a possible
            application entrypoint method.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.ApplicationBase.TransactEntrypoint">
            <summary>
            Gets or sets a value that, if set, instruct the code host to wrap
            the call to the entrypoint within a write transaction.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.ApplicationBase.#ctor(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Hosting.ApplicationBase"/>.
            </summary>
            <param name="name">The name of the application.</param>
            <param name="applicationFile">The application file, as given by the user.</param>
            <param name="applicationBinaryFile">The application binary.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="arguments">The arguments with which the application was started.</param>
        </member>
        <member name="M:Starcounter.Hosting.ApplicationBase.CreateFullName(System.String,System.String)">
            <summary>
            Creates the full name for a given application, hosted in a
            specified and named database.
            </summary>
            <param name="databaseName">The database/host the application runs in.
            </param>
            <param name="applicationName">The short name of the application.</param>
            <returns>The application full name.</returns>
        </member>
        <member name="M:Starcounter.Hosting.ApplicationBase.CreateDisplayName(System.String,System.String)">
            <summary>
            Creates the display name for a given application, hosted in a
            specified and named database.
            </summary>
            <param name="databaseName">The database/host the application runs in.
            </param>
            <param name="applicationName">The short name of the application.</param>
            <returns>The application display name.</returns>
        </member>
        <member name="T:Starcounter.Hosting.CodeHostExtensions">
            <summary>
            Provide hosting specific extensions to <see cref="T:Starcounter.ICodeHost"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.CodeHostExtensions.GetServiceContainer(Starcounter.ICodeHost)">
            <summary>
            Retreives the <see cref="T:Starcounter.Ioc.IServiceContainer"/> of the given host,
            allowing participants to register services.
            </summary>
            <param name="host">The code host whose container to retreive.</param>
            <returns>The service container.</returns>
        </member>
        <member name="T:Starcounter.Hosting.DefaultHost">
            <summary>
            The default code host (i.e the shared app code host).
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.DefaultHost.InstallCurrent">
            <summary>
            Create the singleton default host and assigns it.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.IApplicationHost">
            <summary>
            By implementing this interface on the same class that defines the
            application entrypoint, applications are given an opportunity to access
            code host services just prior to the invocation of the entrypoint.
            The callback is invoked in a context where the code host assure there
            is no other application are booting too (as opposed to the entrypoint,
            which can run in parallel of applications are started in an async
            fashion).
            </summary>
            <remarks>
            Since classes implementing this interface will be instantiated by the
            code host, we tag it [Transient] to assure that constraint.
            </remarks>
        </member>
        <member name="M:Starcounter.Hosting.IApplicationHost.HostApplication(Starcounter.Application)">
            <summary>
            Invoked by the code host when the given application are hosted but
            before it's entrypoint is invoked.
            </summary>
            <param name="application">The application that is being booted.
            </param>
        </member>
        <member name="T:Starcounter.Hosting.AssemblySpecification">
            <summary>
            Represents the interface to a assembly specification, as it is
            defined <a href="http://www.starcounter.com/internal/wiki/W3">
            here</a>.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.#ctor(System.Type,System.Type)">
            <summary>
            Allow instantiation only from factory method.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.AssemblySpecification.Name">
            <summary>
            Provides the assembly specification class name.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.AssemblySpecification.DatabaseClassIndexName">
            <summary>
            Provides the name of the database class index type.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.TypeNameToClassIndexName(System.String)">
            <summary>
            Converts the (full) name of a .NET type to the form used in
            the database class index when referencing it.
            </summary>
            <remarks>
            Even though .NET support naming fields with dots and plus signs,
            the C# language does not and we have the ambition to allow any
            assembly specification to be manually crafted in C# (primarily
            for the sake of testing).
            </remarks>
            <seealso cref="M:Starcounter.Hosting.AssemblySpecification.ClassIndexNameToTypeName(System.String)"/>
            <param name="reflectedName">The full name of the .NET type.</param>
            <returns>The name as used in the class index.</returns>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.ClassIndexNameToTypeName(System.String)">
            <summary>
            Converts a name of a database class from the form used in the
            database class index to it's .NET equivalent.
            </summary>
            <remarks>
            Even though .NET support naming fields with dots and plus signs,
            the C# language does not and we have the ambition to allow any
            assembly specification to be manually crafted in C# (primarily
            for the sake of testing).
            </remarks>
            <seealso cref="M:Starcounter.Hosting.AssemblySpecification.TypeNameToClassIndexName(System.String)"/>
            <param name="classIndexName">The name as used in the class index.
            </param>
            <returns>The full name of the .NET type.</returns>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.LoadFrom(System.Reflection.Assembly)">
            <summary>
            Loads the assembly specification from a given assembly.
            </summary>
            <param name="assembly">The assembly from which to load the
            assembly specification.</param>
            <returns>An instance representing the assembly specification
            found in the given assembly.</returns>
            <exception cref="T:Starcounter.Hosting.BackingException">
            A backing exception indicating an error occured when this
            method consumed the backing infrastructure, for example that
            an assembly specification was not found. The error code of
            the exception, along with any inner exceptions, will describe
            more precisely the problem.</exception>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.GetDatabaseClasses">
            <summary>
            Gets the database types in the database class index.
            </summary>
            <returns>An array that contains all the types indexed by
            the database class index.
            </returns>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.GetDatabaseTypeSpecifications">
            <summary>
            Gets all type specification types in the database class
            index.
            </summary>
            <returns>An array that contains all the types indexed by
            the database class index. Each returned type is a type
            specification.
            </returns>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.GetSpecificationOf(System.Type)">
            <summary>
            Gets a <see cref="T:Starcounter.Hosting.TypeSpecification"/> instance, providing
            access to the recorded metadata of the given database type.
            </summary>
            <param name="databaseClassType">The database type whose
            database specific metadata to provide access to.</param>
            <returns>A <see cref="T:Starcounter.Hosting.TypeSpecification"/> that can be used
            to consume database specific metadata about the given type.
            </returns>
            <example>
            var spec = GetSpecificationOf(typeof(Person));
            </example>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.GetSpecification(System.Type)">
            <summary>
            Gets a <see cref="T:Starcounter.Hosting.TypeSpecification"/> instance from the given
            type.
            </summary>
            <remarks>
            <para>
            Lookup is perfomed via the (cached) database class index, meaning
            that even if the given type represents a valid type specification,
            an exception can still be raised if it's not indexed.
            </para>
            </remarks>
            <param name="typeSpecificationType"></param>
            <returns></returns>
        </member>
        <member name="T:Starcounter.Hosting.BackingException">
            <summary>
            Represents a group of errors that can occur when backing constructs
            are being consumed by a host, as laid out 
            <a href="http://www.starcounter.com/internal/wiki/W3"> here</a>.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.DbStateRedirect.Target">
            <summary>
            The target we redirect every call to.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.HostManager">
            <summary>
            A class with a well-known static method that every database
            class expects to invoke once it's loaded in a host.
            <see cref="M:Starcounter.Hosting.HostManager.InitTypeSpecification(System.Type)"/>
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.HostManager.Host">
            <summary>
            The currently installed <see cref="T:Starcounter.Hosting.IBackingHost"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.HostManager.InitTypeSpecification(System.Type)">
            <summary>
            Every database type has the resposibility to report here as
            soon as it's loaded in a host. This is governed by the weaver,
            emitting a call here from the static constructor of each such
            type.
            </summary>
            <remarks>
            Internally forwards the call to the installed backing host,
            referenced by <see cref="F:Starcounter.Hosting.HostManager.Host"/>.
            </remarks>
            <param name="typeSpecification">The type of the type specification
            to initialize.</param>
        </member>
        <member name="T:Starcounter.Hosting.IBackingHost">
            <summary>
            Defines the interface of a host governing the runtime initialization
            of the backing infrastructure.
            </summary>
            <remarks>
            The primary use of an interface is that it allows us to create test
            doubles to test backing with fake data.
            </remarks>
        </member>
        <member name="M:Starcounter.Hosting.IBackingHost.InitializeTypeSpecification(System.Type)">
            <summary>
            Initialize the backing infrastructure type specification
            represented it's <see cref="T:System.Type"/>.
            </summary>
            <param name="typeSpec">The <see cref="T:System.Type"/> of the type
            specification to initialize.</param>
        </member>
        <member name="T:Starcounter.Hosting.TypeSpecification">
            <summary>
            Represents the interface to a database type specification, as
            defined <a href="http://www.starcounter.com/internal/wiki/W3">
            here</a>.
            </summary>
            <remarks>
            The current implementation is backed by reflection and static
            constructs. By having this functionality encapsulated by this
            class, we can swap the implementation later if we find a need
            to improve it.
            </remarks>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.Name">
            <summary>
            Provides the type specification class name.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.TableHandleName">
            <summary>
            Provides the name of the type specification table handle
            field.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.TypeBindingName">
            <summary>
            Provides the name of the type specification type binding
            field.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.ThisHandleName">
            <summary>
            Provides the name of the "this handle" field, part of
            the database class itself.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.ThisIdName">
            <summary>
            Provides the name of the "this identity" field, part of
            the database class itself.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.ThisBindingName">
            <summary>
            Provides the name of the "this binding" field, part of
            the database class itself.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.TypeSpecification.FieldNameWithoutAnyCompilerGeneratedNameAdditions(System.String)">
            <summary>
            Normalize the given field name, removing compiler generated field
            prefixing for any field under the influence of such.
            </summary>
            <param name="fieldName">Name of the actual field.</param>
            <returns>The normalized field name</returns>
        </member>
        <member name="M:Starcounter.Hosting.TypeSpecification.FieldNameToColumnHandleName(System.String)">
            <summary>
            Converts a field name to its corresponding column handle
            name.
            </summary>
            <param name="fieldName">The field name to convert.</param>
            <returns>A column handle name for the given field.</returns>
        </member>
        <member name="M:Starcounter.Hosting.TypeSpecification.ColumnHandleNameToFieldName(System.String)">
            <summary>
            Converts a field name to its corresponding column handle
            name.
            </summary>
            <param name="fieldName">The field name to convert.</param>
            <returns>A column handle name for the given field.</returns>
        </member>
        <member name="M:Starcounter.Hosting.TypeSpecification.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a <see cref="T:Starcounter.Hosting.TypeSpecification"/> with the
            given <paramref name="typeSpecType"/>.
            </summary>
            <param name="typeSpecType">The <see cref="T:System.Type"/> of the
            type specification the current instance represent.</param>
            <param name="omitVerifyType">Instruts this method not to
            verify the type-level construct. Used internally by emitted
            code, when it's certain that the construct is correct.</param>
        </member>
        <member name="P:Starcounter.Hosting.TypeSpecification.TableHandle">
            <summary>
            Gets or sets the underlying table handle.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.TypeSpecification.TypeBinding">
            <summary>
            Gets or sets the underlying type binding reference.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.TypeSpecification.SetColumnIndex(System.String,System.Int32)">
            <summary>
            Assigns the column index of a column with a specified name.
            </summary>
            <param name="columnName">The name of the column whos handle
            should be assigned.</param>
            <param name="index">The column index to assign the handle.
            </param>
        </member>
        <member name="T:Starcounter.ICodeHost">
            <summary>
            Represents the running code host.
            </summary>
        </member>
        <member name="P:Starcounter.ICodeHost.Services">
            <summary>
            Gets the services installed in the current code host;
            </summary>
        </member>
        <member name="M:Starcounter.ICodeHost.Run(System.Action)">
            <summary>
            Execute the code host, passing a pointer to the application
            main loop that are to be executed when the host implementation
            consider itself ready for service.
            </summary>
            <param name="applicationMainLoop">
            Application main lopp callback.
            </param>
        </member>
        <member name="M:Starcounter.ICodeHost.Start">
            <summary>
            Start the host in a non-blocking manner.
            </summary>
        </member>
        <member name="T:Starcounter.InheritsAttribute">
            <summary>
            Custom attribute that, when applied to a non-transient field or a property
            in a database class, instructs Starcounter to treat the tagged target as a
            reference to a base type (forming a hierarchy).
            </summary>
        </member>
        <member name="T:Starcounter.DatabaseAttribute">
            <summary>
            Custom attribute that, when applied to a class, indicates it
            is a database class.
            </summary>
            <remarks>
            This class will be moved to the Starcounter root namespace.
            It is here to start with, while working with removing the
            dependency on the weaver class, since it clashes with the
            class with the same name in Sc.Weaver.Schema.
            </remarks>
        </member>
        <member name="T:Starcounter.IEntity">
            <summary>
            Defines the interface of a database entity.
            </summary>
        </member>
        <member name="M:Starcounter.IEntity.OnDelete">
            <summary>
            Invoked on any database class when it is being deleted.
            By implementing this interface and this method, we can
            support manual, cascading deletes.
            </summary>
            <remarks>
            <para>
            The transaction is locked on the thread during the call to this
            method (as long as called from Delete that is). Implementation is
            not allowed to change the current transaction or modify the state
            of the current transaction (like committing or rolling back the
            transaction). If the state of the transaction is changed by another
            thread the delete operation will be aborted.
            </para>
            </remarks>
        </member>
        <member name="T:Starcounter.ITransactionConflictException">
            <summary>
            Interface that, when implemented by an <see cref="T:System.Exception"/> class,
            means that the exception may be solved by an automatic retry of the
            transaction.
            </summary>
        </member>
        <member name="T:Starcounter.Error">
            <summary>
            Class Error
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNSPECIFIED">
            <summary> 
            An unspecified error caused the operation to fail.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADARGUMENTS">
            <summary> 
            One or more arguments was invalid.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCODENOTENHANCED">
            <summary> 
            Code not enhanced.
            </summary>
            <remarks>
            Runtime error occuring when accessing code that needs to be enhanced in order to work, but for some reason hasn&#39;t,
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERROUTOFMEMORY">
            <summary> 
            Operation failed because needed memory couldn&#39;t be allocated.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTHREADNOTATTACHED">
            <summary> 
            The operation failed because the current thread wasn&#39;t attached to the scheduler.
            </summary>
            <remarks>
            This can either indicate that the thread is temporarily detached from the scheduler or that it isn&#39;t a worker thread. Only certain operations differs between the two.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTSUPPORTED">
            <summary> 
            The requested operation is not supported on the specific object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTAWORKERTHREAD">
            <summary> 
            The operation failed because the calling thread isn&#39;t a worker thread.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTHREADNOTDETACHED">
            <summary> 
            The operation failed because the current thread was attached to the scheduler and detached thread was expected.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTHREADYIELDBLOCKED">
            <summary> 
            The operation failed because it required the thread to yield but yield was blocked.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOUNTERMISMATCH">
            <summary> 
            Generic error code for counter mismatch.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOUNTEROVERFLOW">
            <summary> 
            Generic error code for counter overflow.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSTACKOVERFLOW">
            <summary> 
            A stack overflow has been detected.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWAITTIMEOUT">
            <summary> 
            The wait timed out before the object was signaled.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMAXTHREADSREACHED">
            <summary> 
            The operation failed because the maximum number of worker threads has been reached and the operation required the scheduler to create additional worker threads.
            </summary>
            <remarks>
            This error can occur when a large number of worker threads are blocked.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTCREATEUUID">
            <summary> 
            Failed to generate an UUID.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMUTEXNOTOWNED">
            <summary> 
            Operation failed because of an attempt to release ownership of a mutex not owned by the current thread.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWOULDBLOCK">
            <summary> 
            A non blocking operation failed because if would be required to block.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNRESPOSIVETHREADSTALL">
            <summary> 
            A cooperatively scheduled worker thread has been unresponsive for an unacceptably long period of time.
            </summary>
            <remarks>
            <para>A cooperatively scheduled worker thread is considered unresponsive when it hasn&#39;t yielded for more then a minute but this error isn&#39;t generated unless the thread has been unresponsive for a user configured period of time (2 minutes by default). If a thread is detected to be unresponsive but not long enough for the error to be generated, a warning is generated instead. </para>
            <para>The error is likely caused by an infinite loop or a deadlock but could also be caused by the thread doing something that doesn&#39;t give it the opportunity to yield for a very long period of time (which also is a real problem since the stall timeout is configured in minutes). </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTHREADSBLOCKEDSTALL">
            <summary> 
            All threads available to the scheduler has been blocked for an unacceptably long period of time.
            </summary>
            <remarks>
            The error is likely an indication of a deadlock or a highly contested lock held for a very long period of time.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTASKCLEANUPINCOMPLETE">
            <summary> 
            A task still held resource when terminating that should have been released before the task terminated.
            </summary>
            <remarks>
            Error currently only raised when exclusive environment ownership hasn&#39;t been released when task terminated. This should not occur.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRUNYIELDINGTHREADSTALL">
            <summary> 
            A cooperatively scheduled worker thread has been unwilling to yield for an unacceptably long period of time.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTHREADAUTODETACHED">
            <summary> 
            Use of reattach function for manually detached threads on auto detached thread.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTHREADNOTAUTODETACHED">
            <summary> 
            Use of reattach function for auto detached threads on manually detached thread.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDEBUGVERIFYFAILED">
            <summary> 
            Generic error code indicating that debug verification failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDOPERATION">
            <summary> 
            Operation invalid for the object&#39;s current state.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINPUTQUEUEFULL">
            <summary> 
            Operation failed because the target input queue was full.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTIMPLEMENTED">
            <summary> 
            The method, operation or feature is not implemented.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRENVVARIABLENOTACCESSIBLE">
            <summary> 
            Access to an environment variable was not permitted due to the current security settings.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBINDIRENVNOTFOUND">
            <summary> 
            The environment variable holding the path to the Starcounter installation directory was not found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADCOMMANDLINEFORMAT">
            <summary> 
            The format of the command-line was invalid.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADCOMMANDLINESYNTAX">
            <summary> 
            Command-line arguments didn&#39;t match the defined syntax.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADPOSTSHARPLICENSE">
            <summary> 
            The license key used to initialize the PostSharp library was invalid.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWRONGERRORMESSAGEFORMAT">
            <summary> 
            Parsing an error message string failed due to an incorrect message format.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPERATIONCANCELLED">
            <summary> 
            The operation was cancelled.
            </summary>
            <remarks>
            General error code representing a cancelled operation.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSHAREDINTERFACEOPENDBSHM">
            <summary> 
            Opening the managed segment with the segment_name failed. Invalid segment or does not exist.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFINDCHUNKS">
            <summary> 
            Could not find the chunks shared memory object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFINDSHAREDCHUNKPOOL">
            <summary> 
            Could not find the shared_chunk_pool shared memory object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFINDCOMMONSCHEDINTERFACE">
            <summary> 
            Could not find the common_scheduler_interface shared memory object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFINDSCHEDULERINTERFACES">
            <summary> 
            Could not find the scheduler_interfaces shared memory object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFINDCOMMONCLIENTINTERFACE">
            <summary> 
            Could not find the common_client_interface shared memory object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFINDCLIENTINTERFACES">
            <summary> 
            Could not find the client_interfaces shared memory object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFINDCHANNELS">
            <summary> 
            Could not find the channels shared memory object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPENSCHEDULERWORKEVENT">
            <summary> 
            Failed to open a scheduler work event.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPENCLIENTWORKEVENT">
            <summary> 
            Failed to open a client work event.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPENSCHEDNUMPOOLNOTEMPTYEV">
            <summary> 
            Failed to open a scheduler number pool not empty event.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPENSCHEDNUMPOOLNOTFULLEV">
            <summary> 
            Failed to open a scheduler number pool not full event.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFORMATACTIVEDBUPDATEDEVNAME">
            <summary> 
            Failed to format the active databases updated event name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONVERTACTIVEDBUPDATEDEVMBS">
            <summary> 
            Failed to convert active databases updated event name to multi-byte string.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPENACTIVEDBUPDATEDEV">
            <summary> 
            Failed to open the active databases updated event.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONITORERASEDATABASENAME">
            <summary> 
            The IPC monitor failed to erase a database name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBOOSTINTERPROCESSEXCEPTION">
            <summary> 
            The IPC monitor trying to open segment boost::interprocess::interprocess_exception caught.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRYOPENSEGMENTUNKNOWNEXCEPT">
            <summary> 
            The IPC monitor trying to open segment unknown exception caught.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRGOTCLIENTPROCESSTYPENOTDB">
            <summary> 
            The IPC monitor expected database process but got client process type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRGOTUNKNOWNPROCESSTYPENOTDB">
            <summary> 
            The IPC monitor expected database process but got unknown process type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPENPROCESSFAILEDREGDBPROC">
            <summary> 
            The IPC monitor is trying to register a database process but OpenProcess() failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONINSERTDBNAMEACTIVEDBR">
            <summary> 
            The IPC monitor failed to insert database name into active databases register.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONITORINSERTSEGMENTNAME">
            <summary> 
            The IPC monitor failed to insert segment name into the monitor interface.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONFAILEDNOTIFYSCHEDULER">
            <summary> 
            The IPC monitor failed to notify the scheduler on the given channel.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPENDBSHMSEGTONOTIFYCLIENTS">
            <summary> 
            The IPC monitor failed to open the database shared memory segment and is unable to notify the clients.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONOPENDBSHMSEGUNKNOWNEX">
            <summary> 
            The IPC monitor caught an unknown exception while trying to open database IPC shared memory segments.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONUNKNOWNPROESSTYPEEXIT">
            <summary> 
            The IPC monitor got an unknown proess type exit.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPENPROCESSFAILEDREGCLIPROC">
            <summary> 
            The IPC monitor is trying to register a client process but OpenProcess() failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTHEOWNERIDMATCHBUTNOTTHEPID">
            <summary> 
            The IPC monitor unregistration failed. The owner ID matches but not the PID.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTHEPIDMATCHBUTNOTTHEOWNERID">
            <summary> 
            The IPC monitor unregistration failed. The PID matches but not the owner ID.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCLEANUPTOOPENTHEDBIPCSHMSEG">
            <summary> 
            The IPC monitor cleanup failed. Could not open the IPC database shared memory segment.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONITORCLEANUPWAITFAILED">
            <summary> 
            The IPC monitor was not notified. Wait failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROUTOFDEDICATEDADDRESSSPACE">
            <summary> 
            Operation failed because needed memory couldn&#39;t be allocated within dedicated address space
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMEMORYLIMITREACHED">
            <summary> 
            Operation failed because limit reached on limited memory resource.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNHANDLEDEXCEPTION">
            <summary> 
            An unhandled exception was detected.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDINTERNALERROR">
            <summary> 
            An unexpected internal error was detected.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTESTASSERTIONFAILURE">
            <summary> 
            Assertion used in a test application failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPERATIONPENDING">
            <summary> 
            Operation completion pending.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPALREADYSTARTED">
            <summary> 
            A Starcounter process with the specified name is already started.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADBASEDIRECTORYCONFIG">
            <summary> 
            Base directory (baseDirectory) missing from config or invalid.
            </summary>
            <remarks>
            Applies if the specified directory doesn&#39;t exists or is invalid (for example if the specified path indicates a file), or if a base directory isn&#39;t specified when one is required.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADTEMPDIRECTORYCONFIG">
            <summary> 
            Temp directory (tempDirectory) missing from config or invalid.
            </summary>
            <remarks>
            Applies if the specified directory doesn&#39;t exists or is invalid (for example if the specified path indicates a file).
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADIMAGEDIRECTORYCONFIG">
            <summary> 
            Image directory (imageDirectory) missing from config or invalid.
            </summary>
            <remarks>
            Applies if the specified directory doesn&#39;t exists or is invalid (for example if the specified path indicates a file), or if a image directory isn&#39;t specified when one is required.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADTLOGDIRECTORYCONFIG">
            <summary> 
            The transaction log directory (transactionLogDirectory) is missing from config or invalid.
            </summary>
            <remarks>
            Applies if the specified directory doesn&#39;t exists or is invalid (for example if the specified path indicates a file), or if a transaction log directory isn&#39;t specified when one is required.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTINITIALIZECLR">
            <summary> 
            Unable to initialize the CLR.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTLOADHOSTENVIRONMENT">
            <summary> 
            Unable to load host environment.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRLOGMODULENOTFOUND">
            <summary> 
            The operation failed because sccorelog.dll or one of the functions it exports couldn&#39;t be loaded.
            </summary>
            <remarks>
            Most likely caused by a faulty installation.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRIMAGESTORAGEMISMATCH">
            <summary> 
            The properties of the different disk drives used to store the image files don&#39;t have compatible configuration (do they have the same sector sizes?).
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIMAGESTORAGEINCOMPATIBLE">
            <summary> 
            The properties of the disk drive doesn&#39;t match the database image (is the disk drive is configured for a different sector size than the image is built for?).
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWRONGDATABASEVERSION">
            <summary> 
            The database files are build for a different Starcounter version and are not compatible with the current version.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTGETPRIVILEGESNEEDED">
            <summary> 
            Could not acquire the privileges needed for the operation to complete successfully.
            </summary>
            <remarks>
            This error code is obsolete in current version.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASEFILEMISMATCH">
            <summary> 
            Attempt to load database files from different databases was detected.
            </summary>
            <remarks>
            This means that one of the image files, the transaction log or all three files were created for different databases.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASELANGUNSUPPORTED">
            <summary> 
            One or more of the languages the database is configured for isn&#39;t supported by the current system.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCODELOADERERROR">
            <summary> 
            Code loder error.
            </summary>
            <remarks>
            General error produced by the code loader component. This error indicates that an operation during startup requiered some code to be accessed via the .NET reflection engine and that the loader cound not satisfy the request because of an error fetching the needed data. This usually indicates version mismatches or missing pe-files in the runtime library. The error lines up with one (or several) more specific errors. The later contains more detailed information about what specific code that couldnt load and can be found in the error log. This error ends up in the critical log (causing the database to fail startup). A corresponding and more specific error at the same time is written to the error log, describing what assembly failed and how to get even more error information.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTYPESLOADERROR">
            <summary> 
            Error inspecting assembly.
            </summary>
            <remarks>
            <para>The code loader requested to iterate types in a given (loaded) assembly, but this operation resulted in an error. This usually indicates some kind of reference error where one assembly or module references (direct or indirect) a type that was implied for the former to load properly. Results in a code loader error in the critical error log. See about this above. In companion with this error, Starcounter writes out what assembly failed to load. This might be enough for the developer, but if it isn&#39;t, even more information is availible. To get this additional and extended error information, the error in the error log comes equipped with a reference number (in the form of a GUID). This reference number can be used to find the information lining up with the given exception. To search for this information by reference, consult the Starcounter.Notice log. In the complementary log the following can be found: </para>
            <para>- Number of types declared in the failing assembly, and how many of these that wheren&#39;t possible to load. </para>
            <para>- Which of the above types that was possible to load (and from that, it should be clear which ones could not) </para>
            <para>- The full set of assemblies currently loaded into the database. </para>
            <para>- Exception messages (including file name of the target) for each type in the faulty assembly, indicating the broken link. </para>
            <para>- Fusion log for each exception message above. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRWEAVINGERROR">
            <summary> 
            At least one error has been detected during weaving of the application code.
            </summary>
            <remarks>
            All specific weaver related errors use this general weaving error as an umbrella to communicate their existence to the user. That is, this general weaving error will be found in the critical logging branch of errors and all specific errors will be found in the extended error logging system (the error log). When this error is found in the critical error log, consult the error log for a corresponding ScErrWeavingFailed error. That error will head a list of more specific errors that are the real source for this error.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDSERVERNAME">
            <summary> 
            The server name is too long (max 31 chars) or contains invalid characters.
            </summary>
            <remarks>
            Indicates that the specified server name is to long (a server name is currently limited to 31 characters) or contains invalid characters.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSHUTDOWNTIMEDOUT">
            <summary> 
            Shutdown timed out: Stuck in user code.
            </summary>
            <remarks>
            The shutdown thread got stuck in user code and was aborted.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADSCHEDCOUNTCONFIG">
            <summary> 
            Too many virtual CPUs configured.
            </summary>
            <remarks>
            Indicates that the configured number of virtual CPUs wasn&#39;t supported. Currently no more than 4 virtual CPUs is supported in the x64 version and no more then a 1 virtual CPU is supported in the x86 version.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRWRONGTLOGVERSION">
            <summary> 
            Wrong transaction log version.
            </summary>
            <remarks>
            The transaction log file is versioned and must match the version of the loading transaction logging runtime library when the database is started. If versions differ, this error will be in the error log and the database will fail to load.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADREBUILDCONFIG">
            <summary> 
            Bad unload/reload configuration.
            </summary>
            <remarks>
            <para>Configuration given for either an unload operation or a reload counterpart violated some constraint. What type of operation (unload/reload) the error originated from will be indicated by the context, a parachute error for respective routine. </para>
            <para>In current version, all configuration is done internally so this error should not occur. In previous versions it could occur because of bad settings in configuration for unload/reload. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADTLOGSIZECONFIG">
            <summary> 
            The specified transaction log size is either smaller then the minimum size, larger then the maximum size or not aligned with the disk sector size.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADDISKSECTORSIZECONFIG">
            <summary> 
            The specified disk sector size is not compatible with storage.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSHRINKIMAGENOTSUPPORTED">
            <summary> 
            The specified new image size is smaller then the current image size. Making the image smaller is not allowed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADIMAGESIZECONFIG">
            <summary> 
            The specified image size is either smaller then the minimum size, larger then the maximum size or not aligned with the database block size.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASEALREADYEXISTS">
            <summary> 
            A database with the specified name already exists.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMODULENOTFOUND">
            <summary> 
            The operation failed because an expected DLL module couldn&#39;t be loaded.
            </summary>
            <remarks>
            Most likely caused by a faulty installation.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRPARSINGAPPARGS">
            <summary> 
            When parsing the application arguments to scdbs.exe, the system routine parsing it reported an error.
            </summary>
            <remarks>
            Consult the system error code to find out more about what failed.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTOOFEWAPPARGS">
            <summary> 
            The number of arguments passed to scdbs.exe did not include all arguments required.
            </summary>
            <remarks>
            Consult the documentation to see what arguments Starcounter encforces, accepts and what constraints apply.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPARGSSEMANTICVIOLATION">
            <summary> 
            All arguments passed to scdbs.exe did not confirm to the constraints, or some of them were found incompatible.
            </summary>
            <remarks>
            Consult the documentation to see what arguments Starcounter encforces, accepts and what constraints apply.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRUNLOADEMPTYDATABASE">
            <summary> 
            The -unload directive specified as a server application argument can not be used when the database is empty and not initialized.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRRLDPOPULATEDDATABASE">
            <summary> 
            The -reload directive specified as a server application argument can not be used when the database is allready populated.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFUNCEXPORTNOTFOUND">
            <summary> 
            The operation failed because an expected function export from a module dependent upon was not found.
            </summary>
            <remarks>
            Most likely caused by a faulty installation.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADBACKUPDIRECTORYCONFIG">
            <summary> 
            Bad backup directory config. Either the configured directory does not exist or the directory path is to long.
            </summary>
            <remarks>
            Backup directory is currently the same as output directory.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADLOGDIRECTORYCONFIG">
            <summary> 
            Bad log directory config. Either the configuration does not exist or the configured directory isn&#39;t valid.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOMPAREEMPTYDATABASE">
            <summary> 
            The server was started, instructed to execute a compare of application and core schemas, and when the database was examined, the server detected it to not being bound to any previous application, i.e. containing no schema.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTLOGNOTINITIALIZED">
            <summary> 
            An operation failed due to the transaction/redo log not being initialized.
            </summary>
            <remarks>
            The transaction/redo log is considered uninitialized after it has been created and before it has successfully been started at least once.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRACQUIREDBCONTROLTIMEOUT">
            <summary> 
            Attempt to acquire control of the database environment timed out.
            </summary>
            <remarks>
            <para>Error occurs if unable to acquire the shared object used to control ownership of the database environment on startup. </para>
            <para>Could indicate that the memory manager is unresponsive (scdata.exe). Try again after terminating this process. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCREATEACTMONBUFTIMEOUT">
            <summary> 
            Attempt to create activity monitor shared buffer timed out.
            </summary>
            <remarks>
            <para>Error occurs if unable create activity monitor shared buffer timed out. </para>
            <para>Could indicate that the activity monitor is unresponsive (scactmon.exe) and has therefore not released the buffer. Try again after terminating the process. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDBSTATEACCESSDENIED">
            <summary> 
            Allocating shared memory for database state failed. Access was denied.
            </summary>
            <remarks>
            <para>Check so that the user that runs the database or server has the priviledge to create/open globally named objects, &quot;SeCreateGlobalPrivilege&quot;. </para>
            <para>Corresponds to windows error ERROR_ACCESS_DENIED. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADIMAGEFILECKSUMLOAD">
            <summary> 
            Checksum mismatch detected in image file when image file was loaded into memory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCLIENTBACKENDALREADYLOADED">
            <summary> 
            Client application communication library was already loaded.
            </summary>
            <remarks>
            When the client runtime was trying to load the library that communicates with Starcounter databases, a library with the same name (&quot;sccoredb&quot;) was found already loaded.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCLIENTBACKENDNOTLOADED">
            <summary> 
            Client application communication library failed to load.
            </summary>
            <remarks>
            When the client runtime was trying to load the library that communicates with Starcounter databases, the library was not found loaded after initialization.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCLIENTBACKENDWRONGPATH">
            <summary> 
            Client application communication library was loaded from the wrong path.
            </summary>
            <remarks>
            When the client runtime was trying to load the library that communicates with Starcounter databases, the library was found loaded from the wrong path.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSTARTSHAREDMEMORYMONITOR">
            <summary> 
            Problems starting shared memory monitor process.
            </summary>
            <remarks>
            Shared memory monitor process is started by each Starcounter server and is used to correctly free clients&#39; shared memory resources.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRWEAVERPROJECTFILENOTFOUND">
            <summary> 
            A project file the weaver engine depends on could not be found. Either it was deleted or the program hosting the weaver did not resolve its path to the correct installation directory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONSTRUCTDBSHMPARAMNAME">
            <summary> 
            The database intends to open the database shared memory parameters, but failed when trying to concatenate the database name prefix with the database name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBDATADIRPATHINVALIDMBCHAR">
            <summary> 
            The database intends to open the shared memory object with the database shared memory parameters, but failed because of an illegal char in the db_data_dir_path in the psetup parameter.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBSHMPARAMNAMEINVALIDWCHAR">
            <summary> 
            The database intends to open the shared memory object with the database shared memory parameters, but failed because a wide character that cannot be converted into a multibyte character was encountered.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONSTRUCTSEGMENTNAMESEQNO">
            <summary> 
            Failed to construct the segment name with sequence number.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSEGMENTNAMEINVALIDWCHAR">
            <summary> 
            The database intends to get the sequence number and append it to the segment name, but failed because a wide character that cannot be converted into a multibyte character was encountered.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONSTRMONITORINTERFACENAME">
            <summary> 
            The database intends to register with the monitor, but it failed because constructing the monitor interface name would result in buffer overflow.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBMAPMONITORINTERFACEINSHM">
            <summary> 
            The database intends to register with the monitor, but failed to map the monitor interface in shared memory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBACQUIREOWNERID">
            <summary> 
            The database tried to register with the monitor, but failed to acquire an owner ID.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCCONSTRUCTDBSHMPARAMNAME">
            <summary> 
            The client intends to open the database shared memory parameters, but failed when trying to concatenate the database name prefix with the database name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCCONSTRMONITORINTERFACENAME">
            <summary> 
            The client intends to register with the monitor, but failed because constructing the monitor interface name would result in buffer overflow.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCACQUIREOWNERID">
            <summary> 
            The client tried to register with the monitor, but failed to acquire an owner ID.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCLIENTOPENDBSHMSEGMENT">
            <summary> 
            The client intends to open the database shared memory segment, but failed because it is not initialized yet.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCCONSTRDBSHMSEGMENTNAME">
            <summary> 
            The client intends to open the database shared memory segment, but failed because constructing the name of the database shared memory segment would result in buffer overflow.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCLIENTACQUIRECLIENTNUMBER">
            <summary> 
            The client failed to initialize because it could not acquire a client number.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNKNOWNEXCEPTTHROWNINSETUP">
            <summary> 
            An unknown exception was thrown by the database when trying something in the call to setup during the initialization phase.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBOPENMONITORINTERFACE">
            <summary> 
            The database intends to register with the monitor, but it failed to open the monitor interface.
            </summary>
            <remarks>
            If there is no monitor (scipcmonitor.exe) running in the same terminal server session as the database process, this is likely the cause of the error. If the database is to be started in session 0, it may help to start the Starcounter System Server service. If the database is to be started in session 1, it may help to start the Starcounter Administrator.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDBCREATEDBSHMPARAMETERS">
            <summary> 
            The database failed to create the database shared memory parameters file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCREATEDBSHMPARAMETERS">
            <summary> 
            Failed to create the database shared memory parameters file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPENDBSHMPARAMETERS">
            <summary> 
            Failed to open the database shared memory parameters file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMAPDBSHMPARAMETERSINSHM">
            <summary> 
            Failed to map the database shared memory parameters in shared memory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROPENMONITORINTERFACE">
            <summary> 
            Failed to open monitor interface.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMAPMONITORINTERFACEINSHM">
            <summary> 
            Failed to map monitor interface in shared memory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBMAPDBSHMPARAMETERSINSHM">
            <summary> 
            The database failed to map the database shared memory parameters in shared memory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOPENDBSHMPARAMETERS">
            <summary> 
            The client failed to open the database shared memory parameters file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCMAPDBSHMPARAMETERSINSHM">
            <summary> 
            The client failed to map the database shared memory parameters in shared memory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBOPENDEBUGFILE">
            <summary> 
            The database failed to open the debug file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBRELEASEOWNERID">
            <summary> 
            The database tried to unregister with the monitor, but failed to release its owner ID.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCRELEASEOWNERID">
            <summary> 
            The client tried to unregister with the monitor, but failed to release its owner ID.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBACQUIREOWNERIDTIMEOUT">
            <summary> 
            The database tried to register with the monitor, but failed to acquire an owner ID because a timeout occurred.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCACQUIREOWNERIDTIMEOUT">
            <summary> 
            The client tried to register with the monitor, but failed to acquire an owner ID because a timeout occurred.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBRELEASEOWNERIDTIMEOUT">
            <summary> 
            The database tried to unregister with the monitor, but failed to release its owner ID because a timeout occurred.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCRELEASEOWNERIDTIMEOUT">
            <summary> 
            The client tried to unregister with the monitor, but failed to release its owner ID because a timeout occurred.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADSCHEDIDSUPPLIED">
            <summary> 
            Trying to queue a job on scheduler with incorrect id.
            </summary>
            <remarks>
            You can queue a job on scheduler with id from 0 to n-1, where n is a number of logical processors in the system.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCACQUIREOWNERIDTIMEOUT2">
            <summary> 
            The client tried to register with the monitor, but failed to acquire an owner ID because a timeout occurred.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBALREADYSTARTED">
            <summary> 
            A Starcounter database with the specified name is already started.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADDATABASECONFIG">
            <summary> 
            Invalid configuration prevents the database from being accessible.
            </summary>
            <remarks>
            Generic error indicating that the configuration of a database is invalid preventing the database from being accessible.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSTARTNETWORKGATEWAY">
            <summary> 
            Problems starting network gateway process.
            </summary>
            <remarks>
            Network gateway process is started by each Starcounter server and is used to provide communication for Starcounter with outside world.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADCHUNKSNUMBERCONFIG">
            <summary> 
            Shared memory chunks number is missing in database configuration file or has invalid value.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTLOGSTORAGEINCOMPATIBLE">
            <summary> 
            The properties of the disk drive doesn&#39;t match the transaction log (is the disk drive is configured for a different sector size than the transaction log is built for?).
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADSERVICECONFIG">
            <summary> 
            Service configuration is invalid.
            </summary>
            <remarks>
            The service configuration file doesn&#39;t exist, isn&#39;t accessible or isn&#39;t formatted correctly.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRKILLEDBYPROCESSMANAGER">
            <summary> 
            Process was killed by process manager.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADSERVERCONFIG">
            <summary> 
            Server configuration is invalid.
            </summary>
            <remarks>
            The server configuration file doesn&#39;t exist, isn&#39;t accessible or isn&#39;t formatted correctly.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDGLOBALSEGMENTSHMOBJ">
            <summary> 
            Invalid Global Segment Shared Memory Object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSERVERINITUNKNOWNEXCEPTION">
            <summary> 
            Unknown exception thrown during initialization of server.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSERVERPORTINITINVALIDSHMOBJ">
            <summary> 
            Server port initialization failed, invalid shared memory object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSERVERPORTINITINVALIDMAPREG">
            <summary> 
            Server port initialization failed, invalid mapped region.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSERVERPORTUNKNOWNEXCEPTION">
            <summary> 
            Server port initialization failed, unknown exception caught.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTCREATEIPCMONITORDIR">
            <summary> 
            IPC monitor failed to create IPC monitor directory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONITORREQUIREDARGUMENTS">
            <summary> 
            IPC monitor failed to start, required arguments are missing.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFORMATIPCMONITORCLEANUPEV">
            <summary> 
            IPC monitor failed to format the ipc_monitor_cleanup_event_name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONVERTIPCMONCLEANUPEVMBS">
            <summary> 
            IPC monitor failed to convert the IPC monitor cleanup event name to multi-byte string.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCREATEIPCMONITORCLEANUPEV">
            <summary> 
            IPC monitor failed to create the IPC monitor cleanup event.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMFORMATACTIVEDBUPDATEDEV">
            <summary> 
            IPC monitor failed to format the active databases updated event name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMCONVACTIVEDBUPDATEDEVMB">
            <summary> 
            IPC monitor failed to convert active databases updated event name to multi-byte string.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCREATEACTIVEDBUPDATEDEV">
            <summary> 
            IPC monitor failed to failed to create the active databases updated event.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDIPCMONINTERFACSHMOBJ">
            <summary> 
            IPC monitor invalid monitor_interface shared memory object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDIPCMONINTERFACMAPREG">
            <summary> 
            IPC monitor invalid monitor_interface mapped_region.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONITOROPENPROCESSTOKEN">
            <summary> 
            IPC monitor OpenProcessToken() failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONLOOKUPPRIVILEGEVALUE">
            <summary> 
            IPC monitor LookupPrivilegeValue() failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONADJUSTTOKENPRIVILEGES">
            <summary> 
            IPC monitor AdjustTokenPrivileges() failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONSETSEDEBUGPRIVILEGE">
            <summary> 
            IPC monitor failed to set SeDebugPrivilege.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONITORCREATEACTIVEDBDIR">
            <summary> 
            IPC monitor can&#39;t create monitor active databases directory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONITORDELACTIVEDBFILE">
            <summary> 
            IPC monitor can&#39;t delete monitor active databases file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBOOSTIPCEXECPTION">
            <summary> 
            Boost interprocess exception thrown in client_port.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCLIENTPORTUNKNOWNEXCEPTION">
            <summary> 
            Unknown exception thrown in client_port.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONITORUNKNOWNEXCEPTION">
            <summary> 
            Unknown exception thrown in IPC monitor.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWEAVERFAILEDLOADFILE">
            <summary> 
            The weaver failed to load a binary user code file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSCSERVICEISALREADYRUNNING">
            <summary> 
            An instance of scservice is already running in the same session.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSCSERVICEFAILEDCREATELCK">
            <summary> 
            scservice tried to create a mutex named scservice_is_running_lock but CreateMutex() returned NULL.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWEAVERFAILEDSTRONGNAMEASM">
            <summary> 
            A locally deployed strong-named assembly was detected.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADGATEWAYWORKERSNUMBERCONFIG">
            <summary> 
            Gateway workers number is missing in configuration file or has invalid value.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADSESSIONSDEFAULTTIMEOUT">
            <summary> 
            Sessions default timeout is missing in configuration file or has invalid value.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADAPPLICATIONNAME">
            <summary> 
            Application name can only contain letters, numbers and underscores.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWEAVERFAILEDRESOLVEREFERENCE">
            <summary> 
            The weaver failed to resolve a reference to an assembly.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADINTERNALSYSTEMPORT">
            <summary> 
            Internal system port is missing in configuration file or has invalid value.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTBINDAPPWITHPRIVATEDATA">
            <summary> 
            The application can not start because it contains at least one database class with private data. See separate errors with ID &quot;ScErrNonPublicFieldNotExposed&quot;.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVOKEAPPLICATIONHOST">
            <summary> 
            Failed to create/invoke the application host. See IApplicationHost documentation on its constraints.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPLICATIONALREADYHOSTED">
            <summary> 
            Unable to start the application host because the host is already running.
            </summary>
            <remarks>
            This error usually indicate an app tries to start a host when the app is is either already running in the shared host, or has already started the host previously.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDHANDLE">
            <summary> 
            The specified handle is invalid.
            </summary>
            <remarks>
            Usually implies that the object referenced by the handle has been freed.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRNOUSERADAPTERREFERENCES">
            <summary> 
            Attempt to release a user reference to an adapter failed because no user references was registered.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADCHANNELOPTIONVALUE">
            <summary> 
            Operation to set an option failed because the value of an option couldn&#39;t be set to the specified value.
            </summary>
            <remarks>
            Error is raised when configuring a channel. This is usually done using values from named port configuration (I/O handler configuration) but if so, configuration should already have been validated and this error should not occur.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTLOCKMEMORY">
            <summary> 
            The operation couldn&#39;t be completed because memory couldn&#39;t be locked.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCHANNELCLOSED">
            <summary> 
            Operation couldn&#39;t be completed because the channel has been closed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCHANNELREADING">
            <summary> 
            Operation failed because an read has been posted and pending completion.
            </summary>
            <remarks>
            A new read operation can not be posted and certain options can not be set until the operation has completed.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCONNECTTIMEDOUT">
            <summary> 
            Connection timed out because the remote party didn&#39;t respond within an acceptable abount of time.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONNECTIONREFUSED">
            <summary> 
            A connection to a remote endpoint could not be established because the target system actively refused it.
            </summary>
            <remarks>
            This is usually the result when communication could be established with the remote system but the current system wasn&#39;t excepted as a client. An example is when trying to connect to a specific port and address and the addressed system was found but no one was accepting connection requests on that port.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRENDPOINTINVALID">
            <summary> 
            Tried to bind to an invalid endpoint
            </summary>
            <remarks>
            Operation failed because the channel couldn&#39;t be bound to the specified end point since it wasn&#39;t a valid end point.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRENDPOINTOCCUPIED">
            <summary> 
            The endpoint is occupied
            </summary>
            <remarks>
            Operation failed because the a channel couldn&#39;t be bound to the specified end point since it already was occupied.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRENDPOINTUNREACHABLE">
            <summary> 
            The endpoint couldn&#39;t be reached.
            </summary>
            <remarks>
            A connection couldn&#39;t be established because the specified end point couldn&#39;t be reached. When this error occurs it&#39;s probably because the current machine isn&#39;t connected to a network or only connected to a local network.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRLISTENERCLOSED">
            <summary> 
            Operation couldn&#39;t be completed because the listener has been closed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRREADBUFFEREXCEEDED">
            <summary> 
            Channel read operation failed because the message received was larger than allowed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTOMANYADAPTERREFERENCES">
            <summary> 
            Operation could not be completed because there the limit of references to the accessed I/O adapter has been reached.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNWRITABLEMESSAGE">
            <summary> 
            Operation couldn&#39;t be completed because the contents of the message couldn&#39;t be sent through a channel.
            </summary>
            <remarks>
            This error occurs when trying to write a message containing 0 value bytes when 0 bytes is used as message terminator.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRLOGSCONNECTIONCLOSED">
            <summary> 
            Connection to log server closed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNKNOWNCHANNELOPTION">
            <summary> 
            Operation failed because no option with the specified name was availible.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNREADABLEMESSAGE">
            <summary> 
            Received a malformed message
            </summary>
            <remarks>
            Operation couldn&#39;t be completed because the contents of a message being read from by a channel couldn&#39;t be interpreted by the channel. Indicates that a message of an invalid format was passed to the process. The channel is closed when this error is detected since the input stream must be considered corrupted.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERROBJECTNOTOWNED">
            <summary> 
            An operation failed because the object that only allows access by the owning thread wasn&#39;t owned by the current thread.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTCREATEPROCESSSHARE">
            <summary> 
            The memory file used to share server information already existed and the process could therefore not claim ownership of the object.
            </summary>
            <remarks>
            Another process holds the memory file open. Could be a conflict with a client application reading server statistics although if the client application is properly implemented this is highly unlikely. In this case the issues should be resolved by trying again to start the server.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTOPENPROCESSSHARE">
            <summary> 
            The memory file used to share server information could not be opened. Most likely an indication that the server with the specified name isn&#39;t online.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTCREATEADAPTER">
            <summary> 
            Operation could not complete because of failure to create an I/O adapter. Occurs when the maximum number of I/O adapters has been reached.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTENOUGHDISKSPACE">
            <summary> 
            Operation failed due to insufficient disk space.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADPROCESSSHAREVERSION">
            <summary> 
            The memory file used to share server information was of an incompatible version.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCTIMEOUTPUSHREQUESTMESSAGE">
            <summary> 
            A timeout occurred because the client could not push a request message to the channels in queue, because it is full. The database have not popped any request message from the channel within the timeout period.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCTIMEOUTPOPRESPONSEMESSAGE">
            <summary> 
            A timeout occurred because the client could not pop a response message from the channels out queue, because it is empty. The database have not pushed any response message to the channel within the timeout period.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASEISNOTLOADED">
            <summary> 
            Database connect failed because the database was not loaded.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRACQUIRELINKEDCHUNKS">
            <summary> 
            Not enough free shared memory. Enough memory chunks could not be acquired to hold the whole message.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINCORRECTNETWORKPROTOCOLUSAGE">
            <summary> 
            Current network protocol is not used correctly. Please consult documentation for more details.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTPUSHTOCHANNEL">
            <summary> 
            Channel is full, can&#39;t push.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSTRINGHEAPOUTOFSPACE">
            <summary> 
            No more space in string heap.
            </summary>
            <remarks>
            String heap is used to store type and field names in the kernel. The maximum string heap size if fixed so the only way to resolve this is reduce the number of types and fields store in the database.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTRANSACTIONATTACHED">
            <summary> 
            Operation must be performed in the context of a valid transaction
            </summary>
            <remarks>
            Operation failed because no transaction was attached to the thread when the operation only could be executed within the context of a transaction (this applies to most database operations). Note that this error can occur even if the transaction isn&#39;t activly detached from the running thread, should another thread force-claim the ownership of the transaction (by for example committing or rolling back the transaction).
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTANEXTENSIONOFTYPE">
            <summary> 
            The specified extension is not an extension of the specific type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTCREATESCHEMA">
            <summary> 
            Unable to create database schema
            </summary>
            <remarks>
            Indicates that schema creation failed. The reason why schema creation failed is logged before the error is raised.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTPROPERRELATIONATTR">
            <summary> 
            Indicates that an relation property wasn&#39;t properly declared.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNSUPPORTEDATTRIBUTETYPE">
            <summary> 
            The data type is not supported. The data type of a field or property in an Entity class is not supported by the database.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTOMANYATTRIBUTES">
            <summary> 
            A type had to many attributes.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDELETEPENDING">
            <summary> 
            The operation failed because a delete is pending (issued but not finalized).
            </summary>
            <remarks>
            If this error occurs it indicates a bug in the managed binding.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERROBJECTNOTATYPE">
            <summary> 
            Instantiation of a object failed because the object wasn&#39;t a registered type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRREADONLYDATABASE">
            <summary> 
            The database is read-only.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTRANSREFTORELEASE">
            <summary> 
            An attempt to release an reference that wasn&#39;t registered was intercepted.
            </summary>
            <remarks>
            Probably indicates that the reference counter is out of sync.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTOMANYTRANSACTIONREFS">
            <summary> 
            Too many references registered by the transaction.
            </summary>
            <remarks>
            Only a limited number of references can be registered (the reference counter is a 16-bit integer).
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERROBJECTILLEGALDURABILITY">
            <summary> 
            A change in the durability of an object was requested, but the object was in a state where the durability couldn&#39;t be changed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTOPENIMAGEFILE">
            <summary> 
            One of database the image files of the database could not be opened.
            </summary>
            <remarks>
            The most likely case of this error is that the image file does not exists in the configured director or is locked by another process. The reason for why the image file couldn&#39;t be opened is logged seperatly.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTREADIMAGEFILE">
            <summary> 
            An error occured when attempting to read from an image file.
            </summary>
            <remarks>
            The reason for the failure is logged seperatly.&quot;
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTWRITEIMAGEFILE">
            <summary> 
            An error occured when attempting to write to an image file.
            </summary>
            <remarks>
            The reason for the failure is logged seperatly.&quot;
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONLOCKEDONTHREAD">
            <summary> 
            Can&#39;t modify the state of the transaction.
            </summary>
            <remarks>
            Transaction failed because the current transaction was locked on the thread. This error occures if trying to change the current transaction of modify the state of the current transaction in a context where this isn&#39;t allowed (for example when executing a trigger).
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTPROPERCOMMITHOOKTYPE">
            <summary> 
            The commit hook type is properly declared (doesn&#39;t adhere to the constraints of commit hook types).
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRERRORINHOOKCALLBACK">
            <summary> 
            The operation failed because an error was detected in a hook callback function.
            </summary>
            <remarks>
            This error code is for example set when there is an error in a commit hook which in turn causes the commit to fail.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRITERATORNOTOWNED">
            <summary> 
            A cursor operation failed because the cursor wasn&#39;t owned by the current thread and transaction.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRPLUGINCODEVIOLATION">
            <summary> 
            A violation in plugin code was detected.
            </summary>
            <remarks>
            This could either be a declarative violation or one what was caused during runtime due to a callback function that let an exception slip loose. Individual codes for plugin violations are logged separatly; this is the common error that is propagated to user code.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRPLUGINMISSINGDEFAULTCTOR">
            <summary> 
            A plugin type lacks a default constructor.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRPLUGININVOCATIONEXCEPTION">
            <summary> 
            An exception was not handled by a plugin callback or a plugin constructor.
            </summary>
            <remarks>
            Note that errors occuring due to the runtime (code access for ex) should be treated separatly if possible.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDHOOKTARGET">
            <summary> 
            The target declared foor a commit hooks is not valid hook.
            </summary>
            <remarks>
            Hooks that implements custom filtering of targets must obey the constraints of targets as specified by the hooking documentation.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONALREADYBOUND">
            <summary> 
            The transaction is already attached to another thread.
            </summary>
            <remarks>
            Indicates an attempt to attach a transaction to a thread when the already is attached to another thread.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRWEAVINGFAILED">
            <summary> 
            General weaver error.
            </summary>
            <remarks>
            Information error connecting a sample of errors (always at least one) that is the cause of a general weaver error. Weaving errors use a reference approach, meaning that this error will inform the user about a unique reference that can be used to connect all errors and notices that are the underlying source for this error. With that reference it will be easy to find out more specific error information, assisting in correcting the problems that was discovered.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRMISSINGDEFINITION">
            <summary> 
            An entity class in the deployed application was not part of the previously created core database schema.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>To remedy this symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRREFFORBIDDENUSERCODE">
            <summary> 
            User code referenced a type, field or method decorated with the HideFromApplications attribute
            </summary>
            <remarks>
            Maps to ATV01
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRILLEGALATTRIBUTEASSIGN">
            <summary> 
            The field may not be explicitly assigned.
            </summary>
            <remarks>
            Illegal field assignment. This error will be the result of user code assigning a construct in Starcounter that doesnt allow explicit assignment. Examples includes reference lists and sequence number fields. (Maps to ATV03)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDBCLASSCANTBEGENERIC">
            <summary> 
            A database class was declared as a generic, which is not allowed.
            </summary>
            <remarks>
            Maps to DCV01.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRILLEGALFINALIZER">
            <summary> 
            A database class contained a finalizer, something currently not supported.
            </summary>
            <remarks>
            Maps to DCV02.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRILLEGALTYPEREFDECL">
            <summary> 
            A database class contained a field declaration where the field was named __typeRef.
            </summary>
            <remarks>
            This name has been reserved by Starcounter. (Maps to DCV03)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTOCOMPLEXCTOR">
            <summary> 
            The instance initializer was too complex. Assign values inside the instance constructor instead.
            </summary>
            <remarks>
            <para>The &quot;initialization&quot; part of the constructor (i.e., the part before the base constructor is called) should be simple enough: </para>
            <para>- May not declare lexical scopes (impossible in C#) </para>
            <para>- May not declare exception handlers (impossible in C#) </para>
            <para>- May not contain branching instructions (like constructs &lt;condition&gt;? &lt;true&gt; : &lt;false&gt; in C#). </para>
            <para>Maps to DCV04. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRFIELDREDECLARATION">
            <summary> 
            A database class declared a persistent field that has already been declared in one of the parent classes.
            </summary>
            <remarks>
            Maps to DCV06.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRILLEGALEXTCTOR">
            <summary> 
            Extension classes may only have default constructors.
            </summary>
            <remarks>
            An extension class was discovered and that class declared a constructor other than the default contructor. Extension classes are not allowed to declare any other constructors than the default contructor. (Maps to ECV01)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRILLEGALEXTCREATION">
            <summary> 
            May not explicitly create instances of extension classes.
            </summary>
            <remarks>
            Code that explicitly instantiated a Starcounter extension class was discovered. This is not allowed. (Maps to ECV02)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRILLEGALEXTCTORBODY">
            <summary> 
            The constructor in an extension class contained user code.
            </summary>
            <remarks>
            This is currently not allowed. Note: I can&#39;t really remember why we have this limitation? We should remove it if it&#39;s there for no particular reason. (Maps to ECV03)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERREXTNOTSEALED">
            <summary> 
            An extension class that wasn&#39;t declared as &quot;sealed&quot; was found.
            </summary>
            <remarks>
            Maps to ECV04.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRKINDWRONGNAME">
            <summary> 
            A Kind class named something other than &quot;Kind&quot; was found.
            </summary>
            <remarks>
            <para>A Society Object class was discovered as a kind (by extending Something.Kind) but it was named something other than &quot;Kind&quot;. </para>
            <para>Note: As long as we provide a tight integration with Society Objects and we validate their code constrains in modules that targets their framework, I guess it is fair to have a set of error codes for those violations as well. However, these might be considered to be removed/moved in the future. (Maps to KCV02) </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRKINDMISSINGCONCEPT">
            <summary> 
            A Kind class missing an enclosing concept class was found.
            </summary>
            <remarks>
            All kind classes must be declared inside a Society Object concept class. A kind was found that wasn&#39;t. (Maps to KCV03)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRKINDILLEGALPARENT">
            <summary> 
            A Kind class was derived from an inappropriate base class.
            </summary>
            <remarks>
            A kind class belonging to concept A must be derived from the closest declared kind class of A&#39;s base concept. A class that violated this was found. (Maps to KCV04)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRKINDMISSINGCTOR">
            <summary> 
            A Kind class missing a default constructor was found.
            </summary>
            <remarks>
            A kind class must have a default constructor, either an explicit one or the one provided by the compiler. (Maps to KCV05)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRKINDMISSINGPARENT">
            <summary> 
            Classes named &quot;Kind&quot; declared within Society Object concept classes must inherit its parent Kind.
            </summary>
            <remarks>
            Maps to KCV06.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRKINDWRONGVISIBILITY">
            <summary> 
            Kind classes must at least have the &quot;protected&quot; visibility.
            </summary>
            <remarks>
            Maps to KCV09.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRFIELDCOMPLEXINIT">
            <summary> 
            Too complex field initializer in entity class. Initialize it in the constructor instead.
            </summary>
            <remarks>
            A persistent field was equipped with an initialization statement (for example &quot;public int = 0;&quot;), but the statement was to complex for the current version of the code weaver to interpret. Consult weaver documentation about what initialization constructs are supported, and watch out for later versions of Starcounter, being able to support more complex initializations. (Maps to PFV02)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRFIELDREFMETHOD">
            <summary> 
            Starcounter can&#39;t handle the reference parameters in a certain method.
            </summary>
            <remarks>
            A few restrictions regarding methods with reference parameters of persistent fields currently applies. When this error occurs, look at the method signature of the target method (part of the error message) and see if it can be implemented differently until there is support for more complex field-by-reference cases in later versions of the database. For more information about this, contact Starcounter. (Maps to PFV21)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSYNNOTARGET">
            <summary> 
            A field was declared as a synonym to a non-existent field.
            </summary>
            <remarks>
            A field was declared as a synonym, but the field it was declared as a synonym for could not be located by the loader. Make sure your synonym targets are accessible as fields in the current class (or a baseclass) and that they are also persistent. (Maps to PFV06)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSYNTYPEMISMATCH">
            <summary> 
            Mismatch between a synonym&#39;s type and the synonym&#39;s target&#39;s type.
            </summary>
            <remarks>
            There was a mismatch between a synonym and the target it specified. A synonym target must always be assignable for the synonym field and if and of the fields are instrict fields, the type must be a perfect match. (Maps to PFV07)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSYNVISIBILITYMISMATCH">
            <summary> 
            A synonym was found that was more visible than its target.
            </summary>
            <remarks>
            When a synonym references a target in another type that its own, the synonym is not allowed to have a wider visibility than the target. (Maps to PFV08)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSYNREADONLYMISMATCH">
            <summary> 
            A non-readonly synonym to a readonly field was found.
            </summary>
            <remarks>
            When a synonym references a target in another type that its own, the synonym must be readonly if the target is readonly. (Maps to PFV09)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSYNTARGETNOTPERSISTENT">
            <summary> 
            A synonym targeted a non-persistent field.
            </summary>
            <remarks>
            When a synonym references a target, the target must be a persistent field and nothing else. (Maps to PFV12)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSYNPRIVATETARGET">
            <summary> 
            Can&#39;t declare synonyms to private fields.
            </summary>
            <remarks>
            When a synonym references a target, and the target is in another type, the target must never have the private visibility. (Maps to PFV20)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRPERSPROPNOTARGET">
            <summary> 
            Field not found.
            </summary>
            <remarks>
            A persistent property (in a known assembly) was declared. It supplied a reference to a target database field, but that field was not found when queried for by the loader. (Maps to PPV02)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTYPENAMEDUPLICATE">
            <summary> 
            Two classes of the same full name were found.
            </summary>
            <remarks>
            A class was being discovered by the analyzer and while analyzing, the analyzer detected that a type with the same name (full name) was allready discovered. (Maps to DCV07)
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERROBJECTDOESNTEXIST">
            <summary> 
            A transaction tried to access an object that has been deleted (or which for some reason doesn&#39;t exist).
            </summary>
            <remarks>
            Indicates an attempt to access an object that for some reason doesn&#39;t exist. This error is raised if accessing or attempting to modify an object that has been deleted in another transaction before the start of the current transaction. This error is also used when attempting to access removed objects that exist outside the scope of transactions (like an index) or when accessing removed entity object without any notion of transactions (applies to certain metadata functions).
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONNOTOWNED">
            <summary> 
            A transaction operation failed because the transaction wasn&#39;t owned by the current virtual processor.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRATTRNOKERNELFIELD">
            <summary> 
            An entity class in the deployed application declared a field not part of the previously created core database schema.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>To remedy this symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRUNLOADFAILED">
            <summary> 
            The unload routine failed to execute.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRRELOADFAILED">
            <summary> 
            The database reload routine failed to execute.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONSCOPEOWNED">
            <summary> 
            Context not accessible because it&#39;s owned by a scope.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNHANDLEDTRANSACTCONFLICT">
            <summary> 
            The operation failed because of an unhandled transaction conflict.
            </summary>
            <remarks>
            This error is raised by transaction scopes if they are unable to restart a conflicted transaction.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBINARYVALUEEXCEEDSMAXSIZE">
            <summary> 
            Binary data exceeds maximum size.
            </summary>
            <remarks>
            Maximum size allowed for binary data is 4080 bytes (4096 - 16).
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRREADONLYTRANSACTION">
            <summary> 
            The transaction is readonly and cannot be changed to write-mode.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRRENAMEMISSINGSOURCE">
            <summary> 
            A renamed token (class/field) specifies a previous name not part of the old schema.
            </summary>
            <remarks>
            When specifying renaming instructions for classes and fields, Starcounter forces them to be part of the legacy schema, the one the renaming applies to. There are several probable causes for this error, all of them relating to bad specification of the previous name, and they will be listed on the documentation, helping developers understand what might have caused the error to be raised.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRMEMORYMANAGERISDEAD">
            <summary> 
            The memory manager has terminated unexpectedly.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTTHESAMEDATABASE">
            <summary> 
            When reloading the database; the memory manager has detected that the image files represents another database the the one in memory, or another generation of it.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTWRITETRANSACTIONLOG">
            <summary> 
            An error occured when writing to the redo log.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTOPENDUMPFILE">
            <summary> 
            Reload failed because the process was unable to open the dump file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTOPENTRANSACTIONLOG">
            <summary> 
            Unable to open transaction log.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTEXPANDIMAGEFILE">
            <summary> 
            Could not expand image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTCREATEIMAGEFILE">
            <summary> 
            Could not create image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTCREATETRANSACTIONLOG">
            <summary> 
            Could not create transaction log.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNLOADFAILEDDUMPEXISTS">
            <summary> 
            The unload routine failed to execute because a dump with the specified name already exists.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDRELOADINSTRUCTSET">
            <summary> 
            When initializing the reload, the reload instruction set unexpectedly was proved invalid.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRRELOADBUGV1NULLABLEAI63">
            <summary> 
            When rebuilding (dump ver 1), a known and un-recoverable error was detected. Please contact Starcounter for guidance.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRRELOADUNSUPFIELDCONVERSION">
            <summary> 
            Unsupported field conversion during rebuild.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRRELOADCONVERSIONOVERFLOW">
            <summary> 
            Conversion overflow during rebuild.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDUMPVERSIONNOTSUPPORTED">
            <summary> 
            When rebuilding, a version of the dump was not supported.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTFINDIMAGEFILE">
            <summary> 
            One or both of the image files are missing.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTACCESSIMAGEFILE">
            <summary> 
            One or both of the image files aren&#39;t accessible by the process.
            </summary>
            <remarks>
            <para>Check so that the user that runs the server has read and write access to the file and that the file isn&#39;t read-only. </para>
            <para>Corresponds to windows error ERROR_ACCESS_DENIED. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRIMAGEFILELOCKED">
            <summary> 
            One or both of the image files are locked by another process.
            </summary>
            <remarks>
            Corresponds to windows error ERROR_SHARING_VIOLATION.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTFINDTRANSACTIONLOG">
            <summary> 
            The transaction log is missing.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTACCESSTRANSACTIONLOG">
            <summary> 
            The transaction log isn&#39;t accessible by the process.
            </summary>
            <remarks>
            <para>Check so that the user that runs the server has read and write access to the file and that the file isn&#39;t read-only. </para>
            <para>Corresponds to windows error ERROR_ACCESS_DENIED. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONLOGLOCKED">
            <summary> 
            The transaction log is locked by another process.
            </summary>
            <remarks>
            Corresponds to windows error ERROR_SHARING_VIOLATION.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTACCESSDUMPFILE">
            <summary> 
            Reload failed because the dump file weren&#39;t accessible by the process.
            </summary>
            <remarks>
            <para>Check so that the user that runs the server has read and write access to the file and that the file isn&#39;t read-only. </para>
            <para>Corresponds to windows error ERROR_ACCESS_DENIED. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDUMPFILELOCKED">
            <summary> 
            Reload failed because the dump file was locked by another process.
            </summary>
            <remarks>
            Corresponds to windows error ERROR_SHARING_VIOLATION.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRRELOADCONSTRAINTVIOLATION">
            <summary> 
            The reload completed successfully but reload data violated one or more constraints.
            </summary>
            <remarks>
            The log will also contain which constraint or constraints that was violated.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRFILETRANSNOTSUPPORTED">
            <summary> 
            File transactions cannot be used on this platform version.
            </summary>
            <remarks>
            Minimum version for File transactions is 6 (Windows Vista/Server 2008).
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTYPEBASEDEVIATION">
            <summary> 
            An entity type declared a base class that did not match the base class previously bound to the core database schema.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>To remedy this symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRFIELDSIGNATUREDEVIATION">
            <summary> 
            A database type declared a persistent field that did not match the signature of the attribute in the core schema.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>To remedy this symptom, a database rebuild must be performed. </para>
            <para>This error code is used for deviating signatures on persistent fields declared in regular entity classes as well as in Starcounter extension classes. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSCHEMADEVIATION">
            <summary> 
            Schema deviations were found when comparing the deployed application to the core schema in the database. Individual deviations detected have been logged. To find these logs, use the activity ID property of this message as a reference.
            </summary>
            <remarks>
            <para>During schema deviation detection, at least one violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>To remedy this symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERREXTFIELDMISSINGCORE">
            <summary> 
            An extension class in the deployed application declared a field not part of the previously created core database schema. This is caused by addition of fields, inproper renaming of fields or if the extended class of the extension was altered.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>To remedy this symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRINDEXDECLARATIONDEVIATION">
            <summary> 
            An index was declared but either not part of the core database schema or the signature of that index did not match the signature of the index in the core.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>To remedy this symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRMISSINGENTITYCLASS">
            <summary> 
            A database definition in the current core database schema have no corresponding entity class in the deployed application.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>The reason for this error is that a class was either removed or improperly renamed. To remedy the symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRMISSINGPERSISTENTFIELD">
            <summary> 
            A database attribute in the current core database schema have no corresponding persistent field in the deployed application.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>The reason for this error is that a field was either removed or improperly renamed. To remedy the symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRMISSINGEXTENSIONCLASS">
            <summary> 
            In the core database schema, an entity class was extended by an extension class that have no corresponding class in the deployed application.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>The reason for this error is that an extension class was either removed, improperly renamed or was redefined to extend another class than it extended originally. To remedy the symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRINDEXDECLARATIONMISSING">
            <summary> 
            An index was defined in the core database schema but it has no corresponding index declaration in the deployed application.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>The reason for this error is that an index previously defined have been removed/renamed. To remedy this symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRHOOKCALLBACKNOTBOUND">
            <summary> 
            At least one commit hook part of the deployed application defined a callback that was not previously bound to the core database definition of the target being hooked.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>The reason for this error is that either a new hook was added or that a callback on an existing hook was added. To remedy this symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRHOOKCALLBACKNOTINSTALLED">
            <summary> 
            At least one hook part of the deployed application was missing. The core keeps track of what hooks and callbacks are installed and when a core definition was inspected, a callback was previously bound but no longer part of the deployed application.
            </summary>
            <remarks>
            <para>During schema deviation detection, a violation was found, indicating that the deployed database application code structure was different than the metadata found in the core. </para>
            <para>The reason for this error is that a hook either was removed completly, referenced another target than it was originally, or that a particular callback of such a hook was removed. To remedy this symptom, a database rebuild must be performed. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRITERATORCLOSED">
            <summary> 
            A interator operation failed because the iterator was closed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTBACKUPOUTOFMEMORY">
            <summary> 
            The checkpoint image file could not be backed up because of failure to allocate needed resources.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTBACKUPALREADYEXISTS">
            <summary> 
            The checkpoint image file could not be backed up because a backup with the same timestamp already existed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTBACKUPDISKFULL">
            <summary> 
            The checkpoint image file could not be backed up because there wasn&#39;t enough room om the target disk.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTBACKUPUNEXPERROR">
            <summary> 
            The checkpoint image file could not be backed up as a result of an OS error.
            </summary>
            <remarks>
            The reason for why the image file couldn&#39;t be backed up is logged seperatly.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTVERIFYBACKUPFILE">
            <summary> 
            Backup file could not be verified.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTFINDBACKUPFILE">
            <summary> 
            Backup file could not be found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTACCESSBACKUPFILE">
            <summary> 
            Backup file isn&#39;t accessible by the process.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRVERIFYIMAGEMAGICFAILED">
            <summary> 
            Verification of image file against magic number failed. The file could not be identified as an image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRVERIFYBACKUPMAGICFAILED">
            <summary> 
            Verification of backup file against magic number failed. The file could not be identified as a backup file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTFINDMAINTRANSLOGFILE">
            <summary> 
            When inspecting a set of physical redo log files in a multi-file transaction log setup, the server was not able to find the main redo log, indexed 0 (zero). The reason for this indicates that the main redo log file have been tampered with on the server, either it has been deleted or moved.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSLOGFILECOUNTMISMATCH">
            <summary> 
            When inspecting a set of physical redo log files in a multi-file transaction log setup, the server found that the count expected did not match the number of redo logs found. The reason for this indicates that physical files have been tampered with on the server, usually that one of more files have been deleted or moved.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSLOGCANTFINDREFFILE">
            <summary> 
            The physical redo log file referenced by the image opened was not part of the set of file identified as logs. This is most likely caused by the file being renamed or possibly deleted.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRLBINARYVALUEEXCEEDMAXSIZE">
            <summary> 
            Large binary data exceeds maximum size.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSTRINGVALUEEXCEEDSMAXSIZE">
            <summary> 
            String data exceeds maximum size.
            </summary>
            <remarks>
            <para>The maximum size is set so that it&#39;s unlikely to be exceeded. If storing a larger string is needed then it will have to be stored as a large binary. </para>
            <para>The maximum size of a string in characters is affected by contents of the string and varies between different collations. This since it&#39;s the size of the string packed that is restricted. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSTRINGCONVERSIONFAILED">
            <summary> 
            An error occured when converting string to or from native format.
            </summary>
            <remarks>
            This error may indicate a bug in the string formatter or data corruption.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSEARCHKEYEXCEEDSMAXSIZE">
            <summary> 
            Search key data exceeds maximum allowed size.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRONLYDURINGSCHEMAUPDATE">
            <summary> 
            Operation is only supported during schema update.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRREATTACHFAILEDBADDBSTATE">
            <summary> 
            A thread detached during database operation and failed to reattach leaving the server process in an inconsistent state.
            </summary>
            <remarks>
            Can occur either when processing commit hooks or a delete hook. Caused either by the thread ending the hook operation manually detached (which should not occur) or if an out of memory or similar occurs while attempting to reattach an auto detached thread.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTINITCHECKPOUTOFMEMORY">
            <summary> 
            Checkpoint process could not be initialized because of failure to allocated needed resources from OS.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTINITCHECKPUNEXPERROR">
            <summary> 
            Checkpoint process could not be initialized because of an unexpected OS error.
            </summary>
            <remarks>
            The reason for why the checkpoint process could not be initialized is logged seperatly.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTDURINGSCHEMAUPDATE">
            <summary> 
            Operation is not supported during schema update.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOMMITPENDING">
            <summary> 
            The operation failed because a transaction commit is pending (issued but not finalized).
            </summary>
            <remarks>
            If this error occurs it indicates a bug in the managed binding.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERROUTOFTHREADBUFFER">
            <summary> 
            The operation failed because the maximum size of the thread buffer was exceeded.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCODEGENERATIONFAILED">
            <summary> 
            Code generation failed.
            </summary>
            <remarks>
            The error is usually due to a previous I/O error. If so that error will have been written to log.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRINDEXONTYPENOTSUPPORTED">
            <summary> 
            Index on type of specified attribute not supported.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTOMANYATTRIBUTESONINDEX">
            <summary> 
            The number of attributes specified exceeds the maximum number of attributes supported in a combined index.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOATTRIBUTESONINDEX">
            <summary> 
            No attributes specified on index creation.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDINDEXSORTMASK">
            <summary> 
            Invalid sort mask specified on index creation.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDEFINITIONTOLARGE">
            <summary> 
            The size of the defintion exceeded the maximum definition size.
            </summary>
            <remarks>
            The size of a definition depends on the number and type of attributes and the number and type indexes. Reducing the number of attributes and/or indexes might help resolve this problem.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRRELOADFAILSTRINGCONVERT">
            <summary> 
            String conversion failed during rebuild.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDOBJECTACCESS">
            <summary> 
            The operation failed because of an invalid object access.
            </summary>
            <remarks>
            <para>Occurs when transaction attempts to access an object that isn&#39;t accessible from the specific transaction. </para>
            <para>This could mean that the object either didn&#39;t exist when the transaction started, was deleted within the scope of the transaction or was created within the scope of another transaction not yet committed. </para>
            <para>It could also mean that the referenced object isn&#39;t accessible to the current transaction because it belongs to another container. </para>
            <para>Only simple reads generates this error. If the error is detected in a write the transaction is aborted. See ScErrInvalidObjectAccessAbort. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSCHEMACODEMISMATCH">
            <summary> 
            Operation failed because input does not match schema.
            </summary>
            <remarks>
            Occurs when, for example, a string attribute is accessed as an integer.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSETUPDYNCODEENVFAILED">
            <summary> 
            Failed to setup dynamic code environment.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRLOADDYNAMICCODEFAILED">
            <summary> 
            Failed to load a dynamically generated library.
            </summary>
            <remarks>
            The error is usually due to a previous I/O error. If so that error will have been written to log.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTREADTRANSACTIONLOG">
            <summary> 
            An error occured when reading from the redo log.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRPERSPROPWRONGCOREREF">
            <summary> 
            A PersistentProperty declaration referenced a field in the core that was not found.
            </summary>
            <remarks>
            A persistent property (in a known assembly) was declared. It specified a mapping to a database field in the core, but that field was not found when the class and it&#39;s ancestors where analyzed.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTOMANYOPENITERATORS">
            <summary> 
            Too many open iterators registered with the current scheduler.
            </summary>
            <remarks>
            Only a limited number of open iterators is allowed at any given time. To avoid this error be sure to close iterators (releasing the result set) when done with them and don&#39;t keep too many iterators referenced at any given time.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTGENERATEDYNLIBNAME">
            <summary> 
            Unable to generate a name for dynamically generated library.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTAREPTRANSACTION">
            <summary> 
            Operation is only allowed by a REP transaction.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTIFREPTRANSACTION">
            <summary> 
            Operation is not allowed by a REP transaction.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTCREATEDBMEMORYFILE">
            <summary> 
            The memory manager was unable to create a memory file to store database memory.
            </summary>
            <remarks>
            <para>This error occurs when the memory manager was unable to create a memory file for storing database data either when loading image or expanding database memory. If the failure is caused by an OS error code is logged seperatly. The error could also occur because the maximum number of memory files kept by the memory manager has been reached. </para>
            <para>If the memory manager fails to create a memory file because it was unable to allocate sufficient memory from the OS then a ScErrOutOfMemory will be raised. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRNAMEDINDEXALREADYEXISTS">
            <summary> 
            An index with the specified name already exists.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMETADATACLASSDELETE">
            <summary> 
            Metadata objects cannot be deleted.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTINITFLUSHOUTOFMEMORY">
            <summary> 
            Flush process could not be initialized because of failure to allocated needed resources from OS.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTINITFLUSHUNEXPERROR">
            <summary> 
            Flush process could not be initialized because of an unexpected OS error.
            </summary>
            <remarks>
            The reason for why the checkpoint process could not be initialized is logged seperatly.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBADMEMORYCKSUMCHECKP">
            <summary> 
            Checksum mismatch detected in database memory on checkpoint.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADIMAGEFILECKSUMCHECKP">
            <summary> 
            Checksum mismatch detected in image file on checkpoint.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADIMAGEFILECKSUMBACKUP">
            <summary> 
            Checksum mismatch detected in image file on backup.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIMAGEFILEALREADYEXISTS">
            <summary> 
            A new image file could not be created because a file with the specific name already exists.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIMAGEEXEPAGESIZEMISMATCH">
            <summary> 
            The image page size does not match the page size of the executable.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBACKUPEXEPAGESIZEMISMATCH">
            <summary> 
            The backup page size does not match the page size of the executable.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROUTPUTBUFFERTOSMALL">
            <summary> 
            Operation failed because the output buffer was to small for the output.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINDEXNAMETOOLONG">
            <summary> 
            Index creation failed because the specified index name was too long.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTWITHINATRANSACTION">
            <summary> 
            Operation failed because a transaction was attached to the thread and the operation was not allowed whtin a transaction.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDINDEXNAME">
            <summary> 
            Index creation failed because the specified index name was of an invalid format.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONNECTINSIDEDATABASE">
            <summary> 
            Connect failed because it was called from code running inside a database.
            </summary>
            <remarks>
            Connecting to databases using Db.Connect is currently only supported from client applications. When executing inside a database, a connect is not needed since the code is implicitly connected to the running database.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCLIENTENTITYTYPEUNKNOWN">
            <summary> 
            The SQL statement referenced a class/table whose code type was not found on the client. Missing type: &quot;{0}&quot;. Please add the assembly defining this type using Db.Current.EnableClientAssembly(Assembly), for example using Db.Current.EnableClientAssembly(typeof({0}).Assembly).{1}SQL: &quot;{2}&quot;.
            </summary>
            <remarks>
            <para>To use entity types in a client application, the client runtime must be aware of their code types. All the entity types in a given assembly is instantly known the first type one of them is referenced, as they are implicitly registering themself with the runtime. However, if a type is used in an SQL statement and has not previously been referenced by it&#39;s code type, the query will fail with this error. </para>
            <para>To remedy this, you can explicitly add the entity types in a given assembly by issuing Db.Current.EnableClientAssembly(Assembly). </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCLIENTBACKENDNOTINITIALIZED">
            <summary> 
            A method call failed because the client backend was not yet established.
            </summary>
            <remarks>
            <para>This error usually indicates that a client has not successfully called Db.Connect before it used a Starcounter method that needed to access something in the database. </para>
            <para>Example of methods that can cause this error if they are called without the client first have successfully called Db.Connect is: Db.SQL, SqlResult.GetEnumerator, new T where T is an entity type. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRASSEMBLYNOTPREPAREDFORCLIENT">
            <summary> 
            The assembly was not compiled/weaved for access from a client application.
            </summary>
            <remarks>
            To use Starcounter binaries in a client application, the build system must prepare the code for client access during compilation. This is normally done in Visual Studio, under the project property page &quot;Starcounter&quot; in a Starcounter Library project. Make sure you set the &quot;Enable access from external process&quot; to TRUE.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDCLIENTCONNECTSTRING">
            <summary> 
            The database connection string is incorrect.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTANTIATEBINDINGNOTYPE">
            <summary> 
            The type- or extenstion binding &quot;{0}&quot; can not be instantiated because the code type is not known. Make sure the code type is assigned using the CodeType property.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTANTIATEABSTRACTBINDING">
            <summary> 
            The type- or extenstion binding &quot;{0}&quot; can not be instantiated because it represents a type that is declared abstract.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMAXNUMBEROFTABLESEXCEEDED">
            <summary> 
            Unable to create a new table because the maximum number of tables would be exceeded.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTABLENAMETOOLONG">
            <summary> 
            Create or alter table failed because the specified table name was too long.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDTABLENAME">
            <summary> 
            Create or alter table failed because the specified table name was of an invalid format.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOLUMNNAMETOOLONG">
            <summary> 
            Create or alter table failed because the specified column name was too long.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDCOLUMNNAME">
            <summary> 
            Create or alter table failed because the specified column name was of an invalid format.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOLUMNTYPEMUSTBENULLABLE">
            <summary> 
            Create or alter table failed because a column of a type that requires it to be nullable was not specified as nullable.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNAMEDTABLEALREADYEXISTS">
            <summary> 
            Create table failed because a table with the specified name already exists.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRALREADYCONNECTEDTOOTHERDB">
            <summary> 
            Connecting failed because another database is already connected.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTABLEALREADYDROPPED">
            <summary> 
            Failed to drop a table because it has already been dropped.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBTERMINATEDGRACEFULLY">
            <summary> 
            The database process terminated gracefully.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBTERMINATEDUNEXPECTEDLY">
            <summary> 
            The database process terminated unexpectedly.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNKNOWNDBSTATE">
            <summary> 
            Unknown database state.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRENTITYCLASSNOTPUBLIC">
            <summary> 
            The class is not public. Entity classes must be declared with public visibility.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOMMITNOTPENDING">
            <summary> 
            The operation failed because a transaction commit is not pending.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTRESETABORT">
            <summary> 
            Transaction abort could not be reset.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCHECKPWAITFORLOGABORTED">
            <summary> 
            Wait for log writer to write log entries to disk before completing checkpoint was aborted.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTWRITEIMAGEFILEDISKFULL">
            <summary> 
            Unable to write to image file because the write would expand the file and there is no space available on disk.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADCOLUMNTYPE">
            <summary> 
            An unknown column type was specified when creating a table.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONBOUND">
            <summary> 
            The operation failed because the transaction was bound to a thread.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTABLEDROPPED">
            <summary> 
            Failed alter table because it has been dropped.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINDEXNOTFOUND">
            <summary> 
            Index requested not found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTABLENOTFOUND">
            <summary> 
            Table with specified name not found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSYSTEMTABLE">
            <summary> 
            Table can&#39;t be altered or dropped because it is a system table.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSYSTEMINDEX">
            <summary> 
            Index can&#39;t be altered or dropped because it is a system index.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCHECKPOINTABORTED">
            <summary> 
            Checkpoint was aborted.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCHECKPWAITFORSPACEABORTED">
            <summary> 
            Wait for disk space to become available before completing checkpoint was aborted.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRASSEMBLYSPECNOTFOUND">
            <summary> 
            The assembly specification type was not found in the given assembly.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBACKINGRETREIVALFAILED">
            <summary> 
            Unable to retrieve well-known metadata from a transformed binary. Check inner exceptions and/or logs to find more information.
            </summary>
            <remarks>
            A general backing retreival error, used when no more specific backing error applies. Exceptions with this error will carry more detailed information (such as postfixes describing the case, and inner exceptions) and we are strict when logging this when it occurs in a real (i.e. non-testing) context.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRBACKINGDBINDEXTYPENOTFOUND">
            <summary> 
            The database class index backing type was not found in the given assembly.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTATYPESPECIFICATIONTYPE">
            <summary> 
            The given .NET type was not considered a valid type specification type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTYPESPECILLEGALCONSTRUCT">
            <summary> 
            A type specification construct was missing or had an illegal signature.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRATLEASTONEINDEXONTABLE">
            <summary> 
            Unable to drop index because at least one (not inherited) index is required on a table.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCLRDECTOX6DECRANGEERROR">
            <summary> 
            The CLR Decimal cannot be converted to a Starcounter X6 decimal without data loss. Range error.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRPROPERTYNAMEEQUALSFIELD">
            <summary> 
            A property in a database class can not have the same name as a public/protected field in the same class, or in a base class, not even if they differ in casing.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTEXPANDTRANSLOG">
            <summary> 
            An error occured when attempting to expand transaction log.
            </summary>
            <remarks>
            The reason for the failure is logged seperatly.&quot;
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTEXPANDTRANSLOGBADFILE">
            <summary> 
            Transaction log could not be expanded because a faulty log element file was found in the log directory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTEXPANDTRANSLOGDISKFULL">
            <summary> 
            Transaction log could not be expanded because of a failure to allocate disk space.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTEXPANDTRANSLOGNOMEMORY">
            <summary> 
            ransaction log could not be expanded because of a failure to allocate disk memory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTINITTRANSLOGWRITER">
            <summary> 
            An error occured when initializing transaction log writer.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTRANSLOGSPACEAVAILABLE">
            <summary> 
            Transaction could not be committed because of a lack of available log space.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSLOGSPACECANTBEEXPANDED">
            <summary> 
            Transaction could not be committed because of a lack of available log space and log space can&#39;t be expanded.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSLOGWRITERNOTAVAILABLE">
            <summary> 
            Transaction log writer is not available.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTLOADTRANSLOGWRITERLIB">
            <summary> 
            Transaction log writer client library could not be loaded.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRILLEGALTRANSIENTTARGET">
            <summary> 
            The Transient attribute is not applicable to the target code construct.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFAILINGENTRYPOINT">
            <summary> 
            The user code entrypoint method raised an exception.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONCLOSED">
            <summary> 
            An operation failed because transaction has been closed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFIELDSDIFFERINCASEONLY">
            <summary> 
            A field in a database class can not have the same name as a another field in the same class, or in a base class, not even if they differ in casing.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRPROPERTYDIFFERINCASEONLY">
            <summary> 
            A property in a database class can not have the same name as a another property in the same class, or in a base class, not even if they differ in casing.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFORBIDDENFIELDINITIALIZER">
            <summary> 
            Initializing fields in database classes must be done inside a constructor. Field initializers are not supported.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPLICATIONCANTBERESOLVED">
            <summary> 
            The application could not be resolved based on the given arguments or context.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASEMEMBERRESERVEDNAME">
            <summary> 
            The name of a database class field or property clashed with a name reserved by Starcounter.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTEXECUTEDDLTRANSACTLOCKED">
            <summary> 
            Failed to execute DDL statement, since a transaction cannot be created for the execution. This can happen if the statement was called in a user-specified transaction scope.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONSIZELIMITREACHED">
            <summary> 
            Transaction size limit reached.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSYSTEMINDEXONNONSYSTEMTABLE">
            <summary> 
            System index can&#39;t be added to a regular table.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTASYSTEMTRANSACTION">
            <summary> 
            Operation is only allowed within the context of a system transaction.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTANONSYSTEMTRANSACTION">
            <summary> 
            Operation is not allowed within the context of a system transaction.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTHREADDETACHBLOCKED">
            <summary> 
            Attempt to detach thread when not allowed to detach thread.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRVALUEUNDEFINED">
            <summary> 
            Value is undefined.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRRECORDNOTFOUND">
            <summary> 
            Record with specified id not found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTYPEALREADYLOADED">
            <summary> 
            A type with the same name was already loaded, from a different assembly.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNLOADTABLENOCLASS">
            <summary> 
            Unloading a table fails, since its class is not loaded. An application, where the class is declared, needs to be loaded before unload is called.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTOMANYINDEXES">
            <summary> 
            Maximum index count for table exceeded when creating index.
            </summary>
            <remarks>
            Keep in mind that this is evaluated using the total amount of indexes on a table, including inherited indexes. Create table where base table because of failure to add default index for this reason.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCOLUMNNAMENOTUNIQUE">
            <summary> 
            Create table failed because one or more columns shared the same name token as another column.
            </summary>
            <remarks>
            Note that in case the table definition inherits another table definition the name of a defined column must not share the name of a inherited column.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRAMBIGUOUSIMPLICITTRANSACTION">
            <summary> 
            Ambiguous implicit transaction. Please put code inside a transaction scope.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTOKENNOTFOUND">
            <summary> 
            Internal error: token for the given name is not found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDTYPEREFERENCE">
            <summary> 
            The [Type] attribute is not valid on the given target.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDINHERITSREFERENCE">
            <summary> 
            The [Inherits] attribute is not valid on the given target.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDTYPENAME">
            <summary> 
            The [TypeName] attribute is not valid on the given target.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASEMEMBERNOTPUBLIC">
            <summary> 
            Fields/properties of this type must be declared public.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRILLEGALTYPEOBJECT">
            <summary> 
            Object cannot be used as a type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNONPUBLICFIELDNOTEXPOSED">
            <summary> 
            The database field was not public and no public property exist that expose it.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONALREADYOWNED">
            <summary> 
            The transaction is already owned by someone else and cannot be claimed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONMODIFIEDBUTNOTREFERENCED">
            <summary> 
            Data in the transaction is created or updated, but the transaction is not referenced and will be discarded.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATAMANAGERUNAVAILABLE">
            <summary> 
            Failed to connect to data manager is unavailable. Occurs when data manager is not started or not yet properly initialized.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATAMANAGERCHANNELINUSE">
            <summary> 
            Failed to connect to data manager because designated channel is in use. Occurs if a previous client is still connected or not yet properly disconnected.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATAMANAGERUNRESPONSIVE">
            <summary> 
            Communication with data manager failed because data manager is unresponsive.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATAMANAGERDISCONNECTED">
            <summary> 
            Communication with data manager failed because client was disconnected by data manager.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATAMANAGERINCOHERENT">
            <summary> 
            Communication with data manager failed because client is unable to understand the data manager.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRLOGWRITERSTILLRUNNING">
            <summary> 
            Could not proceed because log writer is still running and won&#39;t shut down.
            </summary>
            <remarks>
            Database load can not proceed while log writer is still running and for some reason it won&#39;t shut down within an expected time frame. This could be because is stalled or because flushing pending log writes takes longer then expected.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRRECORDIDLIMITREACHED">
            <summary> 
            Record ID limit is reached. No more records can be inserted in the database.
            </summary>
            <remarks>
            Database preconfigured maximum record ID has been reached. No more records can be inserted in the database.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCOLUMNNOTFOUND">
            <summary> 
            Column with specified name not found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONLOGPOSITIONNOTFOUND">
            <summary> 
            Specified position not found in the transaction log.
            </summary>
            <remarks>
            Position passed is not found in the transaction log. Most likely appropriate transaction log files has been removed due to retention policy.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRHANDLETABLELIMITREACHED">
            <summary> 
            Unable to allocate a handle table since the maximum number of handles tables are reached.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRILLEGALSYNONYMELEMENT">
            <summary> 
            Illegal element for the SynonymousTo attribute.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFORBIDDENDATABASENAME">
            <summary> 
            Invalid database name.
            </summary>
            <remarks>
            The database name must follow this [a-z,A-Z,0-9] naming scheme.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTRUNSHAREDAPPHOST">
            <summary> 
            Illegal attempt to run the shared app code host.
            </summary>
            <remarks>
            The shared app code host is managed by Starcounter and can not be explicitly executed by user code.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDSESSIONID">
            <summary> 
            Specified session id not valid.
            </summary>
            <remarks>
            The session with the id has either expired or never existed.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSNOTREGISTEREDWITHSESN">
            <summary> 
            The specific transaction is not registered with the session.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMAXREGISTEREDTRANSREACHED">
            <summary> 
            Unable to register transaction with session because the maximum number of transactions per session has already been reached.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSESSIONINSIDEDATABASE">
            <summary> 
            Operations on sessions are only available from clients, not code running inside a database.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSESSIONMANAGERDIED">
            <summary> 
            Scheduler session manager has died.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRANOTHERSESSIONACTIVE">
            <summary> 
            Another session for this thread is already active.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRACQUIRESESSIONTIMEOUT">
            <summary> 
            Exclusive access to the session could not be obtained.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDDISKACCESSERR">
            <summary> 
            A call to an operating system level disk access API failed to execute.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDFILEACCESSERR">
            <summary> 
            A call (other than read/write) to an operating system level file access API failed to execute.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONLOGCORRUPT">
            <summary> 
            Recovery detected the transaction log to be corrupt, recovery can&#39;t be completed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDIMAGEFILEERROR">
            <summary> 
            An unexpected file I/O error occurred when writing to or reading from the image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDIMAGEMMAPERROR">
            <summary> 
            An unexpected error was detected when allocating memory for the database image.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDWAITERROR">
            <summary> 
            An unexpected error was detected when waiting for a waitable object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERROROPENIMAGEFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to open an image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORREADIMAGEFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to read from an image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORWRITEIMAGEFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to write to an image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORINITSHAREDOBJECT">
            <summary> 
            An unexpected error occured when attempting to initialize a shared object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORCREATETRANSLOG">
            <summary> 
            An unexpected file I/O error occurred when attempting to create the redo log.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERROROPENTRANSLOG">
            <summary> 
            An unexpected file I/O error occurred when attempting to open the redo log.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORREADTRANSLOG">
            <summary> 
            An unexpected file I/O error occurred when attempting to read from the redo log.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORWRITETRANSLOG">
            <summary> 
            An unexpected file I/O error occurred when attempting to write to the redo log.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERROROPENDUMPFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to open a dump file (SCD or SCDX).
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORREADDUMPFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to read a dump file (SCD or SCDX).
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORWRITEDUMPFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to write to dump file (SCD or SCDX).
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERROREXPANDIMAGEFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to expand an image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORCOPYIMAGEFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to copy an image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORCREATEIMAGEFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to create an image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIMAGEFILECORRUPT">
            <summary> 
            The image file is corrupt.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORCREATEPROCESS">
            <summary> 
            An unexpected error occured when attempting to create a child process.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORNAMEDUMPFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to rename dump file from temporary to final name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRVERIFYDUMPMAGICFAILED">
            <summary> 
            When rebuilding, verifying the dump against the magic number failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORGETDUMPTMPNAME">
            <summary> 
            An unexpected error occured when creating a temporary file name for dump.
            </summary>
            <remarks>
            Name is created using API function GetTempFileName.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORCREATEDUMPFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to create dump file (SCD or SCDX).
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMEMORYMANAGERINCOHERENT">
            <summary> 
            The server can&#39;t understand the memory manager.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPCHANNELREADERROR">
            <summary> 
            An unexpected error was detected when initiating or completing a channel read.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPCHANNELWRITEERROR">
            <summary> 
            An unexpected error was detected when initiating or completing a channel write.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPCHANNELACCEPTERROR">
            <summary> 
            An unexpected error was detected when initiating or completing a channel accept.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPCHANNELCONNECTERROR">
            <summary> 
            An unexpected error was detected when initiating or completing a channel connect.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPCHANNELCLOSEERROR">
            <summary> 
            An unexpected error was detected when initiating or completing a channel close.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPLISTENERCREATEERROR">
            <summary> 
            An unexpected error was detected when creating a listener.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPLISTENERCLOSEERROR">
            <summary> 
            An unexpected error was detected when initiating or completing a listener close.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERROROPENFILELOG">
            <summary> 
            An unexpected error was detected when opening the server file/trace log.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRINITBACKUPPROC">
            <summary> 
            An unexpected OS error occurred when attempting to initialize backup process.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRBACKUPIMAGEFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to backup an image file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERROPENBACKUPFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to open a backup file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRFINDINGTRANSLOG">
            <summary> 
            An unexpected error occurred when attempting to find the redo log(s).
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRTRANSLOGCOUNTZERO">
            <summary> 
            An unexpected error occurred when reading the internal COUNT property of the physical main redo log. The value was 0 (zero).
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRILLEGALTLOGSECTREF">
            <summary> 
            The reference to the place where the next transaction should be written in the redo log, fetched from the image when loaded, was out of bounds with respect to the sector count of the given file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRINITCHECKPPROC">
            <summary> 
            An unexpected OS error occurred when attempting to initialize checkpoint process.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORCOPYCODEFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to copy code generation base file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERROROPENCODEFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to open code generation file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORWRITECODEFILE">
            <summary> 
            An unexpected file I/O error occurred when attempting to write to code generation file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERROREXECUTECOMPILE">
            <summary> 
            An unexpected error occurred when attempting to compile code generation output.
            </summary>
            <remarks>
            This error is probably due to a faulty installation. Likely the used compiler is not properly installed.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDCOMPILERERROR">
            <summary> 
            An unexpected error occurred was returned by the compiler when attempting to compile code generation output.
            </summary>
            <remarks>
            This error should not occur. Please contact Starcounter support.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORCREATECODEDIR">
            <summary> 
            An unexpected error occurred when attempting to create directory for dynamically generated code.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORLOADCODEFILE">
            <summary> 
            An unexpected error occurred when attempting to load dynamically generated code.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORALLOCRESOURCE">
            <summary> 
            An unexpected error occured when attempting to allocate a OS resource.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORFREERESOURCE">
            <summary> 
            An unexpected error occured when attempting to release a OS resource.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORSETWAITEVENT">
            <summary> 
            An unexpected error occured when attempting set, reset or wait for an OS event.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRORCREATEDBMEMFILE">
            <summary> 
            An unexpected error was detected when creating a memory file for database data.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPMEMORYCKSUMCHECKP">
            <summary> 
            Checksum mismatch detected in database memory on checkpoint.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPIMAGEFILECKSUMLOAD">
            <summary> 
            Checksum mismatch detected in image file on load.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPIMAGEFILECKSUMCHECKP">
            <summary> 
            Checksum mismatch detected in image file on checkpoint.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPIMAGEFILECKSUMBACKUP">
            <summary> 
            Checksum mismatch detected in image file on backup.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRINITFLUSHPROC">
            <summary> 
            An unexpected OS error occurred when attempting to initialize image write process.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRSETDLLDIRECTORY">
            <summary> 
            An unexpected OS error occurred when attempting to initialize image write process.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRURIMATCHERCODEGENERATORFAILURE">
            <summary> 
            Exception occurred inside URI matcher code generator.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNHANDLEDWEAVEREXCEPTION">
            <summary> 
            An unhandled, unidentified (non-Starcounter) exception occurred in the weaver.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPPLATFORMAPIERROR">
            <summary> 
            An unexpected error occured calling a platform API function.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTUPLETOOBIG">
            <summary> 
            TupleWriter cannot write tuple, since it is too big.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPFASTERTHANJSON">
            <summary> 
            An unexpected error occured in FasterThanJson library.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTUPLEWRITESAVE">
            <summary> 
            TupleWriter cannot safely write tuple.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTUPLEVALUETOOBIG">
            <summary> 
            Input value cannot fit the given tuple lenght.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTUPLEOUTOFRANGE">
            <summary> 
            Value is out of range of the tuple.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPENUMERATORDISPOSE">
            <summary> 
            Unexpected error during enumerator dispose.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPDBMETADATAMAPPING">
            <summary> 
            Unexpected error during mapping different meta-data, which represent database classes and properties.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNKNOWNNETWORKPROTOCOL">
            <summary> 
            Current network protocol is unknown.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTUPLEINCOMPLETE">
            <summary> 
            TupleWriter cannot safely seal tuple, since not all values were written.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWEAVERCANTUSECACHE">
            <summary> 
            The weaver was unable to weave the application because of an internal problem with the weaver cache. Run the weaver with the --nocache option to remedy.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMAXHANDLERSREACHED">
            <summary> 
            Maximum number of handlers reached.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRHANDLERINFOEXCEEDSLIMITS">
            <summary> 
            Handler info exceeds size limits.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDRESPONSE">
            <summary> 
            An internal node call returned an unexpected response.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOLUMNHASNOPROPERTY">
            <summary> 
            The column is not exposed with a property, it can not be accessed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDCONNECTTIMEOUT">
            <summary> 
            Unexpected connect timeout.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLINTERNALERROR">
            <summary> 
            Unexpected internal error in SQL module.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLEXPORTSCHEMAFAILED">
            <summary> 
            SQL module was unable to write a schema file to the current temp directory.
            </summary>
            <remarks>
            The schema file is used by external process scsqlparser.exe.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLSTARTPROCESSFAILED">
            <summary> 
            SQL module was unable to start external process scsqlparser.exe.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLVERIFYPROCESSFAILED">
            <summary> 
            SQL module was unable to verify external process scsqlparser.exe.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLPROCESSQUERYFAILED">
            <summary> 
            External process scsqlparser.exe was unable to process the current SQL query.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRQUERYOPTIMINTERNALERROR">
            <summary> 
            Unexpected internal error in query optimization module.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRQUERYEXECINTERNALERROR">
            <summary> 
            Unexpected internal error in query execution module.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLDUPLICATEDIDENTIFIER">
            <summary> 
            More than one public identifier (class name, property name etc.) with the same case insensitive representation.
            </summary>
            <remarks>
            Since the SQL is case insensitive such case insensitive ambiguity can not be allowed.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCONNCONNECTTODATABASE">
            <summary> 
            Can&#39;t establish connection to specified database.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONNGETQUERYID">
            <summary> 
            Error fetching unique SQL query identifier.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONNGETQUERYRESULTS">
            <summary> 
            Error fetching SQL query results.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONNGETNEXTRESULTSPAGE">
            <summary> 
            Error fetching SQL query results next page.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONNCLOSEENUM">
            <summary> 
            Error closing open SQL enumerator.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONNINITSQLFUNCTIONS">
            <summary> 
            Error initializing managed SQL function pointers.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSINGLEOBJECTPROJECTION">
            <summary> 
            Only single object projection is allowed for SQL queries on the client.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRQUERYSTRINGTOOLONG">
            <summary> 
            The length of the query string exceeds the maximal length allowed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROFFSETKEYOUTOFPROCESSFETCH">
            <summary> 
            In out of database execution offset key can be obtained only for queries with FETCH statement.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRQUERYWRONGPARAMTYPE">
            <summary> 
            Incorrect SQL parameter/variable type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLINCORRECTSYNTAX">
            <summary> 
            Incorrect SQL syntax.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLNOTIMPLEMENTED">
            <summary> 
            Not implemented SQL feature.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLNOTSUPPORTED">
            <summary> 
            Not supported SQL feature.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRSPRINTFSQLSYNTAX">
            <summary> 
            An unexpected error occurred in unmanaged SQL parser when attempting to format message for SQL syntax error.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPSQLPARSER">
            <summary> 
            An unexpected error occurred in SQL Parser.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLUNKNOWNNAME">
            <summary> 
            Specified name of class, property or other object name does not exist in the database.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPSQLSCANNER">
            <summary> 
            An unexpected error occurred in scanner of SQL Parser.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDOFFSETKEY">
            <summary> 
            Offset key is invalid for given query.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNSUPPORTLITERAL">
            <summary> 
            Literals are not supported in the query.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNSUPPORTAGGREGATE">
            <summary> 
            Aggregates are not supported in the query.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRQUERYRESULTTYPEMISMATCH">
            <summary> 
            Expected generic result type does not match with query result type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTOOMANYINDEXCOLUMNS">
            <summary> 
            Too many columns for compound index.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDCURRENT">
            <summary> 
            Calling current is invalid, since enumerator has not started or has already finished.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPERRUNAVAILABLE">
            <summary> 
            Internal error in SQL Processor. Error cannot be retrieved.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPMETADATA">
            <summary> 
            Internal error in unmanaged meta-data population.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLINTERNALBUFFERSMALL">
            <summary> 
            Internal error in native SQL processor that allocated buffer is too small.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLUNKNOWNTYPE">
            <summary> 
            The type is unknown. The name of the table or database class specified in the query is unknown and cannot be matched to a database type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLUNKNOWNCOLUMN">
            <summary> 
            The column is unknown. The name of the column or property specified in the query is unknown and cannot be matched to a database column.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLAMBIGUOUSTYPE">
            <summary> 
            The type is ambiguous. The name of the table or database class specified in the query matches several database types.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSQLCOLUMNTYPEMISMATCH">
            <summary> 
            Type of column value does not match actual column type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRRANGE">
            <summary> 
            Range error: value cannot be converted without loss.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDSTATEMENT">
            <summary> 
            Given SQL statement is of unexpected type. Another API function should be called.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMETADATAHASNTBEENCREATED">
            <summary> 
            Meta-data hasn&#39;t been created or created incompletely for this database.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONSTRAINTVIOLATIONABORT">
            <summary> 
            A transaction was aborted because a constraint was violated.
            </summary>
            <remarks>
            A constraint violation is most likely caused by a bug, restarting a transaction that&#39;s aborted for this reason is therefore not advisable since it&#39;s very likely that the same error will occur again and again each time the transaction commits.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONCONFLICTABORT">
            <summary> 
            A transaction was aborted because it was in conflict with another transaction.
            </summary>
            <remarks>
            Accessing an object that has been deleted before the transaction started could also cause the current transaction to abort because of a perceived conflict. This can happen if an object is accessed within another transaction then the transaction the object was fetched in and the object at that time has been deleted. The reason for this is that the database engine can&#39;t determine when the object was deleted and therefore assumes that the object existed when the transaction started because of the assumption that the reference was fetched within the current transaction. To avoid this one should only access objects fetched within the context of the current transaction is possible.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERROUTOFMEMORYABORT">
            <summary> 
            The transaction was aborted because of a failure to allocate memory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDOBJECTACCESSABORT">
            <summary> 
            The transaction was aborted because of an invalid object access.
            </summary>
            <remarks>
            <para>Occurs when transaction attempts to access an object that isn&#39;t accessible from the specific transaction. </para>
            <para>This could mean that the object either didn&#39;t exist when the transaction started, was deleted within the scope of the transaction or was created within the scope of another transaction not yet committed. </para>
            <para>It could also mean that the referenced object isn&#39;t accessible to the current transaction because it belongs to another container. </para>
            <para>Simple read operations that fails because of an invalid object access does not abort the transaction but instead generates a ScErrInvalidObjectAccess error. error. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSCHEMACODEMISMATCHABORT">
            <summary> 
            The transaction was aborted because pending writes didn&#39;t match the schema.
            </summary>
            <remarks>
            Occurs when for example a string attribute was written to as an integer. Should not occur unless there is a problem with the binding.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRINCONSISTENTCODEABORT">
            <summary> 
            The transaction was aborted because code is inconsistent.
            </summary>
            <remarks>
            Occurs when for example an attribute is written as an attribute of a certain type and later read or written as an attribute of a different type.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRPROTOTYPEDELETEABORT">
            <summary> 
            The transaction was aborted because of an attempt to delete a prototype.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROUTOFFILESTORAGEABORT">
            <summary> 
            The transaction was aborted because of a failure to allocate file storage space.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROUTOFSHAREDSTORAGEABORT">
            <summary> 
            The transaction was aborted because of a failure to allocate shared storage memory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPINTERNALERRORABORT">
            <summary> 
            The transaction was aborted because of an unexpected internal error.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCODECONSTRVIOLATIONABORT">
            <summary> 
            The transaction was aborted because code constraint violation. That is, the calling code did something is wasn&#39;t supposed to.
            </summary>
            <remarks>
            This is most likely due to a bug in database binding, not in user code.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERROUTOFLOGSPACEABORT">
            <summary> 
            The transaction was aborted because space could not be allocated for the transaction log entry.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERROUTOFLOGMEMORYABORT">
            <summary> 
            The transaction was aborted because of a failure to allocate transaction log buffer space.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERREXTERNALABORT">
            <summary> 
            The transaction has been aborted by the framework because of an external event that suggested that the transaction should be considered invalid.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNOTASYSTEMTRANSACTIONABORT">
            <summary> 
            Transaction was aborted because of an attempt by a non-system transaction to update a system table.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMEMORYLIMITREACHEDABORT">
            <summary> 
            The transaction was aborted because limit reached on limited memory resource.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDOPERATIONABORT">
            <summary> 
            The transaction was aborted because an invalid operation attempted left the transaction in an inconsistent state.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTRANSACTIONMERGEDABORT">
            <summary> 
            The transaction was aborted after being merged into another transaction.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRRECORDTOOLARGEABORT">
            <summary> 
            The transaction was aborted because record generated exeeded the maximum allowed record size.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRLAYOUTLIMITREACHEDABORT">
            <summary> 
            The transaction was aborted because of an attempt to create a new record layout while the limit of the number of record layouts had been reached.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINDEXLIMITREACHEDABORT">
            <summary> 
            The transaction was aborted because of an attempt to create a new index while the limit of the number of indexes had been reached.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSETINDEXLIMITREACHEDABORT">
            <summary> 
            The transaction was aborted because of an attempt to create a new index while the limit of the number of indexes on the specific set had been reached.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTMAINTAINSNAPSHOTABORT">
            <summary> 
            The transaction was aborted because the snapshot the transaction was referencing couldn&#39;t be maintained.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSERVERNOTFOUND">
            <summary> 
            A server with the specified identity was not found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASENOTFOUND">
            <summary> 
            A database with the specified name was not found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSERVERNOTRUNNING">
            <summary> 
            The administrator server is not running.
            </summary>
            <remarks>
            <para>This error is used when a management client, such as star.exe, can not communicate properly with the admin server and decide it is because the admin server process is not running. </para>
            <para>See also: ScErrServerNotAvailable </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTSTARTDATABASE">
            <summary> 
            Attempting to start the database failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTDELETEMAINTENANCEDIR">
            <summary> 
            When recovering a previous, not finished maintenance operation, the maintenance directory could not be deleted.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTDELETEJOURNALWHENFILES">
            <summary> 
            When recovering a previous, not finished maintenance operation, the server refused to delete the maintenance journal because there were still files in the maintenance directory.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASEENGINETERMINATED">
            <summary> 
            The server detected that the user code host executable (sccode.exe) unexpectedly terminated during a management operation.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUPDATEFAILEDTOUNLOAD">
            <summary> 
            When the server tried to unload the database during a code library update, unloading failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUPDATEFAILED">
            <summary> 
            Failed to update the database user code library.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUPDATEFAILEDTOCREATEFILES">
            <summary> 
            The server failed to create new database files during a code library update.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSERVERCOMMANDFAILED">
            <summary> 
            The operation &quot;{0}&quot; failed.
            </summary>
            <remarks>
            <para>This error is used as a general error for all server commands that don&#39;t provide a custom, more specific one. </para>
            <para>Example message when expanded: &quot;The operation &quot;Starting database &#39;MyDatabase&#39;&quot; failed.&quot;. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASEDELETEFAILED">
            <summary> 
            Failed to delete the database.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASENOTSTOPPED">
            <summary> 
            {0} failed because the database was not stopped.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWRONGDATABASEENGINECONFIG">
            <summary> 
            The database configuration specified a database engine not part of the configured engines known by the server.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCONFENGINEEXENOTFOUND">
            <summary> 
            The engine executable file was not found in the location as specified in the servers engine configuration.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDCOMMANDEXCEPTION">
            <summary> 
            {0} failed due to an unexpected problem.
            </summary>
            <remarks>
            <para>The server detected that a command failed with an exception that was not an exception based on a Starcounter error code (and hence unexpected). The exception details are logged along with this error. </para>
            <para>Example message when expanded: &quot;Starting database &#39;MyDatabase&#39; failed due to an unexpected problem&quot;. </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCODEHOSTPROCESSREFUSEDSTOP">
            <summary> 
            When asked to shut down, the user code process actively refused it.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCODEHOSTPROCESSNOTEXITED">
            <summary> 
            When asked to shut down, the user code process agreed to shut down, but the process didn&#39;t exit gracefully in time.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERREXECUTABLENOTFOUND">
            <summary> 
            The executable file cound not be found.
            </summary>
            <remarks>
            Error used mainly by the server library when asked to run an executable and the executable file could not be found where specified. The error message should include the full path used (if possible).
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRSERVERNOTAVAILABLE">
            <summary> 
            Unable to communicate with the administrator server.
            </summary>
            <remarks>
            <para>This error is used when a management client, such as star.exe, can not communicate properly with the admin server and the exact reason why doesn&#39;t map one to one to any other, more specific Starcounter error (such as ScErrServerNotRunning). </para>
            <para>When constructing and logging/showing an error message based on this code, make sure to supply more low-level, detailed info such as socket level error codes, etc, to make support for this easier. </para>
            <para>See also: ScErrServerNotRunning </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRNETWORKGATEWAYTERMINATED">
            <summary> 
            The server detected that the network gateway executable (scnetworkgateway.exe) unexpectedly terminated.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRIPCMONITORTERMINATED">
            <summary> 
            The server detected that the interprocess monitor executable (scipcmonitor.exe) unexpectedly terminated.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOMMANDPRECONDITIONFAILED">
            <summary> 
            The server detected a precondition that was not met; the command was therefore not executed.
            </summary>
            <remarks>
            This error allows server command processors to report about a condition failing to be met based on a given fingerprint. The server design for fingerprint matching is closely related and largely influenced by the HTTP Etag- and conditional invocation concepts and hence, this error can be considered the equivivalent to HTTP status 412.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASEENGINENOTRUNNING">
            <summary> 
            The database engine is not running.
            </summary>
            <remarks>
            Indicates a management operation was attempted but could not succeed because the database engine was not running, as expected too.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERREXECUTABLEALREADYRUNNING">
            <summary> 
            The executable is already running.
            </summary>
            <remarks>
            Indicates an executable is already loaded in a certain database engine and that state was considered worth reporting as an error.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERREXECUTABLENOTRUNNING">
            <summary> 
            The executable is not running.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBPROCNOTSIGNALING">
            <summary> 
            The database data process, when started, didn&#39;t signal it was operational in time.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDBPROCTERMINATED">
            <summary> 
            The server detected that the database data process unexpectedly terminated during a management operation.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRENGINEPROCFAILEDSTART">
            <summary> 
            The database engine process failed to start due to an unexpected internal error. The full error detail can be found in the server log.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDELETEDBRENAMECONFIG">
            <summary> 
            Failed to rename the database configuration file when asked to delete the database.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABASERUNNING">
            <summary> 
            The database is running.
            </summary>
            <remarks>
            Indicates a management operation was attempted but could not succeed because the database was running. The operation might succeed if the database is first stopped, and the operation is issued again.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDELETEDBFILESPOSTPONED">
            <summary> 
            At least one database-related file could not be deleted. Deleting will be retried until it succeeds or is cancelled.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAUTOREPORTFAILEDCOLLECT">
            <summary> 
            Failed to collect reported error notifications from the notification file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAUTOREPORTFAILEDSEND">
            <summary> 
            Failed to send a set of collected reported error notifications.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMISSINGAPPLICATIONNAME">
            <summary> 
            The name of the application was not specified.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPLICATIONALREADYRUNNING">
            <summary> 
            An application with the given name is already running.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPLICATIONNOTRUNNING">
            <summary> 
            No application with the given name is running.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSERVERNOTSIGNALING">
            <summary> 
            The admin server is taken longer than normal to start; it didn&#39;t signal it was ready in time.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPLICATIONNOTANEXECUTABLE">
            <summary> 
            The application is not an executable.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRPROCESSEXITCODENOTAVAILABLE">
            <summary> 
            The exit code of the terminating process was not available.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTOOMANYDATABASES">
            <summary> 
            Creating a new database failed. The maximum number of databases that can coexist on a given server have been reached.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRFILEININSTALLATIONNOTFOUND">
            <summary> 
            Unable to find file expected to be part of installation.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRHOSTPROCESSNOTRUNNING">
            <summary> 
            The specified code host process is not running.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERVS2010NOTFOUND">
            <summary> 
            Visual Studio 2010 is not found in the system. This component is required by Starcounter Visual Studio 2010 developer&#39;s integration.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERVSTUDIOISRUNNING">
            <summary> 
            One or more instances of Microsoft Visual Studio (devenv.exe) are running. Please shut them down and press OK.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERDXORVIDEOCARD">
            <summary> 
            Proper Microsoft DirectX version is not installed in the system. This component is required by Starcounter activity monitor component.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERDXDIAGPROBLEM">
            <summary> 
            DirectX diagnostic utility has exited with the error code.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERCORRUPTEDSETUPFILE">
            <summary> 
            Can&#39;t read keys from INI settings file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERCANTREADSETTINGVALUE">
            <summary> 
            Can&#39;t read value from INI settings file for a certain key.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERVSSAFEIMPORTSREGISTRY">
            <summary> 
            Can&#39;t access the Visual Studio safe imports path in the registry. This component is required by Starcounter Visual Studio integration.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERSETUPVSINTEGRATION">
            <summary> 
            The Visual Studio integration setup returned an error.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERVSTUDIO2008">
            <summary> 
            Running Visual Studio 2008 for Starcounter integration installation has failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERREGEDIT">
            <summary> 
            Running regedit for Starcounter integration installation has failed.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERPROCESSTIMEOUT">
            <summary> 
            One of the processes was not finished within allowed time interval.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERFIREWALLEXCEPTION">
            <summary> 
            Problem adding Windows Firewall exception.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERWRONGSERVERSNUMBER">
            <summary> 
            The number of installed servers differs from expected. Please properly uninstall previous Starcounter instance before starting a new installation.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERABORTED">
            <summary> 
            Installation process has been aborted.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERINTERNALPROBLEM">
            <summary> 
            General installer internal exception type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERPROCESSWRONGERRORCODE">
            <summary> 
            One of the external processes didn&#39;t exit with correct exit code.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERPROCESSTASKNOTACCOMP">
            <summary> 
            One of the external processes didn&#39;t accomplish the indended task.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERVS2010NOTINITIALIZED">
            <summary> 
            The Visual Studio 2010 IDE was never initialized. Please start Visual Studio once before you install.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERALREADYSTARTED">
            <summary> 
            Another Starcounter setup instance is running.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRVSIXENGINENOTFOUND">
            <summary> 
            The installer could not find the VSIX installer engine executable.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRVSIXPACKAGENOTFOUND">
            <summary> 
            The installer could not find the VSIX deployment package.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRVSIXENGINECOULDNOTSTART">
            <summary> 
            The installer failed to launch the VSIX installer engine.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRVSIXENGINETIMEDOUT">
            <summary> 
            The VSIX installer engine did not complete in time.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRVSIXENGINEFAILED">
            <summary> 
            The VSIX installer engine failed to install or uninstall the deployment package.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERVS2012NOTFOUND">
            <summary> 
            Visual Studio 2012 is not installed. This component is required by Starcounter Visual Studio 2012 developer&#39;s integration.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINSTALLERSAMEDIRECTORIES">
            <summary> 
            At least two components have equal installation directories. All components should be installed in different directories.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNABLETODEPLOYMENT">
            <summary> 
            Unable to deploy code library. The code library could not be deployed due to previous problems.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRUNEXPECTEDDEPLOYMENTEXCEPT">
            <summary> 
            Unable to deploy code library. The code library could not be deployed due to an unexpected condition. Please restart Visual Studio using the /log switch or consult the help link to find additional help.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCODELIBARYPATHNOSET">
            <summary> 
            Can&#39;t find code library file. The path to the code library archive was not set. Check your projects &quot;ScArchive&quot;-related properties or consult the help link to find additional help.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCODELIBARYFILENOTFOUND">
            <summary> 
            Can&#39;t find code library file. The path to the code library archive referenced a file that was not found. Check your projects &quot;ScArchive&quot;-related properties or consult the help link to find additional help.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWRONGCODELIBARYEXTENSION">
            <summary> 
            Can&#39;t find code library file. The path to the code library archive referenced a file type not supported. Check your projects &quot;ScArchiveExtension&quot; property or consult the help link to find additional help.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCODELIBINPUTDIRNOTFOUND">
            <summary> 
            The input directory does not exist.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCODELIBFAILEDNEWCACHEDIR">
            <summary> 
            The cache directory could not be created.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRWEAVERFILENOTFOUND">
            <summary> 
            The specified file seem not to exist.
            </summary>
            <remarks>
            Occurs when the weaver executable is given a file that can not be found.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRWEAVERFILENOTSUPPORTED">
            <summary> 
            The specified files extension is not supported.
            </summary>
            <remarks>
            Occurs when the weaver executable is given a file with an extension that is not supported.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDEBUGFAILEDCONNECTTOSERVER">
            <summary> 
            Debugging the executable failed because Visual Studio was unable to connect to the server (a.k.a Starcounter Administrator). Usually indicates that the server is not running.
            </summary>
            <remarks>
            Occurs when the Visual Studio extension runs the debugging sequence, in order to debug a Starcounter module, and the server (i.e. Starcounter Administrator) does not answer to the request being sent over the pipe. Usually indicates that the server is not running.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDEBUGFAILEDSERVERERRORSTARTING">
            <summary> 
            Debugging the executable failed because the server (a.k.a Starcounter Administrator) returned an error when trying to run the code. Consult the server log for more detailed information.
            </summary>
            <remarks>
            Occurs when the Visual Studio extension runs the debugging sequence, in order to debug a Starcounter module, and the server (i.e. Starcounter Administrator) reports an error in response to the request to weave and host the module inside the user code process.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDEBUGFAILEDREPORTED">
            <summary> 
            The debug sequence failed. Consult the Visual Studio error list for more information.
            </summary>
            <remarks>
            Used internally to communicate the failure of the debug sequence using an exception. Indicates the debug sequence has failed, but that the raising component has logged detailed error messages to the error list and hence, no such action must be taken by the catching party.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDEBUGGERALREADYATTACHED">
            <summary> 
            Unable to attach a debugger to the code host process. A debugger is already attached.
            </summary>
            <remarks>
            Indicates the debugging of a Starcounter application failed b/c attaching the debugger was not possible, since a debugger was already attached to the database code host process the about-to-be-debugged application targets.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDEBUGDBHIGHERPRIVILEGE">
            <summary> 
            Unable to attach the debugger to the database process because the database runs with a higher privilege than Visual Studio.
            </summary>
            <remarks>
            To resolve this, either restart Visual Studio and run it as an administrator, or make sure the database runs in non-elevated mode.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDEBUGNODBPROCESS">
            <summary> 
            Unable to attach the debugger to the database process because the database process was not found.
            </summary>
            <remarks>
            This indicate the database process terminated in between it was started and when Visual Studio tried attaching a debugger to it.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRDEBUGSEQUENCEFAILUNEXPECT">
            <summary> 
            The debugging sequence failed with an unexpected error. Consult the Visual Studio activity log for additional information.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBINARYNOTFOUNDWHENDEBUG">
            <summary> 
            Could not find the executable file to run. Is the project configured to build?
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCLITEMPLATENOTFOUND">
            <summary> 
            A source code template with the specified name could not be found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPDEPLOYEDEDITIONLIBRARY">
            <summary> 
            At least one file considered a Starcounter edition library was found locally deployed with an application, i.e. residing in the same directory as the application file.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCANTACCESSAPPRESOURCEDIR">
            <summary> 
            Specified application resource directory is not accessible. Please check it existence and correct access rights.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPRESOURCEDIRISONNETWORKDRIVE">
            <summary> 
            Seems that specified application resource directory is mapped to a network drive.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONWITHCONSTRUCTOR">
            <summary> 
            Typed JSON code-behind classes does not support custom instance constructors.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONMAPPEDMORETHANONCE">
            <summary> 
            The code-behind class defines multiple mapping attributes.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONROOTHASCUSTOMMAPPING">
            <summary> 
            The code-behind class is named as the root JSON object, but also define a mapping.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONCLASSNOTPARTIAL">
            <summary> 
            Typed JSON code-behind classes must be partial.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONCLASSISGENERIC">
            <summary> 
            Typed JSON code-behind classes can not be generic.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONWITHMULTIPLEROOTS">
            <summary> 
            Found more than once code-behind class that was mapped to the root JSON object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONSTATICINPUTHANDLER">
            <summary> 
            Input handler methods can not be static.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONABSTRACTINPUTHANDLER">
            <summary> 
            Input handler methods can not be abstract.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONINPUTHANDLERBADPARAMETERCOUNT">
            <summary> 
            The input handler has to many parameters.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONINPUTHANDLERGENERIC">
            <summary> 
            Input handler methods can not be generic.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONINPUTHANDLERREFPARAM">
            <summary> 
            Input handler parameter should not be defined as a reference (ref) parameter.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONINPUTHANDLERNOTVOID">
            <summary> 
            Input handler methods must have void return type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONINVALIDINSTANCETYPEASSIGNMENT">
            <summary> 
            Assignment of instancetype for a TypedJSON member must follow the pattern: &#39;DefaultTemplate.{memberpath}.InstanceType = typeof({type});&#39;.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONUNSUPPORTEDINSTANCETYPEASSIGNMENT">
            <summary> 
            Unsupported assignment of instancetype.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONDUPLICATEREUSE">
            <summary> 
            Reuse of a TypedJSON object is specified both in the json file and code-behind. The value from code-behind will be used.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONDUPLICATENAMESPACE">
            <summary> 
            Namespace is specified both in the json file and code-behind. The value from code-behind will be used.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONAMBIGUOUSDATATYPEIEXPLICITBOUND">
            <summary> 
            A datatype specified as a generic parameter for IExplicitBound interface is ambiguous. Please use the fully qualified name including namespace.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONINVALIDBINDASSIGNMENT">
            <summary> 
            Assignment of binding for a TypedJSON member must follow the pattern: &#39;DefaultTemplate.{memberpath}.Bind = &quot;{binding-path}&quot;;&#39;.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRREQUESTONUNREGISTEREDURI">
            <summary> 
            HTTP request made on unregistered URI.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRPARSINGMETHODANDURI">
            <summary> 
            Error while parsing HTTP method and URI.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRHANDLERALREADYREGISTERED">
            <summary> 
            This handler has already been registered.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRHANDLERNOTFOUND">
            <summary> 
            This given handler is not found.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBADGATEWAYCONFIG">
            <summary> 
            Gateway configuration is invalid.
            </summary>
            <remarks>
            The gateway configuration file doesn&#39;t exist, isn&#39;t accessible or isn&#39;t formatted correctly.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRNETWORKPORTISOCCUPIED">
            <summary> 
            Gateway tried to bind a socket on network port that is occupied.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRNETWORKGATEWAYALREADYRUNNING">
            <summary> 
            An instance of network gateway is already running.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPSHTTPPARSERINCOMPLETEHEADERS">
            <summary> 
            HTTP request has incomplete headers.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRAPPSHTTPPARSERINCORRECT">
            <summary> 
            HTTP contains incorrect data.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONPROPERTYNOTFOUND">
            <summary> 
            The property is not defined in the template.
            </summary>
            <remarks>
            Error code used when parsing a Json document against a well-defined template and a given property name is not found in the template.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONVALUEWRONGTYPE">
            <summary> 
            The value does not correspond to the template property type.
            </summary>
            <remarks>
            Error code used when parsing a Json document against a well-defined template and a given property value is not valid according to the type of the property. For example, when doing &quot;Name&quot;:false and &quot;Name&quot; is a string.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONUNEXPECTEDENDOFCONTENT">
            <summary> 
            End of content reached unexpectedly
            </summary>
            <remarks>
            Error code used when populating a typed json object using plain json as input and the end of the content is reached before the end of the json.
            </remarks>
        </member>
        <member name="F:Starcounter.Error.SCERRCREATEDATABINDINGFORJSON">
            <summary> 
            Cannot create binding between typed json and dataobject.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINVALIDJSONFORINPUT">
            <summary> 
            Invalid json found when populating an typed json object.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMISSINGDATATYPEBINDINGJSON">
            <summary> 
            Cannot create binding between typed json and dataobject. The datatype needs to be specified.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDUPLICATEDATATYPEJSON">
            <summary> 
            Datatype cannot be specified in the json file if a code-behind class exists. The datatype needs to be set as generic argument on the inheritance on the class.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSESSIONJSONNOTROOT">
            <summary> 
            The json is not a rootobject (have no parent) and cannot be used as sessiondata.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRJSONSETONOTHERSESSION">
            <summary> 
            The json is already connected to another session.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATABINDINGFORJSONEXCEPTION">
            <summary> 
            An exception occurred when a databinding for a property in json was used.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRBASETYPENOTFOUND">
            <summary> 
            There is no type in the database for the given base type name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDATATYPENOTFOUND">
            <summary> 
            There is no type in the database for the given column data type name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTYPENOTFOUND">
            <summary> 
            There is no type in the database for the given type name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTYPECOLUMNNOTFOUND">
            <summary> 
            There is no column in the database for the given type and column name.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINDEXNOTFOUNDINTYPE">
            <summary> 
            There is no given index in the database for the given type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRDROPTYPENOTEMPTY">
            <summary> 
            Type cannot be dropped, since it is not empty.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMETALAYERBUFFERTOOSMALL">
            <summary> 
            Internal metalayer buffer is too small.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOLUMNSARENTUNIQUE">
            <summary> 
            Column definitions aren&#39;t unique.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRSCHEMASDONOTMATCH">
            <summary> 
            Schema of given type does not match with schema of the existing type.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRMETASCHEMAVERSIONMISMATCH">
            <summary> 
            The version of the metaschema in the database does not match the metaschema version in Starcounter&#39;s binary.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRINDEXEXISTSONCOLUMN">
            <summary> 
            The column is a part of an index.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTABLEISREFERENCED">
            <summary> 
            There are references to the table.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRTABLEHASCHILDREN">
            <summary> 
            There are tables inheriting this table.
            </summary>
        </member>
        <member name="F:Starcounter.Error.SCERRCOLUMNISMAPPED">
            <summary> 
            There is a mapped property on this column.
            </summary>
        </member>
        <member name="T:Starcounter.Scheduler">
            <summary>
            Class Scheduler
            </summary>
        </member>
        <member name="F:Starcounter.Scheduler._instances">
            <summary>
            The _instances
            </summary>
        </member>
        <member name="F:Starcounter.Scheduler._lastErrorMessages">
            <summary>
            The _last error messages
            </summary>
        </member>
        <member name="F:Starcounter.Scheduler._globalCache">
            <summary>
            The _global cache
            </summary>
        </member>
        <member name="P:Starcounter.Scheduler.GlobalCache">
            <summary>
            Gets the global cache.
            </summary>
            <value>The global cache.</value>
        </member>
        <member name="F:Starcounter.Scheduler.InvalidateLock">
            <summary>
            The invalidate lock
            </summary>
        </member>
        <member name="F:Starcounter.Scheduler._sqlEnumCache">
            <summary>
            The _SQL enum cache
            </summary>
        </member>
        <member name="P:Starcounter.Scheduler.SqlEnumCache">
            <summary>
            Gets the SQL enum cache.
            </summary>
            <value>The SQL enum cache.</value>
        </member>
        <member name="F:Starcounter.Scheduler.PrologSession">
            <summary>
            The Prolog session
            </summary>
        </member>
        <member name="P:Starcounter.Scheduler.Id">
            <summary>
            Global id of this scheduler.
            </summary>
        </member>
        <member name="F:Starcounter.Scheduler.NrOpenIterators">
            <summary>
            Keeps track of number of open kernel iterators
            </summary>
        </member>
        <member name="M:Starcounter.Scheduler.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Scheduler" /> class.
            </summary>
            <param name="schedId">The scheduler ID.</param>
        </member>
        <member name="M:Starcounter.Scheduler.GetInstance(System.Boolean)">
            <summary>
            Gets the instance.
            </summary>
            <param name="nullIfNotAttached">The null if not attached.</param>
            <returns>Scheduler.</returns>
        </member>
        <member name="M:Starcounter.Scheduler.GetInstance">
            <summary>
            Gets the instance.
            </summary>
            <returns>Scheduler.</returns>
        </member>
        <member name="M:Starcounter.Scheduler.GetInstance(System.Byte)">
            <summary>
            Gets the instance.
            </summary>
            <param name="cpuNumber">The scheduler ID.</param>
            <returns>Scheduler.</returns>
        </member>
        <member name="M:Starcounter.Scheduler.Setup(System.Byte)">
            <summary>
            Setups the specified CPU count.
            </summary>
            <param name="cpuCount">The cpu count.</param>
        </member>
        <member name="M:Starcounter.Scheduler.AddErrorMessage(System.String)">
            <summary>
            Adding new error message.
            Mutually exclusive.
            </summary>
            <param name="errorMsg">The error MSG.</param>
        </member>
        <member name="M:Starcounter.Scheduler.GetErrorMessages">
            <summary>
            Fetches all error messages into one big string.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="P:Starcounter.Scheduler.SchedulerCount">
            <summary>
            Gets the scheduler count.
            </summary>
            <value>The scheduler count.</value>
        </member>
        <member name="M:Starcounter.Scheduler.InvalidateCache(System.UInt64)">
            <summary>
            Invalidates global cache, local cache of this scheduler and sets to invalidate local caches of other schedulers
            </summary>
            <param name="generation">The generation.</param>
        </member>
        <member name="T:Starcounter.ThreadData">
            <summary>
            This class represents the context of the thread that is
            scheduled for execution by a virtual processor (VPContext).
            Every thread holds an independent instance of this class.
            </summary>
        </member>
        <member name="F:Starcounter.ThreadData.Current">
            <summary>
            The current
            </summary>
        </member>
        <member name="F:Starcounter.ThreadData.inTransactionScope_">
            <summary>
            Indicates if the thread is in a transaction scope.
            </summary>
            <remarks>
            While transaction is in a transaction scope then application code is
            not allowed to switch current transaction on the thread.
            </remarks>
        </member>
        <member name="M:Starcounter.ThreadData.GetCurrentIfAttachedAndReattachIfAutoDetached">
            <summary>
            Gets the current if attached and reattach if auto detached.
            </summary>
            <returns>ThreadData.</returns>
        </member>
        <member name="F:Starcounter.ThreadData.Scheduler">
            <summary>
            The scheduler
            </summary>
        </member>
        <member name="F:Starcounter.ThreadData._pStateShare">
            <summary>
            The _p state share
            </summary>
        </member>
        <member name="M:Starcounter.ThreadData.#ctor(System.Byte,System.UInt32*)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.ThreadData" /> class.
            </summary>
            <param name="schedulerNumber">The scheduler number.</param>
            <param name="pStateShare">The p state share.</param>
        </member>
        <member name="T:Starcounter.Legacy.BoundClass">
            <summary>
            Represent a user defined database class that has been bound to the
            database.
            </summary>
        </member>
        <member name="P:Starcounter.Legacy.BoundClass.Name">
            <summary>
            Gets the fully qualified name of the bound class.
            </summary>
        </member>
        <member name="P:Starcounter.Legacy.BoundClass.ShortName">
            <summary>
            Gets the short name of the bound class.
            </summary>
        </member>
        <member name="P:Starcounter.Legacy.BoundClass.RuntimeHandle">
            <summary>
            Gets the runtime handle of this bound class. The runtime handle
            can be used to instantiate/insert it effectively during runtime.
            </summary>
        </member>
        <member name="P:Starcounter.Legacy.BoundClass.BaseType">
            <summary>
            Gets the fully qualified name of the current classes base
            bound class.
            </summary>
        </member>
        <member name="P:Starcounter.Legacy.BoundClass.DynamicType">
            <summary>
            Gets the fully qualified name of the class the current bound
            class has defined as it's dynamic type.
            </summary>
        </member>
        <member name="M:Starcounter.Legacy.BoundClass.GetClass(System.String)">
            <summary>
            Retrive a <see cref="T:Starcounter.Legacy.BoundClass"/> instance based on a fully
            qualified name identifier.
            </summary>
            <param name="identifier">Fully qualified name.</param>
            <returns>Instance representing the name.</returns>
        </member>
        <member name="M:Starcounter.Legacy.BoundClass.GetClasses(System.String[],System.Func{Starcounter.Legacy.BoundClass,System.Boolean})">
            <summary>
            Retreive a set of <see cref="T:Starcounter.Legacy.BoundClass"/> instances based on a
            set of fully qualified name identifiers.
            </summary>
            <param name="identifiers">Fully qualified identifiers</param>
            <param name="filter">Optional filter</param>
            <returns>A set of <see cref="T:Starcounter.Legacy.BoundClass"/> instances</returns>
        </member>
        <member name="T:Starcounter.Legacy.LegacyHostExtensions">
            <summary>
            Host extension methods for legacy applications that need to
            access a legacy context.
            </summary>
        </member>
        <member name="M:Starcounter.Legacy.LegacyHostExtensions.GetLegacyContext(Starcounter.Application)">
            <summary>
            Gets the legacy context of the given application.
            </summary>
            <param name="application">The application.</param>
            <returns>A <see cref="T:Starcounter.Legacy.LegacyContext"/> for the given
            application.</returns>
        </member>
        <member name="M:Starcounter.Legacy.LegacyRuntimeSupport.New(System.Int32)">
            <summary>
            Watch out: this is legacy support, intended to be used by those
            that know how. Focus is performance, no validations occur! Passing
            a bad argument has undefined behaviour.
            </summary>
            <param name="runtimeClassHandle">Runtime handle retreived from legacy layer
            </param>
            <returns>New instance</returns>
        </member>
        <member name="M:Starcounter.Legacy.LegacyRuntimeSupport.New(System.Object)">
            <summary>
            Watch out: this is legacy support, intended to be used by those
            that know how. Focus is performance, no validations occur. Passing
            a bad argument has undefined behaviour.
            </summary>
            <param name="runtimeProxyTemplate">Template proxy</param>
            <returns>New instance</returns>
        </member>
        <member name="T:Starcounter.Metadata.MetadataEntity">
            <summary>
            Defines a base class used by all generated metadata classes.
            </summary>
        </member>
        <member name="M:Starcounter.Metadata.MetadataEntity.#ctor(Starcounter.Internal.Uninitialized)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Metadata.MetadataEntity.#ctor(System.UInt16)">
            <summary>
            Defines the constructor that instantiate all metadata types
            in the database.
            </summary>
            <param name="tableHandle">The table handle representing the type to
            insert.</param>
        </member>
        <member name="T:Starcounter.HtmlFromJsonProvider">
            <summary>
            Built-in MIME provider that react to conversions of Json resources into
            HTML by investigating the JSON (view model) for a property referencing a
            static file, and provide the content of that file via internal request.
            </summary>
        </member>
        <member name="P:Starcounter.HtmlFromJsonProvider.IgnoreJsonWithoutHtml">
            <summary>
            Gets or sets a value relaxing the provider to ignore any resource that
            does not expose a property referencing HTML. The default is <c>false</c>,
            and in such case, the provider will raise an error on any resource that
            miss a property referencing a HTML view path.
            </summary>
        </member>
        <member name="M:Starcounter.HtmlFromJsonProvider.#ctor">
            <summary>
            Initialize a new <see cref="T:Starcounter.HtmlFromJsonProvider"/> instance.
            </summary>
        </member>
        <member name="T:Starcounter.IMiddleware">
            <summary>
            Abstraction that allow middleware to be wrapped up in classes and
            registered by applications to customize the request pipeline.
            </summary>
        </member>
        <member name="M:Starcounter.IMiddleware.Register(Starcounter.Application)">
            <summary>
            Registers the current middleware.
            </summary>
            <remarks>
            Invoking this method should preferably done by the code host. Hence,
            as an advice to implementors of this interface, we recommend implementing
            it explicitly.
            </remarks>
            <param name="application">The application enabling the current
            middleware.</param>
        </member>
        <member name="T:Starcounter.JsonAutoSessions">
            <summary>
            Middleware that, when installed, make sure that when HTML is
            requested and the handler respond with JSON, the JSON instance
            returned is attached to a (patching) session if it's not
            already.
            </summary>
        </member>
        <member name="T:Starcounter.MimeProvisionDelegate">
            <summary>
            Defines the signature of a MIME providers provision method.
            </summary>
            <param name="context">The context passed to the method.</param>
            <param name="next">The next provider in the chain.</param>
        </member>
        <member name="T:Starcounter.MimeProvider">
            <summary>
            Support custom mime providers to be installed as middleware, affecting the
            request pipeline for an application by governing in the convertion from a
            resource into a certain MIME representation.
            </summary>
            <remarks>Currently, installed MIME providers are activated and invoked only
            when the cargo is based on Json. This is an implementation detail though, and
            we recommend all custom providers not to assume this as it will likely change
            eventually.
            </remarks>
        </member>
        <member name="P:Starcounter.MimeProvider.MimeType">
            <summary>
            Gets the MIME type of this provider.
            </summary>
        </member>
        <member name="M:Starcounter.MimeProvider.For(System.String,Starcounter.MimeProvisionDelegate)">
            <summary>
            Creates an <see cref="T:Starcounter.IMiddleware"/> abstraction representing a mime provider
            backed by the given <paramref name="provisioner"/> delegate.
            </summary>
            <param name="mimeType">The MIME type this provider shall handle.</param>
            <param name="provisioner">The provisioner method.</param>
            <returns>An instance of the provider that can be installed as middleware.
            </returns>
        </member>
        <member name="M:Starcounter.MimeProvider.Html(Starcounter.MimeProvisionDelegate)">
            <summary>
            Provide a simple way to create a MIME type provider for "text/html".
            </summary>
            <param name="provisioner">The provisioner method.</param>
            <returns>An instance of the provider that can be installed as middleware.
            </returns>
        </member>
        <member name="T:Starcounter.MimeProviderContext">
            <summary>
            Context passed to installed MIME providers.
            </summary>
        </member>
        <member name="F:Starcounter.MimeProviderContext.Request">
            <summary>
            Gets the originating request.
            </summary>
        </member>
        <member name="F:Starcounter.MimeProviderContext.Resource">
            <summary>
            Gets the resource returned from the handler.
            </summary>
        </member>
        <member name="P:Starcounter.MimeProviderContext.Result">
            <summary>
            Gets or sets the result of this or any previous provider.
            </summary>
        </member>
        <member name="P:Starcounter.MimeProviderContext.ProvidersInvoked">
            <summary>
            Gets the number of providers invoked in this chain.
            </summary>
            <remarks>Providers consulting this value from within the handler
            should be aware it illustrate how many providers BEFORE the current
            one has been invoked. Hence, the count for the entire request chain
            is not established until AFTER the last provider has been invoked.
            </remarks>
        </member>
        <member name="T:Starcounter.MimeProviderMap">
            <summary>
            Map of installed MIME providers. Governs thread-safe registration and
            lock-free consumption of MIME providers.
            </summary>
        </member>
        <member name="T:Starcounter.MimeProviderMap.Node">
            <summary>
            The representation we keep of any provider once it's installed (i.e
            when Use() is invoked).
            </summary>
        </member>
        <member name="M:Starcounter.MimeProviderMap.Install(Starcounter.MimeType,Starcounter.MimeProvisionDelegate)">
            <summary>
            Installs the given provisioner as a provider of the specified
            MIME type.
            </summary>
            <param name="type">The MIME type <paramref name="target"/> can
            provide.</param>
            <param name="target">The provisioner</param>
        </member>
        <member name="T:Starcounter.PartialToStandaloneHtmlProvider">
            <summary>
            For any HTTP request with `Accept: text/html` with a response that is HTML,
            checks if the HTML document is a partial (does not start with a doctype).
            If yes, returns an implicit HTML template that contains code to bootstrap 
            a PuppetJs connection instead of that HTML. 
            
            The HTML template cointans the session URL that was returned from the handler, 
            so that PuppetJs can request the relevant Json in a following request.
            
            Must be used after `HtmlFromJsonProvider` middleware.
            
            A custom HTML template can be provided as a string parameter to the constructor.
            
            Middleware only wraps requests that have a HTTP handler. Since this middleware
            wraps the actual response, it will also have the HTTP status code
            that was returned from the handler.
            </summary>
        </member>
        <member name="M:Starcounter.PartialToStandaloneHtmlProvider.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Starcounter.PartialToStandaloneHtmlProvider"/>
            using the predefined default template.
            </summary>
        </member>
        <member name="M:Starcounter.PartialToStandaloneHtmlProvider.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Starcounter.PartialToStandaloneHtmlProvider"/>
            using the given standalone page template.
            </summary>
        </member>
        <member name="T:Starcounter.Db">
            <summary>
            Class Db
            </summary>
        </member>
        <member name="F:Starcounter.Db.NullString">
            <summary>
            Used to represent the "null" value as a string in a uniform way.
            </summary>
        </member>
        <member name="F:Starcounter.Db.NoIdString">
            <summary>
            The no id string
            </summary>
        </member>
        <member name="F:Starcounter.Db.FieldSeparator">
            <summary>
            The field separator
            </summary>
        </member>
        <member name="M:Starcounter.Db.BinaryToHex(Starcounter.Binary)">
            <summary>
            Binaries to hex.
            </summary>
            <param name="binValue">The bin value.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Db.HexToBinary(System.String)">
            <summary>
            Hexes to binary.
            </summary>
            <param name="hexString">The hex string.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Db.SQL(System.String,System.Object[])">
            <summary>
            Returns the result of an SQL query as an Rows which implements IEnumerable.
            </summary>
            <param name="query">An SQL query.</param>
            <param name="values">The values to be used for variables in the query.</param>
            <returns>The result of the SQL query.</returns>
        </member>
        <member name="M:Starcounter.Db.SQL``1(System.String,System.Object[])">
            <summary>
            Returns the result of an SQL query as an SqlResult&lt;T&gt; which implements IEnumerable&lt;T&gt;.
            </summary>
            <typeparam name="T">The type the items in the result set should have.</typeparam>
            <param name="query">An SQL query.</param>
            <param name="values">The values to be used for variables in the query.</param>
            <returns>The result of the SQL query.</returns>
        </member>
        <member name="M:Starcounter.Db.SlowSQL(System.String,System.Object[])">
            <summary>
            Returns the result of an SQL query as an SqlResult which implements IEnumerable.
            Especially queries with expected slow execution are supported, as for example aggregations.
            </summary>
            <param name="query">An SQL query.</param>
            <param name="values">The values to be used for variables in the query.</param>
            <returns>The result of the SQL query.</returns>
        </member>
        <member name="M:Starcounter.Db.SlowSQL``1(System.String,System.Object[])">
            <summary>
            Returns the result of an SQL query as an SqlResult which implements IEnumerable.
            Especially queries with expected slow execution are supported, as for example aggregations.
            </summary>
            <param name="query">An SQL query.</param>
            <param name="values">The values to be used for variables in the query.</param>
            <returns>The result of the SQL query.</returns>
        </member>
        <member name="M:Starcounter.Db.Unload(System.String,System.UInt64,System.Boolean)">
            <summary>
            Unloads entire database into given file as set of INSERT INTO statements
            </summary>
            <param name="fileName">Path of the file were the statements are written.</param>
            <returns>Number of unloaded objects.</returns>
        </member>
        <member name="M:Starcounter.Db.Reload(System.String)">
            <summary>
            Reloads entire database by executing INSERT INTO statements from the given file.
            </summary>
            <param name="fileName">Name of the file with INSERT INTO statements.</param>
            <returns>Number of inserted objects.</returns>
        </member>
        <member name="P:Starcounter.Db.Environment">
            <summary>
            </summary>
        </member>
        <member name="P:Starcounter.Db.Applications">
            <summary>
            Gets the set of <see cref="T:Starcounter.Application"/>s currently running
            in the <see cref="T:Starcounter.Db"/>.
            </summary>
        </member>
        <member name="E:Starcounter.Db.DatabaseStopping">
            <summary>
            Occurs when the database is being stopped.
            </summary>
        </member>
        <member name="M:Starcounter.Db.LookupTable(System.String)">
            <summary>
            Gets the table definition based on the name.
            </summary>
            <param name="name">The fullname of the table.</param>
            <returns>TableDef.</returns>
        </member>
        <member name="M:Starcounter.Db.CreateTable(Starcounter.Binding.TableDef)">
            <summary>
            Creates the table.
            </summary>
            <param name="tableDef">The table def.</param>
        </member>
        <member name="M:Starcounter.Db.CreateTable(Starcounter.Binding.TableDef,Starcounter.Binding.TableDef)">
            <summary>
            Creates the table.
            </summary>
            <param name="tableDef">The table def.</param>
            <param name="inheritedTableDef">The inherited table def.</param>
        </member>
        <member name="M:Starcounter.Db.RenameTable(System.UInt16,System.String)">
            <summary>
            Renames the table.
            </summary>
            <param name="tableId">The table id.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Starcounter.Db.DropTable(System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Starcounter.Db.Transact(System.Action,System.Int32)">
            <summary>
            Executes the given <paramref name="action"/> within a new transaction.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="maxRetries">Number of times to retry the execution of the
            transaction if committing it fails because of a conflict with another
            transaction. Specify <c>int.MaxValue</c> to instruct Starcounter
            to try until the transaction succeeds. Specify 0 to disable retrying.
            </param>
        </member>
        <member name="M:Starcounter.Db.Transact``1(System.Action{``0},``0,System.Int32)">
            <summary>
            Executes the given <paramref name="action"/> within a new transaction.
            </summary>
            <typeparam name="T">The type of the parameter for the action.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="arg">Parameter to use as input to the action.</param>
            <param name="maxRetries">Number of times to retry the execution of the
            transaction if committing it fails because of a conflict with another
            transaction. Specify <c>int.MaxValue</c> to instruct Starcounter
            to try until the transaction succeeds. Specify 0 to disable retrying.
            </param>
        </member>
        <member name="M:Starcounter.Db.Transact``1(System.Func{``0},System.Int32)">
            <summary>
            Executes the given <paramref name="func"/> within a new transaction.
            </summary>
            <typeparam name="TResult">The type of the return value of the func.</typeparam>
            <param name="func">The func to execute.</param>
            <param name="maxRetries">Number of times to retry the execution of the
            transaction if committing it fails because of a conflict with another
            transaction. Specify <c>int.MaxValue</c> to instruct Starcounter
            to try until the transaction succeeds. Specify 0 to disable retrying.
            </param>
            <returns>The return value of the func.</returns>
        </member>
        <member name="M:Starcounter.Db.Transact``2(System.Func{``0,``1},``0,System.Int32)">
            <summary>
            Executes the given <paramref name="func"/> within a new transaction.
            </summary>
            <typeparam name="TResult">The type of the return value of the func.</typeparam>
            <typeparam name="T">The type of the parameter of the func.</typeparam>
            <param name="func">The func to execute.</param>
            <param name="arg">Parameter to use as input to the func</param>
            <param name="maxRetries">Number of times to retry the execution of the
            transaction if committing it fails because of a conflict with another
            transaction. Specify <c>int.MaxValue</c> to instruct Starcounter
            to try until the transaction succeeds. Specify 0 to disable retrying.
            </param>
            <returns>The return value of the func.</returns>
        </member>
        <member name="M:Starcounter.Db.HandleTransactException(System.Exception,System.UInt64,System.Int32,System.Int32)">
            <summary>
            Checks the specified exception. If the exception is of type <see cref="T:Starcounter.ITransactionConflictException"/>
            and the number of retries is lower then max number of retries true is returned and no other action is taken.
            If the maximum number of retries is reached an unhandled transaction conflict is thrown.
            For other exception types false is returned. 
            </summary>
            <param name="ex">The catched exception.</param>
            <param name="handle">Handle of the transaction in use.</param>
            <param name="verify">Verify of the transaction in use.</param>
            <param name="retries">The number of times the transaction have been retried.</param>
            <param name="maxRetries">The maximum number of retries.</param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Db.SetEnvironment(Starcounter.Advanced.DbEnvironment)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Db.IsPersistent(System.Object)">
            <summary>
            Gets a value indicating of the given object is a
            Starcounter database instance.
            </summary>
            <param name="obj">The object to evaluate.</param>
            <returns>True if considered a database object; false
            otherwise.</returns>
        </member>
        <member name="M:Starcounter.Db.Delete(System.Object)">
            <summary>
            Deletes an object from the database. The runtime will check
            the object to see if it's a valid database object. If it is,
            the delete will be carried out. If not, an exception will be
            raised.
            </summary>
            <param name="target">
            The database object to delete.</param>
        </member>
        <member name="M:Starcounter.Db.Delete(Starcounter.Binding.IObjectProxy)">
            <summary>
            Deletes a database object from the database.
            </summary>
            <param name="proxy">The database object to delete,
            reprsented as a <see cref="T:Starcounter.Binding.IObjectProxy"/>.</param>
        </member>
        <member name="M:Starcounter.Db.RaiseDatabaseStoppingEvent">
            <summary>
            Raise the event that signals the database is stopping.
            </summary>
        </member>
        <member name="T:Starcounter.SQL">
            <summary>
            Enables you to use SQL (Structured Query Language) on the
            Starcounter database.
            </summary>
        </member>
        <member name="T:Starcounter.SELECT`1">
            <summary>
            Enables you to use SQL (Structured Query Language) on the
            Starcounter database.
            </summary>
        </member>
        <member name="T:Starcounter.F">
            <summary>
            Holds the global functions SQL, GET/POST/PUT/DELETE/PATCH and Transaction functions that operates on 
            Starcounters database and communication server.
            </summary>
        </member>
        <member name="T:Starcounter.DbHelper">
            <summary>
            Class DbHelper
            </summary>
        </member>
        <member name="M:Starcounter.DbHelper.StringCompare(System.String,System.String)">
            <summary>
            Compares two strings according to the default collation.
            </summary>
            <param name="str1">First string to compare.</param>
            <param name="str2">Second string to compare.</param>
            <returns>
            Negative value is first string is less then second, positive value is first string is
            greater then second and 0 if equal.
            </returns>
        </member>
        <member name="M:Starcounter.DbHelper.FromID(System.UInt64)">
            <summary>
            Froms the ID.
            </summary>
            <param name="oid">The oid.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.DbHelper.GetObjectNo(System.Object)">
            <summary>
            Returns the object identifier of the specified object.
            </summary>
            <remarks>
            Note that all this method does is to read the object identifier from
            the proxy. It doesn't check if the proxy is valid in any way, the
            underlying object may for example be have been deleted in which
            case the method returns the identifier the object had.
            </remarks>
            <param name="obj">The object to get the identity from.</param>
            <exception cref="T:System.ArgumentNullException">
            Raised if <paramref name="obj"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">Raise if Starcounter don't
            recognize the type of <paramref name="obj"/> as a type it knows
            how to get a database identity from.</exception>
            <returns>
            The unique object identity of the given object.
            </returns>
        </member>
        <member name="M:Starcounter.DbHelper.GetObjectID(System.Object)">
            <summary>
            Returns web friendly string of object identity.
            </summary>
            <param name="obj">The object to get the identity from.</param>
            <returns>The string</returns>
        </member>
        <member name="M:Starcounter.DbHelper.GetObjectNo(Starcounter.Advanced.IBindable)">
            <summary>
            Returns the object identifier of the given <see cref="T:Starcounter.Advanced.IBindable"/>
            instance.
            </summary>
            <param name="obj">The object to get the identity from.</param>
            <exception cref="T:System.ArgumentNullException">
            Raised if <paramref name="obj"/> is null.</exception>
            <returns>
            The unique object identity of the given object.
            </returns>
        </member>
        <member name="M:Starcounter.DbHelper.GetObjectID(Starcounter.Advanced.IBindable)">
            <summary>
            Returns web friendly string of the object identity of the given 
            <see cref="T:Starcounter.Advanced.IBindable"/> instance.
            </summary>
            <param name="obj">The object to get the identity from.</param>
            <returns>The string</returns>
        </member>
        <member name="M:Starcounter.DbHelper.Base64ForUrlEncode(System.UInt64)">
            <summary>
             Base 64 Encoding with URL and Filename Safe Alphabet using UTF-8 character set.
            </summary>
            <param name="objectNo">The original string</param>
            <returns>The Base64 encoded string</returns>
        </member>
        <member name="M:Starcounter.DbHelper.Base64ForUrlDecode(System.String)">
            <summary>
             Decode Base64 encoded string with URL and Filename Safe Alphabet using UTF-8.
            </summary>
            <param name="objectID">Base64 code</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Starcounter.DbHelper.WriteBinary(Starcounter.Internal.TupleWriterBase64@,Starcounter.Binary)">
            <summary>
            Adds given binary as byte array to the tuple.
            </summary>
            <param name="tuple">The tuple</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Starcounter.DbHelper.WriteBinary(Starcounter.Internal.SafeTupleWriterBase64@,Starcounter.Binary)">
            <summary>
            Adds given binary as byte array to the tuple.
            </summary>
            <param name="tuple">The tuple</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Starcounter.DbHelper.ReadBinary(Starcounter.Internal.TupleReaderBase64@)">
            <summary>
            Reads next byte array value in the tuple into new binary.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns>New binary</returns>
        </member>
        <member name="M:Starcounter.DbHelper.ReadBinary(Starcounter.Internal.SafeTupleReaderBase64@,System.Int32)">
            <summary>
            Reads byte array value at the given position in the tuple into new binary.
            </summary>
            <param name="tuple">The tuple</param>
            <param name="index">The position</param>
            <returns>New binary</returns>
        </member>
        <member name="T:Starcounter.Enumerator">
            <summary>
            Class Enumerator
            </summary>
        </member>
        <member name="P:Starcounter.Enumerator.CursorHandle">
            <summary>
            Gets the cursor handle.
            </summary>
            <value>The cursor handle.</value>
        </member>
        <member name="P:Starcounter.Enumerator.CursorVerify">
            <summary>
            Gets the cursor verify.
            </summary>
            <value>The cursor verify.</value>
        </member>
        <member name="F:Starcounter.Enumerator.SchedulerOwner">
            <summary>
            Reference to the scheduler instance, where the enumerator is created
            </summary>
        </member>
        <member name="M:Starcounter.Enumerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:Enumerator&lt;T&gt;" /> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="verify">The verify.</param>
        </member>
        <member name="M:Starcounter.Enumerator.#ctor(Starcounter.FilterCallback)">
            <summary>
            Initializes a new instance of the <see cref="!:Enumerator&lt;T&gt;" /> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="verify">The verify.</param>
            <param name="filterCallback">The filter callback.</param>
        </member>
        <member name="M:Starcounter.Enumerator.UpdateCached(System.UInt64,System.UInt64)">
            <summary>
            Updates the cached.
            </summary>
            <param name="handle">The handle.</param>
            <param name="verify">The verify.</param>
        </member>
        <member name="M:Starcounter.Enumerator.UpdateFilter(Starcounter.FilterCallback)">
            <summary>
            Updates the filter.
            </summary>
            <param name="filterCallback">The filter callback.</param>
        </member>
        <member name="P:Starcounter.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
            <exception cref="T:System.ObjectDisposedException">null</exception>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Starcounter.Enumerator.CurrentRaw">
            <summary>
            Gets the current raw.
            </summary>
            <value>The current raw.</value>
        </member>
        <member name="M:Starcounter.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Starcounter.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Starcounter.Enumerator.MarkAsDisposed">
            <summary>
            Assumes that enumerator was already disposed and marks it like this.
            </summary>
        </member>
        <member name="M:Starcounter.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starcounter.FilterEnumerator">
            <summary>
            </summary>
        </member>
        <member name="P:Starcounter.FilterEnumerator.CursorHandle">
            <summary>
            Gets the cursor handle.
            </summary>
            <value>The cursor handle.</value>
        </member>
        <member name="P:Starcounter.FilterEnumerator.CursorVerify">
            <summary>
            Gets the cursor verify.
            </summary>
            <value>The cursor verify.</value>
        </member>
        <member name="F:Starcounter.FilterEnumerator.SchedulerOwner">
            <summary>
            Reference to the scheduler instance, where the enumerator is created
            </summary>
        </member>
        <member name="M:Starcounter.FilterEnumerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:Enumerator&lt;T&gt;" /> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="verify">The verify.</param>
        </member>
        <member name="M:Starcounter.FilterEnumerator.#ctor(Starcounter.FilterCallback)">
            <summary>
            Initializes a new instance of the <see cref="!:Enumerator&lt;T&gt;" /> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="verify">The verify.</param>
            <param name="filterCallback">The filter callback.</param>
        </member>
        <member name="M:Starcounter.FilterEnumerator.UpdateCached(System.UInt64,System.UInt64)">
            <summary>
            Updates the cached.
            </summary>
            <param name="handle">The handle.</param>
            <param name="verify">The verify.</param>
        </member>
        <member name="M:Starcounter.FilterEnumerator.UpdateFilter(Starcounter.FilterCallback)">
            <summary>
            Updates the filter.
            </summary>
            <param name="filterCallback">The filter callback.</param>
        </member>
        <member name="P:Starcounter.FilterEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
            <exception cref="T:System.ObjectDisposedException">null</exception>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Starcounter.FilterEnumerator.CurrentRaw">
            <summary>
            Gets the current raw.
            </summary>
            <value>The current raw.</value>
        </member>
        <member name="M:Starcounter.FilterEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Starcounter.FilterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Starcounter.FilterEnumerator.MarkAsDisposed">
            <summary>
            Assumes that enumerator was already disposed and marks it like this.
            </summary>
        </member>
        <member name="M:Starcounter.FilterEnumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starcounter.FilterCallback">
            <summary>
            Delegate FilterCallback
            </summary>
            <param name="obj">The obj.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="T:Starcounter.IteratorHelper">
            <summary>
            Class IteratorHelper
            </summary>
        </member>
        <member name="M:Starcounter.IteratorHelper.AddGeneratedFilter(System.UInt64)">
            <summary>
            Adds the generated filter.
            </summary>
            <param name="newFilterHandle">The new filter handle.</param>
        </member>
        <member name="M:Starcounter.IteratorHelper.AddDataStream(System.Byte[])">
            <summary>
            Adds the data stream.
            </summary>
            <param name="newDataStream">The new data stream.</param>
        </member>
        <member name="M:Starcounter.IteratorHelper.GetIndex(System.UInt64)">
            <summary>
            Gets the index.
            </summary>
            <param name="handle">The handle.</param>
            <returns>IteratorHelper.</returns>
        </member>
        <member name="M:Starcounter.IteratorHelper.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.IteratorHelper" /> class.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="F:Starcounter.IteratorHelper.RK_EMPTY_LEN">
            <summary>
            Empty recreation key length.
            </summary>
        </member>
        <member name="F:Starcounter.IteratorHelper.RK_NODE_NUM_OFFSET">
            <summary>
            Offset in bytes for number of enumerators.
            Skips length of the offset.
            </summary>
        </member>
        <member name="F:Starcounter.IteratorHelper.RK_FIRST_DYN_DATA_OFFSET">
            <summary>
            Offset in bytes for dynamic data.
            Skips number of nodes.
            </summary>
        </member>
        <member name="F:Starcounter.IteratorHelper.RK_HEADER_LEN">
            <summary>
            Length of recreation key header in bytes.
            Skips first written offset of dynamic data.
            </summary>
        </member>
        <member name="M:Starcounter.IteratorHelper.RecreateEnumerator_GetObjectInfo(System.Byte*,System.UInt64@,System.UInt64@)">
            <summary>
            
            </summary>
            <param name="keyData"></param>
            <param name="extentNumber"></param>
            <param name="keyOid"></param>
            <param name="keyEti"></param>
        </member>
        <member name="M:Starcounter.IteratorHelper.GetEnumeratorCached_NoCodeGenFilter(System.UInt32,System.Byte[],System.Byte[],Starcounter.Enumerator)">
            <summary>
            
            </summary>
            <param name="rangeFlags"></param>
            <param name="firstKey"></param>
            <param name="lastKey"></param>
            <param name="cachedEnum"></param>
        </member>
        <member name="M:Starcounter.IteratorHelper.RecreateEnumerator_NoCodeGenFilter(System.Byte*,Starcounter.Enumerator,System.UInt32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="keyData"></param>
            <param name="extentNumber"></param>
            <param name="cachedEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.IteratorHelper.GetEnumeratorCached_CodeGenFilter(System.UInt32,System.Byte[],System.Byte[],Starcounter.FilterEnumerator)">
            <summary>
            
            </summary>
            <param name="rangeFlags"></param>
            <param name="firstKey"></param>
            <param name="secondKey"></param>
            <param name="cachedEnum"></param>
        </member>
        <member name="M:Starcounter.IteratorHelper.RecreateEnumerator_CodeGenFilter(System.Byte*,Starcounter.FilterEnumerator,System.UInt64,System.UInt32,System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="keyData"></param>
            <param name="extentNumber"></param>
            <param name="cachedEnum"></param>
            <returns></returns>
        </member>
        <member name="T:Starcounter.IObjectView">
            <summary>
            Interface to an object that acts as a view of a data object. Provides
            methods for accessing the data of the viewed object.
            </summary>
        </member>
        <member name="P:Starcounter.IObjectView.TypeBinding">
            <summary>
            View type binding.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.EqualsOrIsDerivedFrom(Starcounter.IObjectView)">
            <summary>
            Determines if the current object is equal to or derived from the
            specified object.
            </summary>
            <param name="obj">
            The object to compare to.
            </param>
            <returns>
            True if the current object equals or is directly or indirectly
            derived from the specified object.
            </returns>
        </member>
        <member name="M:Starcounter.IObjectView.GetBinary(System.Int32)">
            <summary>
            Gets the value of a Binary field.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.IObjectView.GetBoolean(System.Int32)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetByte(System.Int32)">
            <summary>
            Gets the value of an integer attribute as a unsigned 8-bits integer.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetDateTime(System.Int32)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetDecimal(System.Int32)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetDouble(System.Int32)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetInt16(System.Int32)">
            <summary>
            Gets the value of an integer attribute as a signed 16-bits integer.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetInt32(System.Int32)">
            <summary>
            Gets the value of an integer attribute as a signed 32-bits integer.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetInt64(System.Int32)">
            <summary>
            Gets the value of an integer attribute as a signed 64-bits integer.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetObject(System.Int32)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetSByte(System.Int32)">
            <summary>
            Gets the value of an integer attribute as a signed 8-bits integer.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetSingle(System.Int32)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetString(System.Int32)">
            <summary>
            Gets the value of a string attribute.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetUInt16(System.Int32)">
            <summary>
            Gets the value of an integer attribute as a unsigned 16-bits integer.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetUInt32(System.Int32)">
            <summary>
            Gets the value of an integer attribute as a unsigned 32-bits integer.
            </summary>
        </member>
        <member name="M:Starcounter.IObjectView.GetUInt64(System.Int32)">
            <summary>
            Gets the value of an integer attribute as a unsigned 64-bits integer.
            </summary>
        </member>
        <member name="T:Starcounter.LogSources">
            <summary>
            Class LogSources
            </summary>
        </member>
        <member name="F:Starcounter.LogSources.Sql">
            <summary>
            The SQL
            </summary>
        </member>
        <member name="F:Starcounter.LogSources.Hosting">
            <summary>
            Well-known log source used by the database host.
            </summary>
        </member>
        <member name="F:Starcounter.LogSources.CodeHostLoader">
            <summary>
            Log sources used by the Starcounter code host loader.
            </summary>
        </member>
        <member name="F:Starcounter.LogSources.CodeHostAssemblyResolver">
            <summary>
            Log sources used by the Starcounter code host assembly resolver.
            </summary>
        </member>
        <member name="F:Starcounter.LogSources.Unload">
            <summary>
            Well-known log source used by the database host when unloading.
            </summary>
        </member>
        <member name="M:Starcounter.Reload.GetPropertyName(Starcounter.Metadata.Column)">
            <summary>
            Gets the name of a property the unload can use to read the
            raw value of <paramref name="col"/> using the high-level SQL
            API.
            </summary>
            <param name="col">The column the unload are creating an
            INSERT statement using.</param>
            <returns>A property that can be used to read the value of
            the given column using the high-level SQL API.</returns>
        </member>
        <member name="T:Starcounter.ObjectView.ViewReader">
            <summary>
            Provide the ability for clients to enumerate values of any 
            <see cref="T:Starcounter.IObjectView"/> as string data.
            </summary>
        </member>
        <member name="M:Starcounter.ObjectView.ViewReader.#ctor(Starcounter.ObjectView.ValueFormatter)">
            <summary>
            
            </summary>
            <param name="vf"></param>
        </member>
        <member name="M:Starcounter.ObjectView.ViewReader.AllValues(Starcounter.IObjectView,System.Action{Starcounter.Binding.IPropertyBinding,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="receiver"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Starcounter.Query.IQueryRowsResponse" -->
        <member name="M:Starcounter.Query.IQueryRowsResponse.Respond``1(Starcounter.QueryResultRows{``0})">
            <summary>
            Creates a <see cref="T:Starcounter.Response"/> reflecting <paramref name="rows"/>.
            </summary>
            <typeparam name="T">The type of records</typeparam>
            <param name="rows">Rows to create response from.</param>
            <returns>The response.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterCacheEntry.Dispose">
            <summary>
            Disposes corresponding filter.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterCacheEntry.CompareAndGetFilter(Starcounter.Binding.DbTypeCode[])">
            <summary>
            Checks if two filters are the same (by checking numerical variable types).
            </summary>
            <param name="newNumVarTypes">Variables type array to compare with.</param>
            <returns>Filter handle if filters are the same, 0 otherwise.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterCacheShared.AddNewFilter(Starcounter.Binding.DbTypeCode[],System.UInt64)">
            <summary>
            Add created filter to the cache.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterCacheShared.GetFilterIfCached(Starcounter.Binding.DbTypeCode[])">
            <summary>
            Getting previously generated code filter if it exist.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterCacheShared.Dispose">
            <summary>
            Disposes all cached filters.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterCacheShared.CreateFilter(Starcounter.Query.Execution.CodeGenFilterInstrArray,Starcounter.Binding.DbTypeCode[],System.UInt32,System.UInt32,Starcounter.Query.Execution.RowTypeBinding,System.Int32)">
            <summary>
            Creating filter using instructions, maximum stack size, number of data values, etc.
            Automatically adds new filter to the cache.
            </summary>
            <param name="instrArray">Array of filter instructions.</param>
            <param name="varTypes">Array with numerical variable types (null if no numerical variables).</param>
            <param name="maxStackSize">The maximum size of the stack needed for filter input values.</param>
            <param name="dataCount">Number of supplied data values.</param>
            <param name="typeBinding">Result type binding for the corresponding extent.</param>
            <param name="extentNumber">ID of the corresponding extent.</param>
            <returns>Handle to the created filter or exception on error.</returns>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenFilterInstrCodes.LSE_UINT">
            Instruction shift: 39
        </member>
        <member name="P:Starcounter.Query.Execution.CodeGenFilterNode.DbTypeCode">
            <summary>
            The DbTypeCode of the value of the expression or the property.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.CodeGenFilterNode.CanCodeGen">
            <summary>
            Gets if code gen can be applied to the node. For example, code properties and conditions involving them cannot be code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterNode.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the expression is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>True, if the value of the expression when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterNode.InstantiateExtentSet(Starcounter.Query.Optimization.ExtentSet)">
            <summary>
            Updates the set of extents with all extents referenced in the current expression.
            </summary>
            <param name="extentSet">The set of extents to be updated.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterNode.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of the expression using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterNode.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            By default appends unsupported type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenFilterNode.AddNodeCompTypeToList(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Execution.IValueExpression,Starcounter.Query.Execution.IValueExpression,System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Adds operation node type to the node type list.
            </summary>
            <param name="compOperator">Comparison operator.</param>
            <param name="expr1">Left branch of the expression.</param>
            <param name="expr2">Right branch of the expression.</param>
            <param name="nodeTypeList">Node type list.</param>
        </member>
        <member name="T:Starcounter.Query.Execution.CodeGenStringGenerator">
            <summary>
            Used for generating compilable code.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.CodeGenStringGenerator.CODE_SECTION_TYPE">
            <summary>
            Represents types of code sections.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.CODE_SECTION_TYPE.INCLUDES">
            <summary>
            The INCLUDES
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.CODE_SECTION_TYPE.DECLARATIONS">
            <summary>
            The DECLARATIONS
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.CODE_SECTION_TYPE.GLOBAL_DATA">
            <summary>
            The GLOBA l_ DATA
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.CODE_SECTION_TYPE.FUNCTIONS">
            <summary>
            The FUNCTIONS
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.CODE_SECTION_TYPE.INIT_DATA">
            <summary>
            The INI t_ DATA
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.numCodeSectionTypes">
            <summary>
            Total number of code section types.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.maxCodeSectionSizes">
            <summary>
            Pre-allocated size of each code section.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.codeSections">
            <summary>
            Strings containing each code section code.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.currentCodeSpaces">
            <summary>
            Current number of whitespace indentation for each code section.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.uniqueQueryID">
            <summary>
            Identifies SQL query uniquely within database session.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.CodeGenStringGenerator.UniqueQueryID">
            <summary>
            Gets the unique query ID.
            </summary>
            <value>The unique query ID.</value>
        </member>
        <member name="F:Starcounter.Query.Execution.CodeGenStringGenerator.seqNumber">
            <summary>
            Sequential number
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenStringGenerator.SeqNumber">
            <summary>
            Seqs the number.
            </summary>
            <returns>UInt64.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenStringGenerator.#ctor(System.UInt64)">
            <summary>
            Initialization constructor.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenStringGenerator.AppendLine(Starcounter.Query.Execution.CodeGenStringGenerator.CODE_SECTION_TYPE,System.String)">
            <summary>
            Appends line to specified code section.
            </summary>
            <param name="codeSectiontype">Type of code section.</param>
            <param name="code">Line to append.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenStringGenerator.Indent(Starcounter.Query.Execution.CodeGenStringGenerator.CODE_SECTION_TYPE)">
            <summary>
            Increases the indentation for the specified code section.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenStringGenerator.UnIndent(Starcounter.Query.Execution.CodeGenStringGenerator.CODE_SECTION_TYPE)">
            <summary>
            Decreases the indentation for the specified code section.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CodeGenStringGenerator.GetSpaces(System.Int32)">
            <summary>
            Returns the string filled with spaces.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.CodeGenStringGenerator.ENDL">
            <summary>
            End-line symbol.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.CompilerHelper">
            <summary>
            Class CompilerHelper
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.CompilerHelper.installationDir">
            <summary>
            Path to Starcounter installation folder.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CompilerHelper.GetInstalledDirFromEnv">
            <summary>
            Returns the directory path where Starcounter is installed,
            obtained from environment variables.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.CompilerHelper.CompileAndVerifyLibrary(System.String,System.UInt64)">
            <summary>
            Compiles the library and loads it.
            </summary>
            <param name="generatedCode">String containing code that has been generated.</param>
            <param name="uniqueQueryID">The unique query ID.</param>
            <returns>String containing error description or 'null' if everything is fine.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BooleanComparer">
            <summary>
            Class that holds information about a Boolean comparer which is a comparer that
            uses a Boolean expression and a sort ordering to compare Rows.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Execution.BooleanComparer.ordering">
            <summary>
            The ordering
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanComparer.#ctor(Starcounter.Query.Execution.IBooleanExpression,Starcounter.Query.Execution.SortOrder)">
            <summary>
            Constructor.
            </summary>
            <param name="expr">The expression to be used in the comparison.</param>
            <param name="ord">The sort ordering to be used in the comparison.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.MultiComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.RandomComparer">
            <summary>
            Class that holds information about a random comparer which is a comparer that
            gives a random result when comparing Rows.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.RandomComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerComparer.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ObjectIdentityLookup">
            <summary>
            Enumerator with unique access for an object based on ObjectId, which
            either given numerical as ObjectNo or string as ObjectID.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectIdentityLookup.TypeBinding">
            <summary>
            The type binding of the resulting objects of the query.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIdentityLookup.EvaluateToObject">
            <summary>
            Evaluates the expression and look up the corresponding object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIdentityLookup.InCurrentExtent(Starcounter.IObjectView)">
            <summary>
            Controls that the object obj is in the current extent (the extent of this reference-lookup).
            The object's type must be equal to or a subtype of the extent type.
            </summary>
            <param name="obj">The object to control.</param>
            <returns>True, if the object is in the current extent, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIdentityLookup.Reset(Starcounter.Query.Execution.Row)">
            <summary>
            Resets the enumerator with a context object.
            </summary>
            <param name="obj">Context object from another enumerator.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIdentityLookup.GetUniqueName(System.UInt64)">
            <summary>
            Gets the unique name for this enumerator.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.TypeLiteral">
            <summary>
            Class that holds information about a literal of type Type.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeLiteral.#ctor(Starcounter.Binding.ITypeBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeLiteral.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the type that should be the value of this literal.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeLiteral.EvaluateToType(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if null-literal, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeLiteral.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this literal using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IsTypePredicate.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IsTypePredicate.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IsTypePredicate.EvaluateAtCompile">
            <summary>
            Compares object expression and type expression if possible.
            It tries to evaluate object expression, if not it uses typebinding from the object expression.
            If type binding of object is used, then the result might be not valid at running time.
            This method can be called only during optimization time, before constructing enumerator.
            </summary>
            <returns>Result of comparison</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IsTypePredicate.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IsTypePredicate.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IsTypePredicate.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIDProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectIDProperty.QueryTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectIDProperty.DbTypeCode">
            <summary>
            The DbTypeCode of this property.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectIDProperty.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectIDProperty.FullName">
            <summary>
            Full path name to uniquely identify this property.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIDProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIDProperty.EvaluateToString(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIDProperty.EvaluateToString(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIDProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIDProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectIDProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectNoProperty.DbTypeCode">
            <summary>
            The DbTypeCode of this property.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectNoProperty.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectNoProperty.FullName">
            <summary>
            Full path name to uniquely identify this property.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.EvaluateToUInteger(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectNoProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="T:Starcounter.Query.Execution.Row">
            <summary>
            Holds information about one row/tuple/item in the result set of a query.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Row.TypeBinding">
            <summary>
            View type binding.
            </summary>
            <value>The type binding.</value>
        </member>
        <member name="P:Starcounter.Query.Execution.Row.Random">
            <summary>
            A random number used when ordering a result by random (... ORDER BY RANDOM).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetPropertyStringValue(System.Int32,Starcounter.ObjectView.ValueFormatter,System.String@)">
            <summary>
            Get the value of the property with <paramref name="index"/> as a
            string.
            </summary>
            <param name="index">Index of the property.</param>
            <param name="displayName">The display name of the property.</param>
            <returns>The property value, as a string, formatted by the supplied
            formatter.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.AccessObject(System.Int32)">
            <summary>
            Access the attached object at the specified index.
            If no object is attached at the specified index, null is returned.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.AttachObject(System.Int32,Starcounter.IObjectView)">
            <summary>
            Attach an instance of an IObjectView at the specified index.
            The type of the instance must be the same as the specified type used when creating the Row.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetBinary(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetBoolean(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetByte(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetDateTime(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetDecimal(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetDouble(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetInt16(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetInt32(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetInt64(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetObject(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetSByte(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetSingle(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetString(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetUInt16(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetUInt32(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetUInt64(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetExtension(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Row.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.RowTypeBinding.ResetCached">
            <summary>
            Row type binding can be simply shared.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.RowTypeBinding.CreatePropertyListArray">
            <summary>
            Creates an array indexed by extent number, where each item contains a list of
            properties that should be evaluated at that extent.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.RowTypeBinding.GetPropertyList(System.Int32)">
            <summary>
            Returns a list of properties that should be evaluated at the input extent.
            </summary>
            <param name="extentNum">An extent number.</param>
            <returns>A list of properties.</returns>
        </member>
        <member name="P:Starcounter.Query.Execution.PropertyMapping.DisplayName">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonOperator">
            <summary>
            Comparison operators.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.LogicalOperator">
            <summary>
            Logical operators, where XOR is "exclusive or".
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.NumericalOperator">
            <summary>
            Numerical operators where Addition (X+Y), Subtraction (X-Y), Multiplication (X*Y) and
            Division (X/Y) are binary, while Plus (+X) and Minus (-X) are unary.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.SortOrder">
            <summary>
            Sort orderings.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.StringOperator">
            <summary>
            String operators.
            Operator AppendMaxChar is used to handle upper end-point in "STARTS WITH" intervals.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.TruthValue">
            <summary>
            Truth values for SQL which is three valued (TRUE, FALSE and UNKNOWN).
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.JoinType">
            <summary>
            Join types used in the query execution.
            Cross joins are a special case of inner joins.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.KeyValueFormat">
            <summary>
            Format for key-values used for index ranges.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ConditionNodeType">
            <summary>
            Identifies the node type in condition tree.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Aggregation.TypeBinding">
            <summary>
            The type binding of the resulting objects of the query.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Aggregation.Reset(Starcounter.Query.Execution.Row)">
            <summary>
            Resets the enumerator with a context object.
            </summary>
            <param name="obj">Context object from another enumerator.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.Aggregation.PopulateQueryFlags(System.UInt32*)">
            <summary>
            Depending on query flags, populates the flags value.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Aggregation.Clone(Starcounter.Query.Execution.RowTypeBinding,Starcounter.Query.Execution.VariableArray)">
            <summary>
            Creating the clone of enumerator.
            </summary>
            <returns>Returns clone of the enumerator.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Aggregation.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Aggregation.GetUniqueName(System.UInt64)">
            <summary>
            Gets the unique name for this enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.#ctor(System.Byte,Starcounter.Query.Execution.EnumeratorNodeType,Starcounter.Query.Execution.RowTypeBinding,Starcounter.Query.Execution.VariableArray,System.Boolean,System.Byte)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.TransactionId">
            <summary>
            Sets the transaction handle value.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.UniqueQueryID">
            <summary>
            Uniquely identifies the corresponding query.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.VarArray">
            <summary>
            Just returns reference to variable array.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.HasCodeGeneration">
            <summary>
            Indicates if code generation is possible for this enumerator.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.Counter">
            <summary>
            Gets the number of successful hits.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.Query">
            <summary>
            The SQL query this SQL enumerator executes.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.QueryString">
            <summary>
            The SQL query this SQL enumerator executes.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.RowTypeBinding">
            <summary>
            Gets the type binding of the Row.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.ProjectionTypeCode">
            <summary>
            If the projection is a singleton, then the DbTypeCode of that singleton, otherwise null.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.VariableCount">
            <summary>
            Gets the number of variables in the SQL query.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.QueryFlags">
            <summary>
            Returns the flags describing the query.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.LiteralValue">
            <summary>
            Gets first found literal value represented as a string.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ExecutionEnumerator.IsBisonParserUsed">
            <summary>
            Returns if Bison-parser was used in creation of the enumerator.
            It will be removed when Prolog-parser is deprecated.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.SetFirstOnlyFlag">
            <summary>
            Sets the fetch first only flag.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.PopulateQueryFlags(System.UInt32*)">
            <summary>
            Depending on query flags, populates the flags value.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.GetInfo(System.Byte,System.UInt64,System.Byte*,System.UInt32,System.UInt32*)">
            <summary>
            Populates query information such as fetch literal/variable info and recreation key info.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.GetOffsetKey">
            <summary>
            Gets offset key if its possible.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.Reset(Starcounter.Query.Execution.Row)">
            <summary>
            Enumerator reset functionality.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.ReturnToCache">
            <summary>
            Returns the enumerator back to the cache.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.Dispose">
            <summary>
            Disposes the enumerator and returns it to the cache.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.AttachToCache(System.Collections.Generic.LinkedList{Starcounter.Query.Execution.IExecutionEnumerator})">
            <summary>
            Should be called when attached to a cache.
            </summary>
            <param name="fromCache">Cache where this enumerator should be returned.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.CloneCached">
            <summary>
            Creating the clone of enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.ToString">
            <summary>
            Returns a string presentation of the execution enumerator including
            a specification of the type of the returned objects and the execution plan.
            </summary>
            <returns>A string presentation of the execution enumerator.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.SetVariable(System.Int32,System.SByte)">
            <summary>
            Sets a value to an SQL variable.
            </summary>
            <param name="index">The order number of the variable starting at 0.</param>
            <param name="value">The new value of the variable.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ExecutionEnumerator.SetVariables(System.Object[])">
            <summary>
            Sets values to all SQL variables in the SQL query.
            </summary>
            <param name="sqlParams">The SQL params.</param>
            <exception cref="T:System.ArgumentException">Incorrect number of SQL parameters, which should be:</exception>
        </member>
        <member name="M:Starcounter.Query.Execution.FullTableScan.CreateRangeKeys">
            <summary>
            Creates keys for full range scan.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.FullTableScan.TypeBinding">
            <summary>
            The type binding of the resulting objects of the query.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.FullTableScan.TryRecreateEnumerator(System.Byte*)">
            <summary>
            Tries to recreate enumerator using provided key.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.FullTableScan.CreateEnumeratorWithNativeFilter">
            <summary>
            Creating extent scan iterator.
            Filter should be already available.
            Value stream is supplied.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.FullTableScan.Reset(Starcounter.Query.Execution.Row)">
            <summary>
            Resets the enumerator with a context object
            (reset already includes iterator disposal).
            </summary>
            <param name="obj">Context object from another enumerator.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.FullTableScan.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.FullTableScan.GetUniqueName(System.UInt64)">
            <summary>
            Gets the unique name for this enumerator.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IndexScan.TypeBinding">
            <summary>
            The type binding of the resulting objects of the query.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IndexScan.PopulateQueryFlags(System.UInt32*)">
            <summary>
            Depending on query flags, populates the flags value.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IndexScan.TryRecreateEnumerator(System.Byte*)">
            <summary>
            Tries to recreate enumerator using provided key.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IndexScan.CreateEnumerator">
            <summary>
            Creates enumerator which than used in MoveNext.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IndexScan.CalculateRangeKeys">
            <summary>
            Calculates the range values.
            Expensive, should be avoided with shortcuts when possible.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IndexScan.MoveEnumStaticData(System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves data and updates data offsets for all enumerators.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IndexScan.Reset(Starcounter.Query.Execution.Row)">
            <summary>
            Resets the enumerator with a context object.
            </summary>
            <param name="obj">Context object from another enumerator.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IndexScan.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IndexScan.GetUniqueName(System.UInt64)">
            <summary>
            Gets the unique name for this enumerator.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Join.TypeBinding">
            <summary>
            The type binding of the resulting objects of the query.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Join.Reset(Starcounter.Query.Execution.Row)">
            <summary>
            Resets the enumerator with a context object.
            </summary>
            <param name="obj">Context object from another enumerator.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.Join.PopulateQueryFlags(System.UInt32*)">
            <summary>
            Depending on query flags, populates the flags value.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Join.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Join.GetUniqueName(System.UInt64)">
            <summary>
            Gets the unique name for this enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.LikeExecEnumerator.IsStartWith(System.String)">
            <summary>
            Checks if string conforms to STARTS WITH syntax.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.LikeExecEnumerator.CreateLikeCombinations``1(System.String,System.Boolean,System.Object[])">
            <summary>
            Creates an array of converted START WITH strings.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.LikeExecEnumerator.RowTypeBinding">
            <summary>
            Gets the type binding of the Row.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.LikeExecEnumerator.ProjectionTypeCode">
            <summary>
            If the projection is a singleton, then the DbTypeCode of that singleton, otherwise null.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.LikeExecEnumerator.TypeBinding">
            <summary>
            The type binding of the resulting objects of the query.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.LikeExecEnumerator.PopulateQueryFlags(System.UInt32*)">
            <summary>
            Depending on query flags, populates the flags value.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.LikeExecEnumerator.Reset(Starcounter.Query.Execution.Row)">
            <summary>
            Resets the enumerator with a context object.
            </summary>
            <param name="obj">Context object from another enumerator.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.LikeExecEnumerator.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.LikeExecEnumerator.GetUniqueName(System.UInt64)">
            <summary>
            Gets the unique name for this enumerator.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.NullObject">
            <summary>
            A NullObject is used in an outer join when there is no corresponding object of some extent.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ReferenceLookup.TypeBinding">
            <summary>
            The type binding of the resulting objects of the query.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ReferenceLookup.Reset(Starcounter.Query.Execution.Row)">
            <summary>
            Resets the enumerator with a context object.
            </summary>
            <param name="obj">Context object from another enumerator.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ReferenceLookup.InCurrentExtent(Starcounter.IObjectView)">
            <summary>
            Controls that the object obj is in the current extent (the extent of this reference-lookup).
            The object's type must be equal to or a subtype of the extent type.
            </summary>
            <param name="obj">The object to control.</param>
            <returns>True, if the object is in the current extent, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ReferenceLookup.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ReferenceLookup.GetUniqueName(System.UInt64)">
            <summary>
            Gets the unique name for this enumerator.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Sort.TypeBinding">
            <summary>
            The type binding of the resulting objects of the query.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Sort.Reset(Starcounter.Query.Execution.Row)">
            <summary>
            Resets the enumerator with a context object.
            </summary>
            <param name="obj">Context object from another enumerator.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.Sort.PopulateQueryFlags(System.UInt32*)">
            <summary>
            Depending on query flags, populates the flags value.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Sort.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Sort.GetUniqueName(System.UInt64)">
            <summary>
            Gets the unique name for this enumerator.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ICompilable">
            <summary>
            This interface indicates that its children
            must produce compilable code.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ICompilable.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IQueryObject">
            <summary>
            Interface for all types of objects in a query execution, which includes:
            literals, properties, paths, operations, conditions, comparers and enumerators.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IQueryObject.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of the expression using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IConditionTreeNode.InstantiateExtentSet(Starcounter.Query.Optimization.ExtentSet)">
            <summary>
            Updates the set of extents with all extents referenced in the current expression.
            </summary>
            <param name="extentSet">The set of extents to be updated.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IConditionTreeNode.InvolvesCodeExecution">
            <summary>
            Evaluates if the evaluation of the condition involves execution of code or not. 
            In other words if the condition includes a code property or method.
            </summary>
            <returns>True, if the condition involves code execution, otherwise false.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IValueExpression">
            <summary>
            Interface for all types of expressions that have a return value of a value type or
            an object reference, which includes: literals, properties, paths and operations.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IValueExpression.DbTypeCode">
            <summary>
            The DbTypeCode of the value of the expression or the property.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IValueExpression.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the expression is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>True, if the value of the expression when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IValueExpression.Clone(Starcounter.Query.Execution.VariableArray)">
            <summary>
            Generic clone for ITypeExpression types.
            </summary>
            <param name="varArray">Variables array.</param>
            <returns>Clone of the expression.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.ILiteral">
            <summary>
            Interface for literals of all data types.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IVariable">
            <summary>
            Interface for variables of all data types.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IPath">
            <summary>
            Interface for path expressions of all data types.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IPath.ExtentNumber">
            <summary>
            The extent number of the extent to which this path belongs.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IPath.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IPath.FullName">
            <summary>
            The full name of the path, for example used to uniquely identify the path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IPath.ColumnName">
            <summary>
            The full name of the column of the path. It uniquely identifies column in the database.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IMember">
            <summary>
            Interface for members (properties and methods) of all data types.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IProperty">
            <summary>
            Interface for properties of all data types.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IMethod">
            <summary>
            Interface for methods with return value of all data types.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.INumericalExpression">
            <summary>
            Interface for numerical expressions which are all expressions of a numerical type
            (Decimal, Double, Int64, UInt64).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.INumericalExpression.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value as a nullable Decimal of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.INumericalExpression.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value as a nullable Double of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.INumericalExpression.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value as a nullable Int64 of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.INumericalExpression.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value as a ceiling (round up) nullable Int64 of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.INumericalExpression.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value as a floor (round down) nullable Int64 of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.INumericalExpression.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value as a nullable UInt64 of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.INumericalExpression.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value as a ceiling (round up) nullable UInt64 of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.INumericalExpression.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value as a floor (round down) nullable UInt64 of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.INumericalExpression.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of the expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IDecimalExpression">
            <summary>
            Interface for Decimal expressions which are all expressions of type Decimal.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IDoubleExpression">
            <summary>
            Interface for Double expressions which are all expressions of type Double.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IIntegerExpression">
            <summary>
            Interface for integer expressions which are all expressions of type integer (Int64).
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IUIntegerExpression">
            <summary>
            Interface for unsigned integer expressions which are all expressions type unsigned integer (UInt64).
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IBinaryExpression">
            <summary>
            Interface for Binary expressions which are all expressions of type Binary.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IBinaryExpression.EvaluateToBinary(Starcounter.IObjectView)">
            <summary>
            Calculates the value of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IBinaryExpression.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of the expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IBooleanExpression">
            <summary>
            Interface for Boolean expressions which are all expressions of type Boolean.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IBooleanExpression.EvaluateToBoolean(Starcounter.IObjectView)">
            <summary>
            Calculates the value of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IBooleanExpression.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of the expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IDateTimeExpression">
            <summary>
            Interface for DateTime expressions which are all expressions of type DateTime.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IDateTimeExpression.EvaluateToDateTime(Starcounter.IObjectView)">
            <summary>
            Calculates the value of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IDateTimeExpression.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of the expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IObjectExpression">
            <summary>
            Interface for object expressions which are all expressions of type Object (reference).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IObjectExpression.EvaluateToObject(Starcounter.IObjectView)">
            <summary>
            Calculates the value of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IObjectExpression.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of the expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IStringExpression">
            <summary>
            Interface for String expressions which are all expressions of type String.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IStringExpression.EvaluateToString(Starcounter.IObjectView)">
            <summary>
            Calculates the value of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IStringExpression.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of the expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.ITypeExpression">
            <summary>
            Interface for type expressions which are all expressions of type Type (object type).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ITypeExpression.EvaluateToType(Starcounter.IObjectView)">
            <summary>
            Calculates the value of the expression when evaluated on an input object.
            All properties in the expression are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ITypeExpression.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of the expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IBinaryPathItem">
            <summary>
            Interface for path items of datatype Binary.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IBinaryPathItem.EvaluateToBinary(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on a current object and the start object
            of the path to which the current object belongs.
            </summary>
            <param name="obj">The current object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the current object and the start object.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IBooleanPathItem">
            <summary>
            Interface for path items of datatype Boolean.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IBooleanPathItem.EvaluateToBoolean(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on a current object and the start object
            of the path to which the current object belongs.
            </summary>
            <param name="obj">The current object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the current object and the start object.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IDateTimePathItem">
            <summary>
            Interface for path items of datatype DateTime.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IDateTimePathItem.EvaluateToDateTime(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on a current object and the start object
            of the path to which the current object belongs.
            </summary>
            <param name="obj">The current object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the current object and the start object.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IDecimalPathItem">
            <summary>
            Interface for path items of datatype Decimal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IDecimalPathItem.EvaluateToDecimal(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on a current object and the start object
            of the path to which the current object belongs.
            </summary>
            <param name="obj">The current object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the current object and the start object.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IDoublePathItem">
            <summary>
            Interface for path items of datatype Double.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IDoublePathItem.EvaluateToDouble(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on a current object and the start object
            of the path to which the current object belongs.
            </summary>
            <param name="obj">The current object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the current object and the start object.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IIntegerPathItem">
            <summary>
            Interface for path items of datatype integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IIntegerPathItem.EvaluateToInteger(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on a current object and the start object
            of the path to which the current object belongs.
            </summary>
            <param name="obj">The current object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the current object and the start object.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IObjectPathItem">
            <summary>
            Interface for path items of datatype Object (reference).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IObjectPathItem.EvaluateToObject(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on a current object and the start object
            of the path to which the current object belongs.
            </summary>
            <param name="obj">The current object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the current object and the start object.</returns>
        </member>
        <member name="P:Starcounter.Query.Execution.IObjectPathItem.Name">
            <summary>
            Name of the object path item. Used to create a unique full path name.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IStringPathItem">
            <summary>
            Interface for path items of datatype String.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IStringPathItem.EvaluateToString(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on a current object and the start object
            of the path to which the current object belongs.
            </summary>
            <param name="obj">The current object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the current object and the start object.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IUIntegerPathItem">
            <summary>
            Interface for path items of datatype unsigned integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IUIntegerPathItem.EvaluateToUInteger(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on a current object and the start object
            of the path to which the current object belongs.
            </summary>
            <param name="obj">The current object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path on which to evaluate the expression.</param>
            <returns>The value of the expression when evaluated on the current object and the start object.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IOperation">
            <summary>
            Interface for operations of all data types.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.INumericalOperation">
            <summary>
            Interface for operations of all numerical data types.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ILogicalExpression">
            <summary>
            Interface for logical expressions (conditions) which are expressions that have a return
            value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ILogicalExpression.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value (TRUE, FALSE or UNKNOWN) of the condition when
            evaluated on an input object. All properties in the expression are evaluated on
            the input object.
            </summary>
            <param name="obj">The object on which to evaluate the condition.</param>
            <returns>The truth value of the condition when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ILogicalExpression.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value (true or false) of the condition when applied
            to an input object. All properties in the expression are evaluated on the input
            object.
            </summary>
            <param name="obj">The object on which to evaluate the condition.</param>
            <returns>The Boolean value of the condition when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ILogicalExpression.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of the expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ILogicalExpression.Clone(Starcounter.Query.Execution.VariableArray)">
            <summary>
            Interface for cloning logical expressions.
            </summary>
            <param name="varArray">Variable array.</param>
            <returns>Cloned logical expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ILogicalExpression.GetOutsideJoinExtentSet">
            <summary>
            Gets a set of extents, 
            which represents all extents of which this logical expression must be executed outside, 
            due to IS- and ISNOT-comparisons and outer joins.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IComparison">
            <summary>
            Interface for comparisons of all data types.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IComparison.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            This method is used to select a scan alternative. It is not used in join optimization.
            </summary>
            <param name="extentNumber">An extent number.</param>
            <returns>A path, if an appropriate one is found, otherwise null.</returns>
        </member>
        <member name="P:Starcounter.Query.Execution.ISetFunction.DbTypeCode">
            <summary>
            The DbTypeCode of the result of the set-function.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IQueryComparer">
            <summary>
            Interface for expressions which are comparers of Rows.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ISingleComparer">
            <summary>
            Interface for expressions which are single comparers of Rows.
            Single comparer means that one single expression is used for the comparison.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ISingleComparer.ComparerTypeCode">
            <summary>
            The DbTypeCode of the expression used for the comparison.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ISingleComparer.Expression">
            <summary>
            The expression used for the comparison.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ISingleComparer.SortOrdering">
            <summary>
            The sort ordering (ascending or descending) of the comparer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ISingleComparer.Evaluate(Starcounter.Query.Execution.Row)">
            <summary>
            Calculates the value of the comparison expression when evaluated on an
            input object. All properties in the expression are evaluated on the input
            object.
            </summary>
            <param name="obj">The object on which to evaluate the comparison expression.</param>
            <returns>The value of the comparison expression when evaluated on the input
            object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ISingleComparer.Compare(Starcounter.Query.Execution.ILiteral,Starcounter.Query.Execution.Row)">
            <summary>
            Compares the value specified by the input literal with the value of the
            comparison expression evaluated on the input object.
            </summary>
            <param name="value">The value to be compared.</param>
            <param name="obj">The object to be compared.</param>
            <returns>The value -1 if the input value is less than the comparison
            evaluation of the input object w.r.t. the current sort ordering.
            The value 0 if the comparison values are equal.
            The value 1 if the input value is greater than the comparison evaluation
            of the input object w.r.t. the current sort ordering.
            </returns>
        </member>
        <member name="T:Starcounter.Query.Execution.IPathComparer">
            <summary>
            Interface for single comparers where the expresion used for the comparison is
            a path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IPathComparer.Path">
            <summary>
            The path used for the comparison.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IExecutionEnumerator.NodeId">
            <summary>
            Gets node id, which is unique for an execution tree.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IExecutionEnumerator.SetVariableToNull(System.Int32)">
            <summary>
            Sets a null value to an SQL variable.
            </summary>
            <param name="index">The order number of the variable starting at 0.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IExecutionEnumerator.SetVariable(System.Int32,Starcounter.Binary)">
            <summary>
            Sets a value to an SQL variable.
            </summary>
            <param name="index">The index.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IExecutionEnumerator.SetVariables(System.Object[])">
            <summary>
            Sets values to all SQL variables in the SQL query.
            </summary>
            <param name="newValues">The new values of the variables in order of appearance.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.IExecutionEnumerator.VariableCount">
            <summary>
            Gets the number of variables in the SQL query.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IExecutionEnumerator.UniqueQueryID">
            <summary>
            Uniquely identifies query it belongs to (within one VP).
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IExecutionEnumerator.HasCodeGeneration">
            <summary>
            Indicates if code generation is possible for this enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IExecutionEnumerator.MoveNextSpecial(System.Boolean)">
            <summary>
            Is used for outer joins. Works like MoveNext() but with the following exception.
            If either the parameter force is true
            or no next object is found and no object has been returned (counter = 0)
            then a NullObject is created and MoveNextSpecial returns true.
            </summary>
            <param name="force">Specifies if the creation of a NullObject should be forced or not.</param>
            <returns></returns>
        </member>
        <member name="P:Starcounter.Query.Execution.IExecutionEnumerator.IsBisonParserUsed">
            <summary>
            Returns if Bison-parser was used in creation of the enumerator.
            It will be removed when Prolog-parser is deprecated.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IExecutionEnumerator.Clone(Starcounter.Query.Execution.RowTypeBinding,Starcounter.Query.Execution.VariableArray)">
            <summary>
            Creates a clone of the execution enumerator.
            </summary>
            <param name="rowTypeBindClone">A cloned row-type-binding as input.</param>
            <param name="varArray">An array of variables to be instantiated.</param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IExecutionEnumerator.SaveEnumerator(Starcounter.Internal.SafeTupleWriterBase64@,System.Int16)">
            <summary>
            Writes necessary data about enumerator to offset key.
            </summary>
            <param name="enumerators">The tuple writer of enumerators for the offset key.</param>
            <param name="expectedNodeId">Expected nodeId of the enumerator for debug validation.</param>
            <returns>Next expected nodeId, or -1 if failed.</returns>
        </member>
        <member name="P:Starcounter.Query.Execution.IExecutionEnumerator.IsAtRecreatedKey">
            <summary>
            Returns true if enumerator was re-created and first move next was set to the offset key.
            Default is False.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IExecutionEnumerator.StayAtOffsetkey">
            <summary>
            Sets a flag that on move next if enumerator is re-created with offset key, it should stay on it.
            Default is False.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IExecutionEnumerator.UseOffsetkey">
            <summary>
            Sets a flag that on enumerator create offset key should be used.
            Default is True.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IDynamicRange">
            <summary>
            Interface for dynamic ranges.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IStaticRange">
            <summary>
            Interface for static ranges.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BinaryLiteral">
            <summary>
            Class that holds information about a literal of type Binary.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryLiteral.#ctor(System.Nullable{Starcounter.Binary})">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.BinaryLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of this literal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryLiteral.EvaluateToBinary(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryLiteral.EvaluateToBinary(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <param name="startObj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if null-literal, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryLiteral.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this literal using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BooleanLiteral">
            <summary>
            Class that holds information about a literal of type Boolean.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanLiteral.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of this literal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanLiteral.EvaluateToBoolean(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanLiteral.EvaluateToBoolean(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <param name="startObj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if null-literal, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanLiteral.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this literal using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DateTimeLiteral">
            <summary>
            Class that holds information about a literal of type DateTime.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeLiteral.#ctor(System.Nullable{System.DateTime})">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DateTimeLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of this literal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeLiteral.EvaluateToDateTime(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeLiteral.EvaluateToDateTime(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <param name="startObj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if null-literal, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeLiteral.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this literal using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DecimalLiteral">
            <summary>
            Class that holds information about a literal of type Decimal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.#ctor(System.Nullable{System.Decimal})">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DecimalLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of this literal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.EvaluateToDecimal(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <param name="startObj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if null-literal, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this literal using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DoubleLiteral">
            <summary>
            Class that holds information about a literal of type Double.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.#ctor(System.Nullable{System.Double})">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DoubleLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of this literal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.EvaluateToDouble(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <param name="startObj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if null-literal, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this literal using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IntegerLiteral">
            <summary>
            Class that holds information about a literal of type integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.#ctor(System.Nullable{System.Int64})">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.IntegerLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of this literal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.EvaluateToInteger(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <param name="startObj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if null-literal, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this literal using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.Literal">
            <summary>
            Abstract base class for literals.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Literal.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends literal type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="T:Starcounter.Query.Execution.NumericalLiteral">
            <summary>
            Class that holds information about a numerical literal which can hold
            a value of one of the types: integer, unsigned integer, decimal or double.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.#ctor(System.Nullable{System.Int64})">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.NumericalLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of this literal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if value is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ObjectLiteral">
            <summary>
            Class that holds information about a literal of type "Object"
            (a value of an object reference).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectLiteral.#ctor(Starcounter.IObjectView)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectLiteral.#ctor(System.UInt64)">
            <summary>
            Constructor.
            </summary>
            <param name="objId">The ObjectID of this literal.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectLiteral.#ctor(Starcounter.Binding.ITypeBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="typeBind">The type binding of this null-literal.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of this literal.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectLiteral.QueryTypeCode">
            <summary>
            The type rowTypeBind of the object.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectLiteral.TypeBinding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectLiteral.EvaluateToObject(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectLiteral.EvaluateToObject(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <param name="startObj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if null-literal, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectLiteral.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this literal using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.StringLiteral">
            <summary>
            Class that holds information about a literal of type String.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringLiteral.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.StringLiteral.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
            <param name="isPreEvaluatedPattern">If this literal is a pre-evaluated pattern or not.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.StringLiteral.IsPreEvaluatedPattern">
            <summary>
            If this literal is a pre-evaluated pattern or not.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.StringLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of this literal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringLiteral.EvaluateToString(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringLiteral.EvaluateToString(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <param name="startObj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if null-literal, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringLiteral.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this literal using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.StringLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.UIntegerLiteral">
            <summary>
            Class that holds information about a literal of type unsigned integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.#ctor(System.Nullable{System.UInt64})">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.UIntegerLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of this literal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.EvaluateToUInteger(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <param name="startObj">Not used.</param>
            <returns>The value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this literal is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if null-literal, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this literal using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonBinary">
            <summary>
            Class that holds information about a binary comparison which is an operation
            with operands that are binary expressions and a result value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBinary.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Optimization.ExtentSet,Starcounter.Query.Execution.IBinaryExpression,Starcounter.Query.Execution.IBinaryExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="extentSet">A set of extents where this comparison cannot be executed 
            (only relevant when operator is IS or ISNOT and there is an outer join).</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ComparisonBinary.CanCodeGen">
            <summary>
            Gets if both expressions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBinary.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBinary.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBinary.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBinary.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBinary.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends operation type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBinary.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonBoolean">
            <summary>
            Class that holds information about a Boolean comparison which is an operation
            with operands that are Boolean expressions and a result value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBoolean.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Optimization.ExtentSet,Starcounter.Query.Execution.IBooleanExpression,Starcounter.Query.Execution.IBooleanExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="extentSet">A set of extents where this comparison cannot be executed 
            (only relevant when operator is IS or ISNOT and there is an outer join).</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ComparisonBoolean.CanCodeGen">
            <summary>
            Gets if both expressions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBoolean.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBoolean.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBoolean.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBoolean.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBoolean.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends operation type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonBoolean.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonDateTime">
            <summary>
            Class that holds information about a DateTime comparison which is an operation
            with operands that are DateTime expressions and a result value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDateTime.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Optimization.ExtentSet,Starcounter.Query.Execution.IDateTimeExpression,Starcounter.Query.Execution.IDateTimeExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="extSet">A set of extents where this comparison cannot be executed 
            (only relevant when operator is IS or ISNOT and there is an outer join).</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ComparisonDateTime.CanCodeGen">
            <summary>
            Gets if both expressions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDateTime.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDateTime.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDateTime.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDateTime.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDateTime.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends operation type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDateTime.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonDecimal">
            <summary>
            Class that holds information about a Decimal comparison which is an operation
            with operands that are Decimal, integer or unsigned integer expressions and a
            result value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDecimal.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Optimization.ExtentSet,Starcounter.Query.Execution.INumericalExpression,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="extSet">A set of extents where this comparison cannot be executed 
            (only relevant when operator is IS or ISNOT and there is an outer join).</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ComparisonDecimal.CanCodeGen">
            <summary>
            Gets if both expressions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDecimal.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDecimal.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDecimal.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDecimal.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDecimal.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends operation type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDecimal.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonDouble">
            <summary>
            Class that holds information about a Double comparison which is an operation
            with operands that are Double, Decimal, integer or unsigned integer expressions
            and a result value of type TruthValue. At least one operand should be a Double
            expression.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDouble.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Optimization.ExtentSet,Starcounter.Query.Execution.INumericalExpression,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="extSet">A set of extents where this comparison cannot be executed 
            (only relevant when operator is IS or ISNOT and there is an outer join).</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ComparisonDouble.CanCodeGen">
            <summary>
            Gets if both expressions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDouble.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDouble.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDouble.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDouble.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDouble.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends operation type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonDouble.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonInteger">
            <summary>
            Class that holds information about an integer comparison which is an operation
            with operands that are integer expressions and a result value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonInteger.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Optimization.ExtentSet,Starcounter.Query.Execution.INumericalExpression,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="extSet">A set of extents where this comparison cannot be executed 
            (only relevant when operator is IS or ISNOT and there is an outer join).</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ComparisonInteger.CanCodeGen">
            <summary>
            Gets if both expressions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonInteger.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonInteger.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonInteger.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonInteger.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonInteger.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends operation type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonInteger.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonNumerical">
            <summary>
            Class that holds information about a numerical comparison which is an operation
            with operands that are numerical and a result value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonNumerical.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Optimization.ExtentSet,Starcounter.Query.Execution.INumericalExpression,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="extSet">A set of extents where this comparison cannot be executed 
            (only relevant when operator is IS or ISNOT and there is an outer join).</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ComparisonNumerical.CanCodeGen">
            <summary>
            Gets if both expressions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonNumerical.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonNumerical.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonNumerical.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonNumerical.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonNumerical.GetObjectNoExpression(System.Int32)">
            <summary>
            Gets a numerical expression to which ObjectNo of this extent is equivalent.
            </summary>
            <param name="extentNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonNumerical.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends operation type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonNumerical.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonObject">
            <summary>
            Class that holds information about an object comparison which is an operation
            with operands that are object references and a result value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonObject.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Optimization.ExtentSet,Starcounter.Query.Execution.IObjectExpression,Starcounter.Query.Execution.IObjectExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="extSet">A set of extents where this comparison cannot be executed 
            (only relevant when operator is IS or ISNOT and there is an outer join).</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ComparisonObject.CanCodeGen">
            <summary>
            Gets if both expressions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonObject.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonObject.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonObject.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonObject.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonObject.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends operation type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonObject.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonString">
            <summary>
            Class that holds information about a String comparison which is an operation
            with operands that are String expressions and a result value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonString.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Optimization.ExtentSet,Starcounter.Query.Execution.IStringExpression,Starcounter.Query.Execution.IStringExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="extSet">A set of extents where this comparison cannot be executed 
            (only relevant when operator is IS or ISNOT and there is an outer join).</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonString.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Execution.IStringExpression,Starcounter.Query.Execution.IStringExpression,Starcounter.Query.Execution.IStringExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
            <param name="expr3">The third operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ComparisonString.CanCodeGen">
            <summary>
            Gets if all three expressions can code gen or third expression is null.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonString.SpecialLessThan(System.String,System.String)">
            <summary>
            Handle the special string comparison "string1 &lt; AppendMaxChar(string2)".
            Operator AppendMaxChar is used to handle upper end-point in "STARTS WITH" intervals.
            </summary>
            <param name="str1">First string to compare.</param>
            <param name="str2">Second string to compare.</param>
            <returns>True, if "str1 &lt; AppendMaxChar(str2)", otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonString.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonString.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonString.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonString.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonString.GetObjectIDExpression(System.Int32)">
            <summary>
            Gets a string expression to which ObjectID of this extent is equivalent.
            </summary>
            <param name="extentNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonString.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends operation type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonString.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ComparisonUInteger">
            <summary>
            Class that holds information about an unsigned integer comparison which is an operation
            with operands that are unsigned integer expressions and a result value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonUInteger.#ctor(Starcounter.Query.Execution.ComparisonOperator,Starcounter.Query.Optimization.ExtentSet,Starcounter.Query.Execution.INumericalExpression,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="compOp">The comparison operator of the operation.</param>
            <param name="extSet">A set of extents where this comparison cannot be executed 
            (only relevant when operator is IS or ISNOT and there is an outer join).</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ComparisonUInteger.CanCodeGen">
            <summary>
            Gets if both expressions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonUInteger.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonUInteger.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonUInteger.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonUInteger.GetPathTo(System.Int32)">
            <summary>
            Gets a path to the given extent.
            The path is used for an index scan for the extent with the input extent number, 
            if there is such a path and if there is a corresponding index.
            </summary>
            <param name="extentNum">Input extent number.</param>
            <returns>A path, if an appropriate path is found, otherwise null.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonUInteger.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends operation type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ComparisonUInteger.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.InPredicateString">
            <summary>
            Class that holds information about an in-predicate where the left argument is
            a String expression and the right argument is a set of String expressions.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.InPredicateString.DbTypeCode">
            <summary>
            The DbTypeCode of the value of the expression or the property.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.InPredicateString.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the expression is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>True, if the value of the expression when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.InPredicateString.#ctor(Starcounter.Query.Execution.IStringExpression,System.Collections.Generic.List{Starcounter.Query.Execution.IStringExpression})">
            <summary>
            Constructor.
            </summary>
            <param name="expr">The left argument to the in-predicate.</param>
            <param name="list">The right argument to the in-predicate.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.InPredicateString.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this in-predicate when evaluated on an input object.
            All properties in this in-predicate are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this in-predicate.</param>
            <returns>The truth value of this in-predicate when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.InPredicateString.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this in-predicate when evaluated on an input object.
            All properties in this in-predicate are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this in-predicate.</param>
            <returns>The Boolean value of this in-predicate when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.InPredicateString.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.InPredicateString.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.LogicalLiteral">
            <summary>
            Class that holds information about a literal of type logical (TruthValue).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalLiteral.#ctor(Starcounter.Query.Execution.TruthValue)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of this literal.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalLiteral.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The truth value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalLiteral.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The Boolean value of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this literal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this literal.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalLiteral.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.LogicalLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of the value of the expression or the property.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the expression is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <returns>True, if the value of the expression when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.LogicalOperation">
            <summary>
            Class that holds information about a Logical operation which is an operation
            with operands that are conditions and a result value of type TruthValue.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalOperation.#ctor(Starcounter.Query.Execution.LogicalOperator,Starcounter.Query.Execution.ILogicalExpression,Starcounter.Query.Execution.ILogicalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="logOp">The Logical operator of the operation.</param>
            <param name="cond1">The first operand of the operation.</param>
            <param name="cond2">The second operand of the operation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalOperation.#ctor(Starcounter.Query.Execution.LogicalOperator,Starcounter.Query.Execution.ILogicalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="logOp">The Logical operator of the operation.</param>
            <param name="cond">The operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.LogicalOperation.CanCodeGen">
            <summary>
            Gets if both conditions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalOperation.Evaluate(Starcounter.IObjectView)">
            <summary>
            Calculates the truth value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The truth value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalOperation.Filtrate(Starcounter.IObjectView)">
            <summary>
            Calculates the Boolean value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The Boolean value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalOperation.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.LogicalOperation.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BooleanMethod">
            <summary>
            Class that holds information about a method with return type Boolean.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethod.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Query.Execution.IObjectExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this method belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type rowTypeBind of the object to which this method belongs.</param>
            <param name="argument">The type rowTypeBind of the return object.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanMethod.ExtentNumber">
            <summary>
            The extent number of the extent to which this method belongs.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanMethod.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanMethod.FullName">
            <summary>
            Full name to uniquely identify the path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanMethod.DbTypeCode">
            <summary>
            The DbTypeCode of the return value of this method.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethod.EvaluateToBoolean(Starcounter.IObjectView)">
            <summary>
            Calculates the return value of this method when evaluated on an input object.
            If the input object is not a Row then all member references in this expression (argExpression) should refer
            to the extent number (extentNumber) of this method and the input object should belong to the corresponding extent.
            </summary>
            <param name="obj">The object on which to evaluate this method.</param>
            <returns>The return value of this method when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethod.EvaluateToBoolean(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the return value of this method when evaluated on an input object and a start-object of the path to which
            the input object belongs.
            If the input object is not a Row then all member references in this expression (argExpression) should refer
            to the extent number (extentNumber) of this method and the input object should belong to the corresponding extent.
            </summary>
            <param name="obj">The object on which to evaluate this method.</param>
            <param name="startObj">The start object of the path expression.</param>
            <returns>The return value of this method when evaluated on the input object and the start-object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethod.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the return value of the method is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this method.</param>
            <returns>True, if the return value of this method when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethod.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethod.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BooleanMethodLiteral">
            <summary>
            Class that holds information about a method literal with return type Boolean.
            An method literal is a method where the extent number is replaced by a specific object.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethodLiteral.#ctor(Starcounter.IObjectView,Starcounter.Query.Execution.IObjectExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The specific object to which this method belongs.</param>
            <param name="argument">The argument to this method.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethodLiteral.#ctor(Starcounter.Binding.ITypeBinding,Starcounter.Query.Execution.IObjectExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="typeBind">The type binding of this null-method-literal.</param>
            <param name="argument">The argument to this method.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanMethodLiteral.ExtentNumber">
            <summary>
            The extent number of the extent to which this method-literal belongs.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanMethodLiteral.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanMethodLiteral.FullName">
            <summary>
            Full name to uniquely identify the path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanMethodLiteral.DbTypeCode">
            <summary>
            The DbTypeCode of the return value of this method.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethodLiteral.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethodLiteral.EvaluateToBoolean(Starcounter.IObjectView)">
            <summary>
            Calculates the return value of this method when the arguments are evaluated on an input object.
            If the input object is not a Row then all member references in this expression (argExpression) should refer
            to the extent number (extentNumber) of this method and the input object should belong to the corresponding extent.
            </summary>
            <param name="obj">The object on which to evaluate the argument of this method.</param>
            <returns>The return value of this method when the arguments are evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethodLiteral.EvaluateToBoolean(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the return value of this method when evaluated on an input object and a start-object of the path to which
            the input object belongs.
            If the input object is not a Row then all member references in this expression (argExpression) should refer
            to the extent number (extentNumber) of this method and the input object should belong to the corresponding extent.
            </summary>
            <param name="obj">Not used.</param>
            <param name="startObj">The start object of the path expression.</param>
            <returns>The return value of this method when the arguments are evaluated on the start-object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethodLiteral.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the return value of the method is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this method.</param>
            <returns>True, if the return value of this method when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethodLiteral.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanMethodLiteral.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectCast.ExtentNumber">
            <summary>
            The extent number of the extent to which this cast belongs.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectCast.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectCast.FullName">
            <summary>
            Full name to uniquely identify the path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectCast.DbTypeCode">
            <summary>
            The DbTypeCode of the casted path-item.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectCast.TypeBinding">
            <summary>
            The type binding of the casted path-item.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectCast.EvaluateToObject(Starcounter.IObjectView)">
            <summary>
            Calculates the value of the cast operation when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the cast operation.</param>
            <returns>The value of the cast operation evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectCast.EvaluateToObject(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the cast operation when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the cast operation.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the cast operation evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectCast.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the cast operation is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the cast operation.</param>
            <returns>True, if the value of the cast operation when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectCast.Instantiate_OLD(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectCast.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DecimalOperation">
            <summary>
            Class that holds information about an operation with result value of type Decimal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.#ctor(Starcounter.Query.Execution.NumericalOperator,Starcounter.Query.Execution.INumericalExpression,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="numOp">The operator of the operation.</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.#ctor(Starcounter.Query.Execution.NumericalOperator,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="numOp">The operator of the operation.</param>
            <param name="expr">The operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DecimalOperation.DbTypeCode">
            <summary>
            The DbTypeCode of the result of the operation.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the operation is null when evaluated on an input
            object.
            </summary>
            <param name="obj">The object on which to evaluate the operation.</param>
            <returns>True, if the value of the operation when evaluated on the input
            object is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalOperation.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DoubleOperation">
            <summary>
            Class that holds information about an operation with result value of type Double.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.#ctor(Starcounter.Query.Execution.NumericalOperator,Starcounter.Query.Execution.INumericalExpression,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="numOp">The operator of the operation.</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.#ctor(Starcounter.Query.Execution.NumericalOperator,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="numOp">The operator of the operation.</param>
            <param name="expr">The operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DoubleOperation.DbTypeCode">
            <summary>
            The DbTypeCode of the result of the operation.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the operation is null when evaluated on an input
            object.
            </summary>
            <param name="obj">The object on which to evaluate the operation.</param>
            <returns>True, if the value of the operation when evaluated on the input
            object is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleOperation.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IntegerOperation">
            <summary>
            Class that holds information about an operation with result value of type integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.#ctor(Starcounter.Query.Execution.NumericalOperator,Starcounter.Query.Execution.INumericalExpression,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="numOp">The operator of the operation.</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.#ctor(Starcounter.Query.Execution.NumericalOperator,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="numOp">The operator of the operation.</param>
            <param name="expr">The operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.IntegerOperation.DbTypeCode">
            <summary>
            The DbTypeCode of the result of the operation.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the operation is null when evaluated on an input
            object.
            </summary>
            <param name="obj">The object on which to evaluate the operation.</param>
            <returns>True, if the value of the operation when evaluated on the input
            object is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerOperation.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.NumericalOperation">
            <summary>
            Class that holds information about a numerical operation with result value of some
            of the types: integer, unsigned integer, decimal or double.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.#ctor(Starcounter.Query.Execution.NumericalOperator,Starcounter.Query.Execution.INumericalExpression,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="numOp">The operator of the operation.</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.#ctor(Starcounter.Query.Execution.NumericalOperator,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="numOp">The operator of the operation.</param>
            <param name="expr">The operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.NumericalOperation.DbTypeCode">
            <summary>
            The DbTypeCode of the result of the operation.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.NumericalOperation.QueryTypeCode">
            <summary>
            The QueryTypeCode of the result of the operation.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Decimal.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Double.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Int64.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a ceiling (round up) nullable Int64.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a floor (round down) nullable Int64.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable UInt64.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a ceiling (round up) nullable UInt64.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a floor (round down) nullable UInt64.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the operation is null when evaluated on an input
            object.
            </summary>
            <param name="obj">The object on which to evaluate the operation.</param>
            <returns>True, if the value of the operation when evaluated on the input
            object is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalOperation.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.StringOperation">
            <summary>
            Class that holds information about an operation with result value of type
            String.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringOperation.#ctor(Starcounter.Query.Execution.StringOperator,Starcounter.Query.Execution.IStringExpression,Starcounter.Query.Execution.IStringExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="strOp">The operator of the operation.</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.StringOperation.#ctor(Starcounter.Query.Execution.StringOperator,Starcounter.Query.Execution.IStringExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="strOp">The operator of the operation.</param>
            <param name="expr">The operand of the operation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.StringOperation.AppendMaxChar">
            <summary>
            Controls if the current operator is AppendMaxChar.
            </summary>
            <returns>True, if current operator is AppendMaxChar, otherwise false.</returns>
        </member>
        <member name="P:Starcounter.Query.Execution.StringOperation.DbTypeCode">
            <summary>
            The DbTypeCode of the result of the operation.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringOperation.EvaluateToString(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringOperation.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the operation is null when evaluated on an input
            object.
            </summary>
            <param name="obj">The object on which to evaluate the operation.</param>
            <returns>True, if the value of the operation when evaluated on the input
            object is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringOperation.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringOperation.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.UIntegerOperation">
            <summary>
            Class that holds information about an operation with result value of type unsigned integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.#ctor(Starcounter.Query.Execution.NumericalOperator,Starcounter.Query.Execution.INumericalExpression,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="numOp">The operator of the operation.</param>
            <param name="expr1">The first operand of the operation.</param>
            <param name="expr2">The second operand of the operation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.#ctor(Starcounter.Query.Execution.NumericalOperator,Starcounter.Query.Execution.INumericalExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="numOp">The operator of the operation.</param>
            <param name="expr">The operand of the operation.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.UIntegerOperation.DbTypeCode">
            <summary>
            The DbTypeCode of the result of the operation.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation when evaluated on an input object.
            All properties in this operation are evaluated on the input object.
            </summary>
            <param name="obj">The object on which to evaluate this operation.</param>
            <returns>The value of this operation when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this operation as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this operation.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the operation is null when evaluated on an input
            object.
            </summary>
            <param name="obj">The object on which to evaluate the operation.</param>
            <returns>True, if the value of the operation when evaluated on the input
            object is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerOperation.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BinaryPath">
            <summary>
            Class that holds information about a path of type Binary.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryPath.#ctor(System.Int32,System.Collections.Generic.List{Starcounter.Query.Execution.IObjectPathItem},Starcounter.Query.Execution.IBinaryPathItem)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this path belongs.</param>
            <param name="path">A currentLogExprList of object expressions (references) which constitutes a path.</param>
            <param name="member">The end member of this path.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.BinaryPath.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BinaryPath.FullName">
            <summary>
            Full path name to uniquely identify this path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BinaryPath.DbTypeCode">
            <summary>
            The DbTypeCode of (the end member of) this path.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryPath.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryPath.EvaluateToBinary(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this path.</param>
            <returns>The value of this path when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryPath.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the path is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the path.</param>
            <returns>True, if the value of the path when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryPath.Instantiate_OLD(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryPath.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this path using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryPath.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BooleanPath">
            <summary>
            Class that holds information about a path of type Boolean.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanPath.#ctor(System.Int32,System.Collections.Generic.List{Starcounter.Query.Execution.IObjectPathItem},Starcounter.Query.Execution.IBooleanPathItem)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this path belongs.</param>
            <param name="path">A currentLogExprList of object expressions (references) which constitutes
            a path.</param>
            <param name="member">The end member of this path.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanPath.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanPath.FullName">
            <summary>
            Full path name to uniquely identify this path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanPath.DbTypeCode">
            <summary>
            The DbTypeCode of (the end member of) this path.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanPath.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanPath.EvaluateToBoolean(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this path.</param>
            <returns>The value of this path when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanPath.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the path is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the path.</param>
            <returns>True, if the value of the path when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanPath.Instantiate_OLD(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanPath.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this path using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanPath.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DateTimePath">
            <summary>
            Class that holds information about a path of type DateTime.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimePath.#ctor(System.Int32,System.Collections.Generic.List{Starcounter.Query.Execution.IObjectPathItem},Starcounter.Query.Execution.IDateTimePathItem)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this path belongs.</param>
            <param name="path">A currentLogExprList of object expressions (references) which constitutes
            a path.</param>
            <param name="member">The end member of this path.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DateTimePath.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.DateTimePath.FullName">
            <summary>
            Full path name to uniquely identify this path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.DateTimePath.DbTypeCode">
            <summary>
            The DbTypeCode of (the end member of) this path.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimePath.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimePath.EvaluateToDateTime(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this path.</param>
            <returns>The value of this path when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimePath.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the path is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the path.</param>
            <returns>True, if the value of the path when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimePath.Instantiate_OLD(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimePath.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this path using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimePath.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DecimalPath">
            <summary>
            Class that holds information about a path of type Decimal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.#ctor(System.Int32,System.Collections.Generic.List{Starcounter.Query.Execution.IObjectPathItem},Starcounter.Query.Execution.IDecimalPathItem)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this path belongs.</param>
            <param name="path">A currentLogExprList of object expressions (references) which constitutes
            a path.</param>
            <param name="member">The end member of this path.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DecimalPath.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.DecimalPath.FullName">
            <summary>
            Full path name to uniquely identify this path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.DecimalPath.DbTypeCode">
            <summary>
            The DbTypeCode of (the end member of) this path.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this path.</param>
            <returns>The value of this path when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the path is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the path.</param>
            <returns>True, if the value of the path when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.Instantiate_OLD(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this path using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalPath.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DoublePath">
            <summary>
            Class that holds information about a path of type Double.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.#ctor(System.Int32,System.Collections.Generic.List{Starcounter.Query.Execution.IObjectPathItem},Starcounter.Query.Execution.IDoublePathItem)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this path belongs.</param>
            <param name="path">A currentLogExprList of object expressions (references) which constitutes
            a path.</param>
            <param name="member">The end member of this path.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DoublePath.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.DoublePath.FullName">
            <summary>
            Full path name to uniquely identify this path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.DoublePath.DbTypeCode">
            <summary>
            The DbTypeCode of (the end member of) this path.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this path.</param>
            <returns>The value of this path when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the path is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the path.</param>
            <returns>True, if the value of the path when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.Instantiate_OLD(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this path using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DoublePath.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IntegerPath">
            <summary>
            Class that holds information about a path of type integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.#ctor(System.Int32,System.Collections.Generic.List{Starcounter.Query.Execution.IObjectPathItem},Starcounter.Query.Execution.IIntegerPathItem)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this path belongs.</param>
            <param name="path">A currentLogExprList of object expressions (references) which constitutes
            a path.</param>
            <param name="member">The end member of this path.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.IntegerPath.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IntegerPath.FullName">
            <summary>
            Full path name to uniquely identify this path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.IntegerPath.DbTypeCode">
            <summary>
            The DbTypeCode of (the end member of) this path.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this path.</param>
            <returns>The value of this path when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the path is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the path.</param>
            <returns>True, if the value of the path when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.Instantiate_OLD(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this path using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerPath.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ObjectPath">
            <summary>
            Class that holds information about a path of type Object (reference).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectPath.#ctor(System.Int32,System.Collections.Generic.List{Starcounter.Query.Execution.IObjectPathItem},Starcounter.Query.Execution.IObjectPathItem)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this path belongs.</param>
            <param name="path">A currentLogExprList of object expressions (references) which constitutes
            a path.</param>
            <param name="member">The end member of this path.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectPath.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectPath.FullName">
            <summary>
            Full path name to uniquely identify this path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectPath.DbTypeCode">
            <summary>
            The DbTypeCode of (the end member of) this path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectPath.TypeBinding">
            <summary>
            The type binding of the end (object) member of this path.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectPath.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectPath.EvaluateToObject(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this path.</param>
            <returns>The value of this path when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectPath.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the path is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the path.</param>
            <returns>True, if the value of the path when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectPath.Instantiate_OLD(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectPath.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this path using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectPath.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.Path">
            <summary>
            Abstract base class for paths.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Path.ExtentNumber">
            <summary>
            The extent number corresponding to this path.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Path.Clone(Starcounter.Query.Execution.VariableArray)">
            <summary>
            Generic clone for ITypeExpression types.
            </summary>
            <param name="varArray">Variables array.</param>
            <returns>Clone of the expression.</returns>
        </member>
        <member name="T:Starcounter.Query.Execution.StringPath">
            <summary>
            Class that holds information about a path of type String.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringPath.#ctor(System.Int32,System.Collections.Generic.List{Starcounter.Query.Execution.IObjectPathItem},Starcounter.Query.Execution.IStringPathItem)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this path belongs.</param>
            <param name="path">A currentLogExprList of object expressions (references) which constitutes
            a path.</param>
            <param name="member">The end member of this path.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.StringPath.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.StringPath.FullName">
            <summary>
            Full path name to uniquely identify this path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.StringPath.DbTypeCode">
            <summary>
            The DbTypeCode of (the end member of) this path.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringPath.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.StringPath.EvaluateToString(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this path.</param>
            <returns>The value of this path when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringPath.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the path is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the path.</param>
            <returns>True, if the value of the path when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringPath.Instantiate_OLD(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringPath.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this path using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.StringPath.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.UIntegerPath">
            <summary>
            Class that holds information about a path of type unsigned integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.#ctor(System.Int32,System.Collections.Generic.List{Starcounter.Query.Execution.IObjectPathItem},Starcounter.Query.Execution.IUIntegerPathItem)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this path belongs.</param>
            <param name="path">A currentLogExprList of object expressions (references) which constitutes
            a path.</param>
            <param name="member">The end member of this path.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.UIntegerPath.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.UIntegerPath.FullName">
            <summary>
            Full path name to uniquely identify this path.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.UIntegerPath.DbTypeCode">
            <summary>
            The DbTypeCode of (the end member of) this path.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this path.</param>
            <returns>The value of this path when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this path as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this path.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the path is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the path.</param>
            <returns>True, if the value of the path when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.Instantiate_OLD(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this path using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerPath.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BinaryProperty">
            <summary>
            Class that holds information about a property of type Binary.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Binding.IPropertyBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
            <param name="propBind">The property binding of this property.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.BinaryProperty.QueryTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryProperty.EvaluateToBinary(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryProperty.EvaluateToBinary(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BooleanProperty">
            <summary>
            Class that holds information about a property of type Boolean.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Binding.IPropertyBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
            <param name="propBind">The property binding of this property.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanProperty.QueryTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanProperty.EvaluateToBoolean(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanProperty.EvaluateToBoolean(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DateTimeProperty">
            <summary>
            Class that holds information about a property of type DateTime.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Binding.IPropertyBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
            <param name="propBind">The property binding of this property.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DateTimeProperty.QueryTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeProperty.EvaluateToDateTime(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeProperty.EvaluateToDateTime(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DecimalProperty">
            <summary>
            Class that holds information about a property of type Decimal.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Binding.IPropertyBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
            <param name="propBind">The property binding of this property.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DecimalProperty.QueryTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.EvaluateToDecimal(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DoubleProperty">
            <summary>
            Class that holds information about a property of type Double.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Binding.IPropertyBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
            <param name="propBind">The property binding of this property.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DoubleProperty.QueryTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.EvaluateToDouble(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.IntegerProperty">
            <summary>
            Class that holds information about a property of type integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Binding.IPropertyBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
            <param name="propBind">The property binding of this property.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.IntegerProperty.QueryTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.EvaluateToInteger(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.NumericalProperty">
            <summary>
            Class that holds information about a property of type integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Binding.IPropertyBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
            <param name="propBind">The property binding of this property.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ObjectProperty">
            <summary>
            Class that holds information about a property of type Object (object reference).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Binding.IPropertyBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
            <param name="propBind">The property binding of this property.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectProperty.TypeBinding">
            <summary>
            The type binding of this property of type object (reference).
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectProperty.QueryTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectProperty.EvaluateToObject(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectProperty.EvaluateToObject(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Members, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other members are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ObjectThis">
            <summary>
            Class that holds information about the pseudo property "this",
            which is a reference to the object itself.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectThis.#ctor(System.Int32,Starcounter.Binding.ITypeBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this pseudo property belongs.</param>
            <param name="typeBind">The type binding of this pseudo property (object).</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectThis.ExtentNumber">
            <summary>
            The extent number of the extent to which this pseudo property belongs.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectThis.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectThis.FullName">
            <summary>
            Full path name to uniquely identify this pseudo property.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectThis.DbTypeCode">
            <summary>
            The DbTypeCode of this pseudo property (object).
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectThis.TypeBinding">
            <summary>
            The type binding of this pseudo property (object).
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectThis.CanCodeGen">
            <summary>
            Always true
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectThis.EvaluateToObject(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this pseudo property when evaluated on an input object,
            which is the input object itself.
            </summary>
            <param name="obj">The object on which to evaluate this pseudo property.</param>
            <returns>The value of the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectThis.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectThis.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectThis.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectThis.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectThis.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends reference type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectThis.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.Property">
            <summary>
            Abstract base class for properties.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Property.ExtentNumber">
            <summary>
            The extent number of the extent to which this property belongs.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Property.Clone(Starcounter.Query.Execution.VariableArray)">
            <summary>
            Generic clone for ITypeExpression types.
            </summary>
            <param name="varArray">Variables array.</param>
            <returns>Clone of the expression.</returns>
        </member>
        <member name="P:Starcounter.Query.Execution.Property.Name">
            <summary>
            Name to be displayed for example as column header in a result grid.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Property.FullName">
            <summary>
            Full path name to uniquely identify this property.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Property.DbTypeCode">
            <summary>
            The DbTypeCode of this property.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Property.PropertyIndex">
            <summary>
            The index of this property within the type.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Property.DataIndex">
            <summary>
            Gets the data index of this property
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Property.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends property type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.Property.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.StringProperty">
            <summary>
            Class that holds information about a property of type String.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Binding.IPropertyBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
            <param name="propBind">The property binding of this property.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.StringProperty.QueryTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.StringProperty.EvaluateToString(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringProperty.EvaluateToString(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.StringProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.UIntegerProperty">
            <summary>
            Class that holds information about a property of type unsigned integer.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.#ctor(System.Int32,Starcounter.Binding.ITypeBinding,Starcounter.Binding.IPropertyBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="extNum">The extent number to which this property belongs.
            If it does not belong to any extent number, which is the case for path expressions,
            then the number should be -1.</param>
            <param name="typeBind">The type binding of the object to which this property belongs.</param>
            <param name="propBind">The property binding of this property.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.UIntegerProperty.QueryTypeCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate this property.</param>
            <returns>The value of this property when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this property as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this property.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.EvaluateToUInteger(Starcounter.IObjectView,Starcounter.IObjectView)">
            <summary>
            Calculates the value of the path-item when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the expression.</param>
            <param name="startObj">The start object of the current path expression.</param>
            <returns>The value of the expression when evaluated on the input object.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of the property is null when evaluated on an input object.
            </summary>
            <param name="obj">The object on which to evaluate the property.</param>
            <returns>True, if the value of the property when evaluated on the input object
            is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates an more instantiated copy of this expression by evaluating it on a Row.
            Properties, with extent numbers for which there exist objects attached to the Row,
            are evaluated and instantiated to literals, other properties are not changed.
            </summary>
            <param name="obj">The Row on which to evaluate the expression.</param>
            <returns>A more instantiated expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.BuildString(Starcounter.Query.Execution.MyStringBuilder,System.Int32)">
            <summary>
            Builds a string presentation of this property using the input string-builder.
            </summary>
            <param name="stringBuilder">String-builder to use.</param>
            <param name="tabs">Number of tab indentations for the presentation.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryDynamicRange.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryRangePoint.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanDynamicRange.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanRangePoint.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.FilterKeyBuilder.PrecomputeBuffer(System.Nullable{System.Int64})">
            <summary>
            Precomputes the buffer.
            </summary>
            <param name="value">The value.</param>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.FilterKeyBuilder.PrecomputeBuffer(System.Nullable{System.UInt64})">
            <summary>
            Precomputes the buffer.
            </summary>
            <param name="value">The value.</param>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.FilterKeyBuilder.PrecomputeBuffer(System.Nullable{System.Double})">
            <summary>
            Precomputes the buffer.
            </summary>
            <param name="value">The value.</param>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.FilterKeyBuilder.PrecomputeBuffer(System.Nullable{System.Decimal})">
            <summary>
            Precomputes the buffer.
            </summary>
            <param name="value">The value.</param>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.FilterKeyBuilder.PrecomputeBuffer(System.Nullable{Starcounter.Binary})">
            <summary>
            Precomputes the buffer.
            </summary>
            <param name="value">The value.</param>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.FilterKeyBuilder.PrecomputeBuffer(System.Nullable{System.Boolean})">
            <summary>
            Precomputes the buffer.
            </summary>
            <param name="value">The value.</param>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.FilterKeyBuilder.PrecomputeBuffer(System.Nullable{System.DateTime})">
            <summary>
            Precomputes the buffer.
            </summary>
            <param name="value">The value.</param>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.FilterKeyBuilder.PrecomputeBuffer(Starcounter.IObjectView)">
            <summary>
            Precomputes the buffer.
            </summary>
            <param name="value">The value.</param>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.FilterKeyBuilder.PrecomputeBuffer(System.String,System.Boolean)">
            <summary>
            Precomputes the buffer.
            </summary>
            <param name="value">The value.</param>
            <param name="appendMaxChar">The append max char.</param>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.FilterKeyBuilder.GetBufferCached">
            <summary>
            Gets the buffer cached.
            </summary>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.IndexKeyBuilder.GetBufferCached">
            <summary>
            Gets the buffer cached.
            </summary>
            <returns>Byte[][].</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeDynamicRange.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeRangePoint.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalDynamicRange.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DynamicRange">
            <summary>
            Abstract base class for dynamic ranges.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerDynamicRange.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.MaxValueObject">
            <summary>
            A MaxValueObject is used to represent the max value of a reference type in an range.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalRangePoint.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectDynamicRange.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectRangePoint.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.RangePoint">
            <summary>
            Abstract base class for range points.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.RangeValue">
            <summary>
            Abstract base class for range values.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringDynamicRange.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringRangePoint.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerDynamicRange.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinarySetFunction.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanSetFunction.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeSetFunction.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DecimalSetFunction.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DoubleSetFunction.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.IntegerSetFunction.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalSetFunction.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectSetFunction.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.SetFunction">
            <summary>
            Abstract base class for set functions.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringSetFunction.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.UIntegerSetFunction.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.TemporaryObject.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.TemporaryProperty.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.TemporaryTypeBinding.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BinaryVariable">
            <summary>
            Class that holds information about a variable of type Binary.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryVariable.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryVariable.#ctor(System.Int32,System.Nullable{Starcounter.Binary})">
            <summary>
            Constructor.
            </summary>
            <param name="number">The number.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.BinaryVariable.Value">
            <summary>
            The value of this variable.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BinaryVariable.DbTypeCode">
            <summary>
            The DbTypeCode of this variable.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryVariable.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryVariable.ProlongValue(Starcounter.Query.Execution.IExecutionEnumerator)">
            <summary>
            Sets value to variable in execution enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryVariable.EvaluateToBinary(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryVariable.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this variable is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if value is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryVariable.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BinaryVariable.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.BooleanVariable">
            <summary>
            Class that holds information about a variable of type Boolean.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanVariable.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="number">The order number (starting at 0) of this variable in an SQL statement.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanVariable.#ctor(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="number">The order number (starting at 0) of this variable in an SQL statement.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanVariable.Value">
            <summary>
            The value of this variable.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.BooleanVariable.DbTypeCode">
            <summary>
            The DbTypeCode of this variable.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanVariable.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanVariable.ProlongValue(Starcounter.Query.Execution.IExecutionEnumerator)">
            <summary>
            Sets value to variable in execution enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanVariable.EvaluateToBoolean(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanVariable.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this variable is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if value is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanVariable.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.BooleanVariable.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.DateTimeVariable">
            <summary>
            Class that holds information about a variable of type DateTime.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeVariable.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="number">The order number (starting at 0) of this variable in an SQL statement.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeVariable.#ctor(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Constructor.
            </summary>
            <param name="number">The order number (starting at 0) of this variable in an SQL statement.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.DateTimeVariable.Value">
            <summary>
            The value of this variable.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.DateTimeVariable.DbTypeCode">
            <summary>
            The DbTypeCode of this variable.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeVariable.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeVariable.ProlongValue(Starcounter.Query.Execution.IExecutionEnumerator)">
            <summary>
            Sets value to variable in execution enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeVariable.EvaluateToDateTime(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeVariable.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this variable is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if value is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeVariable.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.DateTimeVariable.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.NumericalVariable">
            <summary>
            Class that holds information about a numerical variable which can hold
            a value of one of the types: integer, unsigned integer, decimal or double.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="number">The order number (starting at 0) of this variable in an SQL statement.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.#ctor(System.Int32,Starcounter.Binding.DbTypeCode)">
            <summary>
            Constructor with inherited type code, used for cloning.
            </summary>
            <param name="number">The order number (starting at 0) of this variable in an SQL statement.</param>
            <param name="dbTypeCode">Type code of the previous numerical variable instance.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.NumericalVariable.DbTypeCode">
            <summary>
            The DbTypeCode of this variable.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.EvaluateToDouble(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable as a nullable Double.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.EvaluateToDecimal(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable as a nullable Decimal.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.EvaluateToInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable as a nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.EvaluateToIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable as a ceiling (round up) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.EvaluateToIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable as a floor (round down) nullable Int64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.EvaluateToUInteger(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable as a nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.EvaluateToUIntegerCeiling(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable as a ceiling (round up) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.EvaluateToUIntegerFloor(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable as a floor (round down) nullable UInt64.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this variable is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if value is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.ProlongValue(Starcounter.Query.Execution.IExecutionEnumerator)">
            <summary>
            Sets value to given variable.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.NumericalVariable.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.ObjectVariable">
            <summary>
            Class that holds information about a variable of type Object (reference).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectVariable.#ctor(System.Int32,Starcounter.Binding.ITypeBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="number">The order number (starting at 0) of this variable in an SQL statement.</param>
            <param name="typeBind">The type-binding specifying the type of the variable.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectVariable.#ctor(System.Int32,Starcounter.IObjectView)">
            <summary>
            Constructor.
            </summary>
            <param name="number">The order number (starting at 0) of this variable in an SQL statement.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectVariable.Value">
            <summary>
            The value of this variable.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectVariable.DbTypeCode">
            <summary>
            The DbTypeCode of this variable.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.ObjectVariable.TypeBinding">
            <summary>
            The type binding of the object.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectVariable.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectVariable.ProlongValue(Starcounter.Query.Execution.IExecutionEnumerator)">
            <summary>
            Sets value to variable in execution enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectVariable.EvaluateToObject(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectVariable.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this variable is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if value is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectVariable.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.ObjectVariable.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.StringVariable">
            <summary>
            Class that holds information about a variable of type String.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringVariable.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="number">The order number (starting at 0) of this variable in an SQL statement.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.StringVariable.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="number">The order number (starting at 0) of this variable in an SQL statement.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="P:Starcounter.Query.Execution.StringVariable.Value">
            <summary>
            The value of this variable.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.StringVariable.DbTypeCode">
            <summary>
            The DbTypeCode of this variable.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringVariable.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.StringVariable.ProlongValue(Starcounter.Query.Execution.IExecutionEnumerator)">
            <summary>
            Sets value to variable in execution enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.StringVariable.EvaluateToString(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringVariable.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this variable is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if value is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringVariable.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.StringVariable.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.TypeVariable">
            <summary>
            Class that holds information about a variable of type Type.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeVariable.AppendToByteArray(Starcounter.Query.Execution.FilterKeyBuilder,Starcounter.IObjectView)">
            <summary>
            Appends data of this leaf to the provided filter key.
            </summary>
            <param name="key">Reference to the filter key to which data should be appended.</param>
            <param name="obj">Row for which evaluation should be performed.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeVariable.ProlongValue(Starcounter.Query.Execution.IExecutionEnumerator)">
            <summary>
            Sets value to variable in execution enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeVariable.EvaluateToType(Starcounter.IObjectView)">
            <summary>
            Calculates the value of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>The value of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeVariable.EvaluatesToNull(Starcounter.IObjectView)">
            <summary>
            Examines if the value of this variable is null.
            </summary>
            <param name="obj">Not used.</param>
            <returns>True, if value is null, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeVariable.Instantiate(Starcounter.Query.Execution.Row)">
            <summary>
            Creates a copy of this variable.
            </summary>
            <param name="obj">Not used.</param>
            <returns>A copy of this variable.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.TypeVariable.GenerateCompilableCode(Starcounter.Query.Execution.CodeGenStringGenerator)">
            <summary>
            Generates compilable code representation of this data structure.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Execution.Variable">
            <summary>
            Abstract base class for variables.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.Variable.CanCodeGen">
            <summary>
            Always true
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.Variable.Clone(Starcounter.Query.Execution.VariableArray)">
            <summary>
            Generic clone for ITypeExpression types.
            </summary>
            <param name="varArray">Variables array.</param>
            <returns>Clone of the expression.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.Variable.AddNodeTypeToList(System.Collections.Generic.List{Starcounter.Query.Execution.ConditionNodeType})">
            <summary>
            Appends variable type to the node type list.
            </summary>
            <param name="nodeTypeList">List with condition nodes types.</param>
        </member>
        <member name="T:Starcounter.Query.Execution.VariableArray">
            <summary>
            Class that represents a list of variables used in an SQL statement.
            Also holds some flags describing the SQL statement.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.VariableArray.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.VariableArray.TransactionId">
            <summary>
            Sets the transaction handle value.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.VariableArray.Length">
            <summary>
            The length of the variable list.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.VariableArray.ProlongValues(Starcounter.Query.Execution.IExecutionEnumerator)">
            <summary>
            Prolongs all variable values to given execution enumerator.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.VariableArray.CloneEmpty">
            <summary>
            Creates an empty copy of current variable array.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.VariableArray.Reset">
            <summary>
            Resets the variable array shared data.
            </summary>
        </member>
        <member name="P:Starcounter.Query.Execution.VariableArray.Completed">
            <summary>
            For debug purposes to control the variable list is correct and completed.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.VariableArray.SetElement(System.Int32,Starcounter.Query.Execution.IVariable)">
            <summary>
            Assigning variable directly.
            </summary>
            <param name="index">Index of the variable in the array.</param>
            <param name="variable">Reference to a replacing variable.</param>
        </member>
        <member name="M:Starcounter.Query.Execution.VariableArray.GetElement(System.Int32)">
            <summary>
            Retrieves variable from certain position in the array.
            </summary>
            <param name="index">Position in the array.</param>
            <returns>Reference to a variable at index.</returns>
        </member>
        <member name="M:Starcounter.Query.Execution.VariableArray.GenerateQueryParamsCode(Starcounter.Query.Execution.CodeGenStringGenerator,Starcounter.Query.Execution.VariableArray)">
            <summary>
            Generates compilable code for handling variables.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Execution.VariableArray.ToString">
            <summary>
            Used for debug purposes.
            </summary>
            <returns>A string representation of the variable values.</returns>
        </member>
        <member name="T:Starcounter.Query.Optimization.ConditionDictionary">
            <summary>
            Class that holds a dictionary of condition lists where the key of a condition list
            corresponds to the extents referenced to in the conditions in that list.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.ConditionDictionary.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.ConditionDictionary.AddCondition(Starcounter.Query.Execution.ILogicalExpression)">
            <summary>
            Divide a condition into subconditions separated by the AND operator,
            and adds each subcondition at the appropriate place in the dictionary.
            </summary>
            <param name="condition">The condition to be added.</param>
        </member>
        <member name="M:Starcounter.Query.Optimization.ConditionDictionary.GetConditions(Starcounter.Query.Optimization.ExtentSet)">
            <summary>
            Gets a list of conditions with the input extent set as key, and returns null if there is no such list.
            </summary>
            <param name="key">The key for which a list of conditions is looked for.</param>
            <returns>A found list of conditions or null.</returns>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.REFERENCE_LOOKUP_COST">
            <summary>
            The estimated cost for a reference lookup.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.NO_IDENTITY_ACCESS_COST">
            <summary>
            The estimated cost for a lookup by object identity
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.ID_IDENTITY_ACCESS_COST">
            <summary>
            The estimated cost for a lookup by object identity
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.INDEX_SCAN_COST">
            <summary>
            The estimated cost for an index scan.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.EXTENT_SCAN_COST">
            <summary>
            The estimated cost for an extent scan.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.rowTypeBind">
            <summary>
            The type binding of the resulting objects of the current query.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.extentNumber">
            <summary>
            The extent number of the extent represented by this extent node.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.conditionList">
            <summary>
            Conditions that for a particular permutation are attached to this extent node.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.refLookUpExpression">
            <summary>
            Expression to be used for reference lookup.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.identityExpression">
            <summary>
            Expression to be used for ObjectId fetch.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.hintedIndexInfo">
            <summary>
            Index to be used for an index scan specified by an index hint in the query.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.bestIndexInfo">
            <summary>
            Index to be used for an index scan selected by the optimizer.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.bestIndexInfoUsedArity">
            <summary>
            The arity used of the selected index. It might be the case that not all the
            paths in a selected combined index can be used in the execution of a query.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.sortIndexInfo">
            <summary>
            Index to be used for an index scan to make the removal of sorting possible.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.subtypeCondition">
            <summary>
            List of conditions, where scan can/should be done on type of IsTypePredicate.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.InnermostExtent">
            <summary>
            True, if this extent-node represents the innermost extent, otherwise false.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.ExtentNode.canCodeGen">
            <summary>
            True, if all conditions can code gen.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.ExtentNode.#ctor(Starcounter.Query.Execution.RowTypeBinding,System.Int32,Starcounter.Query.Execution.VariableArray,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="rowTypeBind">The comp type bind.</param>
            <param name="extentNumber">The extent number.</param>
            <param name="varArr">The var arr.</param>
            <param name="query">The query.</param>
        </member>
        <member name="T:Starcounter.Query.Optimization.ExtentSet">
            <summary>
            Class that represents a set of extent numbers as a single UInt64.
            For example, a set of extent numbers {0, 2} will be represented by the integer value 5 (2^0 + 2^2).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.ExtentSet.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.ExtentSet.Empty">
            <summary>
            Empties this extent set.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.ExtentSet.IsEmpty">
            <summary>
            Returns true if this extent-set is empty, otherwise false.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.ExtentSet.IncludesExtentNumber(System.Int32)">
            <summary>
            Returns true if this extent set includes the specified extent number.
            </summary>
            <param name="extentNum">The extent number to be looked for.</param>
            <returns>True, if the extent number was included, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Optimization.ExtentSet.AddExtentNumber(System.Int32)">
            <summary>
            Adds the input extent number to this extent set.
            </summary>
            <param name="extentNum">An extent number to be added.</param>
        </member>
        <member name="M:Starcounter.Query.Optimization.ExtentSet.GetLastIncluded(System.Collections.Generic.List{System.Int32})">
            <summary>
            Calculates the last extent number in the input extent order that are included in this extent set.
            If no extent number is included then the first extent number is returned.
            </summary>
            <param name="extentOrder">An extent order.</param>
            <returns>An extent number.</returns>
        </member>
        <member name="M:Starcounter.Query.Optimization.ExtentSet.IncludesExtentReference(Starcounter.Query.Execution.IValueExpression,System.Int32)">
            <summary>
            Returns true if the specified expression includes a reference to the extent with the specified extent number.
            </summary>
            <param name="expression">The expression to be investigated.</param>
            <param name="extentNum">The extent number to be looked for.</param>
            <returns>True, if a reference to the extent was found, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Optimization.ExtentSet.IncludesNoExtentReference(Starcounter.Query.Execution.IValueExpression)">
            <summary>
            Returns true if the specified expression includes no reference to any extent.
            </summary>
            <param name="expression">The expression to be investigated.</param>
            <returns>True, if no reference to any extent was found, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Optimization.ExtentSet.CreateAllExtentSets(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates all extent sets that represent all combinations of the input current extent number and
            some subset of extent numbers occuring prior to the current extent number in the extent order.
            For example, if the input current extent number is 1 and the input extent order is [0, 2, 3, 1, 4]
            then we have the following combinations
            {{1}, {1, 0}, {1, 2}, {1, 0, 2}, {1, 3}, {1, 0, 3}, {1, 2, 3}, {1, 0, 2, 3}}
            which in the internal representation of the extent sets are represented by the integers
            [2, 3, 6, 7, 10, 11, 14, 15].
            </summary>
            <param name="currentExtentNum">The current extent num.</param>
            <param name="extentOrder">The extent order.</param>
            <returns>List{ExtentSet}.</returns>
        </member>
        <member name="T:Starcounter.Query.Optimization.HintSpecification">
            <summary>
            Class that holds information about user specified hints to a query.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.HintSpecification.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.HintSpecification.SatisfiesHintedJoinOrder(System.Collections.Generic.List{System.Int32})">
            <summary>
            Investigates if the input extent order satisfies the hinted join order.
            For example the extent order [1,2,3,4] satisfies the hinted join orders 
            [1,2,3,4], [1,2,4] and [3,4], 
            but it does not satisfy the hinted join orders [1,2,4,3] or [4,3]. 
            </summary>
            <param name="extentOrder">An input extent order.</param>
            <returns>True, if the input extent order satisfies the hinted join order, 
            otherwise false.</returns>
        </member>
        <member name="T:Starcounter.Query.Optimization.IHint">
            <summary>
            Interface for all types of hints.
            </summary>
        </member>
        <member name="T:Starcounter.Query.Optimization.OptimizationTree">
            <summary>
            Class to represent an optimization tree, which consists of optimization nodes.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.OptimizationTree.topNode">
            <summary>
            The top node of the optimization tree.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.OptimizationTree.extentOrder">
            <summary>
            A list of extent numbers corresponding to the order the current extents occur
            in the optimization tree. The extent order does not include any temporary extents
            used by aggregations.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.OptimizationTree.nodesByExtentNumber">
            <summary>
            An array of extent nodes in the optimization tree indexed by their corresponding extent numbers.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.OptimizationTree.estimatedCost">
            <summary>
            The estimated execution cost for the execution represented by this optimization tree.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.OptimizationTree.#ctor(Starcounter.Query.Optimization.IOptimizationNode)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.OptimizationTree.DistributeConditions(Starcounter.Query.Optimization.ConditionDictionary)">
            <summary>
            Distributes the conditions in the input condition dictionary over the extent nodes in the optimizing
            tree. The conditions are placed in the first extent node where they can be evaluated.
            </summary>
            <param name="conditionDict">A dictionary of conditions present in the query.</param>
        </member>
        <member name="M:Starcounter.Query.Optimization.Optimizer.Optimize(Starcounter.Query.SQL.OptimizerInput)">
            <summary>
            Creates an execution enumerator corresponding to an optimized query execution plan.
            </summary>
            <param name="nodeTree">An initial node-tree corresponding to the structure of the query.</param>
            <param name="conditionDict">A dictionary of conditions present in the query.</param>
            <param name="fetchNumExpr">A specification of maximal number of objects/rows to be returned.</param>
            <param name="fetchOffsetExpr">An offset expression.</param>
            <param name="fetchOffsetKeyExpr">An offset-key expression.</param>
            <param name="hintSpec">A hint specification given by the user on how to execute the query.</param>
            <returns>An execution enumerator corresponding to an optimized query execution plan.</returns>
        </member>
        <member name="M:Starcounter.Query.Optimization.Optimizer.RangeOperator(Starcounter.Query.Execution.ComparisonOperator)">
            <summary>
            Investigates if the input comparison operator can be used in a specification of a range or not.
            </summary>
            <param name="compOp">An input comparison operator.</param>
            <returns>True, if the input comparison operator can be used in a specification of a range, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Optimization.Optimizer.ReversableOperator(Starcounter.Query.Execution.ComparisonOperator)">
            <summary>
            Investigates if the input comparison operator is a reversable operator.
            </summary>
            <param name="compOp">An input comparison operator.</param>
            <returns>True, if the input comparison operator is reversable, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.Query.Optimization.Optimizer.ReverseOperator(Starcounter.Query.Execution.ComparisonOperator)">
            <summary>
            Creates the reverse operator of the input comparison operator.
            </summary>
            <param name="compOp">An input comparison operator.</param>
            <returns>The reverse operator of the input comparison operator if there exists one, otherwise an exception.</returns>
        </member>
        <member name="T:Starcounter.Query.Optimization.SortSpecification">
            <summary>
            Class that holds information about the sort specification of a query.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.SortSpecification.rowTypeBind">
            <summary>
            The type binding of the resulting objects of the current query.
            </summary>
        </member>
        <member name="F:Starcounter.Query.Optimization.SortSpecification.sortSpecItemList">
            <summary>
            A list of sort specifications of a query (specified in the ORDER BY clause).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.SortSpecification.#ctor(Starcounter.Query.Execution.RowTypeBinding,System.Collections.Generic.List{Starcounter.Query.Execution.ISingleComparer})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Optimization.SortSpecification.CreateSortExtentOrder">
            <summary>
            Creates a list of extent numbers representing the required extent order for sort optimization.
            Returns "null" when no sort optimization is possible.
            </summary>
            <returns>Returns a list of extent numbers, or "null".</returns>
        </member>
        <member name="M:Starcounter.Query.Optimization.SortSpecification.CreateIndexUseInfoList">
            <summary>
            Creates a list of indexes to be used for sort optimization.
            Returns "null" if no such list of indexes exist.
            </summary>
            <returns>A list of index-use-specifications, or "null".</returns>
        </member>
        <member name="M:Starcounter.Query.QueryPreparation.PrepareOrExecuteQuery``1(System.String,System.Boolean,System.Object[])">
            <summary>
            Prepares query by first parsing it and then optimizing. The preparation can be done in Prolog or Bison.
            By default the preparation is done in both and if debug the results are compares before and after optimization.
            LIKE case requires special treatment.
            </summary>
            <param name="query">Input query string to prepare</param>
            <returns>The result enumerated with the execution plan.</returns>
        </member>
        <member name="M:Starcounter.Query.Sql.PrologManager.ExportSchemaInfo(Starcounter.Scheduler,System.String,Starcounter.Binding.TypeDef[],System.Boolean)">
            <summary>
            Export schema information to external SQL process by file and a single call to the SQL process.
            Note that this method is significantly faster than ExportSchemaInfo2.
            </summary>
            <param name="scheduler">Representation of the current virtual processor.</param>
            <param name="typeDefArray">Enumerator of TypeDefs (type information).</param>
        </member>
        <member name="M:Starcounter.Query.Sql.PrologManager.ReExportAllSchemaInfo(Starcounter.Scheduler)">
            <summary>
            Reexports schema information to external SQL process by using previously generated files.
            This method is primarily used for debugging purposes.
            </summary>
            <param name="scheduler">Representation of the current virtual processor.</param>
            <param name="tmpSchemaFileList">List of previously generated schema files.</param>
        </member>
        <member name="M:Starcounter.Query.Sql.PrologManager.DeleteAllSchemaInfo(System.String,Starcounter.Scheduler)">
            <summary>
            Deletes all schema information of external SQL process.
            </summary>
            <param name="scheduler">Representation of the current virtual processor.</param>
        </member>
        <member name="M:Starcounter.Query.Sql.PrologManager.GetExistingSqlProcessVersion">
            <summary>
            Gets the version of existing SQL process, if there is one.
            </summary>
            <returns>The version number, or null (if there is no such process).</returns>
        </member>
        <member name="M:Starcounter.Query.Sql.PrologManager.GetExistingSqlProcessVersionAndDeleteSchemaInfo(System.String,System.Int32)">
            <summary>
            If there is a running SQL process then gets the version of this process and deletes all schema info in that process.
            </summary>
            <returns>The version number, or null (if there is no such process).</returns>
        </member>
        <member name="M:Starcounter.Query.Sql.PrologManager.StartSqlProcess">
            <summary>
            Starts and verifies external SQL process (scsqlparser.exe).
            </summary>
        </member>
        <member name="M:Starcounter.Query.Sql.PrologManager.GetTableSchemaInfo(Starcounter.Binding.TypeDef)">
            <summary>
            Get schema info regarding one table (class).
            </summary>
            <param name="typeDef">The table (class).</param>
            <returns>A concatenated string of schema info items.</returns>
        </member>
        <member name="T:Starcounter.Query.Sql.SqlExecutableException">
            <summary>
            Used within PrologManager to represent errors with the SQL executable.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Sql.SqlExecutableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Query.Sql.SqlExecutableException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Starcounter.Query.Sql.SqlEnumCache">
            <summary>
            This cache is used for storing SQL enumerators corresponding to queries.
            This cache shared between threads of one virtual processor.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Sql.SqlEnumCache.GetCachedEnumerator(System.Int32)">
            <summary>
            Gets an already existing enumerator given the unique query ID.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Sql.SqlEnumCache.GetCachedEnumerator``1(System.String,System.Boolean,System.Object[])">
            <summary>
            Gets an already existing enumerator corresponding to the query from the cache or creates a new one.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Sql.SqlEnumCache.SQLCacheStatus">
            <summary>
            Logs the current status of server SQL query cache.
            </summary>
        </member>
        <member name="M:Starcounter.Query.Sql.SqlProcessor.CreateSupportedTypesDictionary">
            <summary>
            Creates a dictionary of supported parameter types in stored procedures.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Query.Sql.SqlProcessor.ProcessDropIndex(System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Continue processing statement DROP INDEX indexName ON [namespaces.]tableName
            </summary>
            <param name="statement">The query</param>
            <param name="tokenList">List of tokens for the query</param>
            <param name="pos">Position to continue in the token list</param>
        </member>
        <member name="M:Starcounter.Query.Sql.SqlProcessor.ProcessDropTable(System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Continue processing statement DROP TABLE [namespaces.]tableName
            </summary>
            <param name="statement">The query</param>
            <param name="tokenList">List of tokens for the query</param>
            <param name="pos">Position to continue in the token list</param>
        </member>
        <member name="T:Starcounter.Query.QueryModule">
            <summary>
            Configuration, initiation and termination of query module.
            </summary>
        </member>
        <member name="M:Starcounter.Query.QueryModule.Initiate(System.Int32,System.String)">
            <summary>
            Initiates query module. Called during start-up.
            </summary>
            <param name="processPort">External SQL process port. If 0 then default should be used.</param>
            <param name="schemaFolder">Path to a folder where schema files will be saved.</param>
        </member>
        <member name="M:Starcounter.Query.QueryModule.Reset(System.String)">
            <summary>
            Removes all schema information from external SQL process (Prolog-process).
            </summary>
        </member>
        <member name="M:Starcounter.Query.QueryModule.UpdateSchemaInfo(System.String,Starcounter.Binding.TypeDef[],System.Boolean)">
            <summary>
            </summary>
            <param name="typeDefArray"></param>
        </member>
        <member name="M:Starcounter.Query.QueryModule.Terminate">
            <summary>
            Terminates query module. Called during shut-down.
            </summary>
        </member>
        <member name="M:Starcounter.SqlProcessor.MetadataPopulation.PopulateClrPrimitives">
            <summary>
            Populates CLR primitives meta-table if it is empty
            </summary>
        </member>
        <member name="M:Starcounter.SqlProcessor.SqlProcessor.GetSqlException(System.UInt32,System.String,Starcounter.SqlProcessor.ScError*)">
            <summary>
            Creates exception with error location and token by using Starcounter factory.
            </summary>
            <param name="errorCode">Starcounter error code</param>
            <param name="message">The detailed error message</param>
            <param name="location">Start of the error token in the query</param>
            <param name="token">The error token</param>
            <returns></returns>
        </member>
        <member name="T:Starcounter.TransientAttribute">
            <summary>
            Custom attribute that, when applied to a field or auto-implemented
            property in a database class, makes the field/property transient, 
            meaning it will not be stored in the database nor accessible using
            SQL. Can also be used on classes and interfaces, to black list classes
            when they are whitelisted because of assembly- or file-based
            database configuration.
            </summary>
        </member>
        <member name="T:Starcounter.ObjectRef">
            <summary>
            Struct ObjectRef
            </summary>
        </member>
        <member name="F:Starcounter.ObjectRef.ObjectID">
            <summary>
            The object ID
            </summary>
        </member>
        <member name="F:Starcounter.ObjectRef.ETI">
            <summary>
            The ETI
            </summary>
        </member>
        <member name="T:Starcounter.RangeFlags">
            <summary>
            Enum RangeFlags
            </summary>
        </member>
        <member name="F:Starcounter.RangeFlags.IncludeFirstKey">
            <summary>
            The include lesser key
            </summary>
        </member>
        <member name="F:Starcounter.RangeFlags.IncludeLastKey">
            <summary>
            The include greater key
            </summary>
        </member>
        <member name="T:Starcounter.ThreadHelper">
            <summary>
            Class ThreadHelper
            </summary>
        </member>
        <member name="M:Starcounter.ThreadHelper.SetYieldBlock">
            <summary>
            Sets the yield block.
            </summary>
        </member>
        <member name="M:Starcounter.ThreadHelper.ReleaseYieldBlock">
            <summary>
            Releases the yield block.
            </summary>
        </member>
        <member name="T:Starcounter.ObjectDoesntExistException">
            <summary>
            Exception thrown when attempting to access or modify an object that was
            deleted before the current transaction was started (a transferred
            object).
            </summary>
        </member>
        <member name="M:Starcounter.ObjectDoesntExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.ObjectDoesntExistException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Starcounter.SqlEnumerator`1">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.SqlEnumerator`1.MoveNext">
            <summary>
            Moves to the next of the resulting objects of the query.
            </summary>
            <returns>True if there is a next object, otherwise false.</returns>
        </member>
        <member name="M:Starcounter.SqlEnumerator`1.Reset">
            <summary>
            Resets the result by setting the cursor at the position before the first object.
            </summary>
        </member>
        <member name="M:Starcounter.SqlEnumerator`1.Dispose">
            <summary>
            Releases unmanaged resources and return enumerator to cache.
            </summary>
        </member>
        <member name="P:Starcounter.SqlEnumerator`1.Query">
            <summary>
            The SQL query this SQL enumerator executes.
            </summary>
        </member>
        <member name="P:Starcounter.SqlEnumerator`1.TypeBinding">
            <summary>
            If the projection is an (Entity or Row) object, then the type binding of that object, otherwise null.
            </summary>
        </member>
        <member name="P:Starcounter.SqlEnumerator`1.ProjectionTypeCode">
            <summary>
            If the projection is a singleton, then the DbTypeCode of that singleton, otherwise null.
            </summary>
        </member>
        <member name="P:Starcounter.SqlEnumerator`1.Counter">
            <summary>
            Counts the number of returned objects.
            </summary>
        </member>
        <member name="M:Starcounter.SqlEnumerator`1.GetOffsetKey">
            <summary>
            Gets offset key of the SQL enumerator if it is possible.
            </summary>
        </member>
        <member name="M:Starcounter.SqlEnumerator`1.ToString">
            <summary>
            Returns a string presentation of the execution enumerator including
            a specification of the type of the returned objects and the execution plan.
            </summary>
            <returns>A string presentation of the execution enumerator.</returns>
        </member>
        <member name="P:Starcounter.SqlEnumerator`1.Current">
            <summary>
            Gets the current item (row) in the result of the query.
            </summary>
        </member>
        <member name="T:Starcounter.QueryResultRows`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.QueryResultRows`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>SqlEnumerator.</returns>
            <exception cref="T:Starcounter.SqlException">Literal in query is not supported. Use variable and parameter instead.</exception>
        </member>
        <member name="P:Starcounter.QueryResultRows`1.First">
            <summary>
            Obtaining only the first hit/result and disposing the enumerator.
            </summary>
            <value></value>
        </member>
        <member name="M:Starcounter.QueryResultRows`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starcounter.QueryResultRows`1.op_Implicit(Starcounter.QueryResultRows{`0})~Starcounter.Response">
            <summary>
            Allows query results to be implicitly converted to <see cref="T:Starcounter.Response"/>
            instances, and hence support the extension mechanism that allows services
            to respond to such conversion.
            </summary>
            <param name="rows">The instance being casted.</param>
        </member>
        <member name="T:Starcounter.SqlException">
            <summary>
            Class SqlException
            </summary>
        </member>
        <member name="P:Starcounter.SqlException.ScErrorCode">
            <summary>
            Returns Starcounter error code
            </summary>
        </member>
        <member name="P:Starcounter.SqlException.ErrorMessage">
            <summary>
            Returns actual syntax error message
            </summary>
        </member>
        <member name="P:Starcounter.SqlException.Token">
            <summary>
            Returns the unexpected token
            </summary>
        </member>
        <member name="P:Starcounter.SqlException.Location">
            <summary>
            Returns the begin position of the error token in the query
            </summary>
        </member>
        <member name="P:Starcounter.SqlException.Query">
            <summary>
            Returns the query string, where the error happened
            </summary>
        </member>
        <member name="M:Starcounter.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Starcounter.SqlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Starcounter.ISqlEnumerator">
            <summary>
            Public interface for a non-generic enumerator of the result of an SQL query.
            </summary>
        </member>
        <member name="P:Starcounter.ISqlEnumerator.Current">
            <summary>
            Gets the current item (row) in the result of the query.
            </summary>
        </member>
        <member name="P:Starcounter.ISqlEnumerator.Query">
            <summary>
            The SQL query this SQL enumerator executes.
            </summary>
        </member>
        <member name="P:Starcounter.ISqlEnumerator.TypeBinding">
            <summary>
            If the projection is an (Entity or Row) object, then the type binding of that object, otherwise null.
            </summary>
        </member>
        <member name="P:Starcounter.ISqlEnumerator.ProjectionTypeCode">
            <summary>
            If the projection is a singleton, then the DbTypeCode of that singleton, otherwise null.
            </summary>
        </member>
        <member name="P:Starcounter.ISqlEnumerator.PropertyBinding">
            <summary>
            If the project is a singleton, the the property of the singleton, otherwise null.
            </summary>
        </member>
        <member name="P:Starcounter.ISqlEnumerator.Counter">
            <summary>
            Counts the number of returned objects.
            </summary>
        </member>
        <member name="M:Starcounter.ISqlEnumerator.GetOffsetKey">
            <summary>
            Gets offset key of the SQL enumerator if it is possible.
            </summary>
        </member>
        <member name="T:Starcounter.Task">
            <summary>
            Class representing a task.
            </summary>
        </member>
        <member name="P:Starcounter.Task.UserAction">
            <summary>
            User action.
            </summary>
        </member>
        <member name="M:Starcounter.Task.#ctor(System.Action,System.Void*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Task.Run">
            <summary>
            ITask interface implementation. Calls the action delegate
            associated with the task, intercepts any transaction and stores it
            with the task object.
            </summary>
        </member>
        <member name="T:Starcounter.UserTaskInfo">
            <summary>
            Saved structure containing user task.
            </summary>
        </member>
        <member name="T:Starcounter.DbSession">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.DbSession.asyncTasksAnyScheduler_">
            <summary>
            List of user tasks scheduled on any scheduler.
            </summary>
        </member>
        <member name="F:Starcounter.DbSession.asyncTasksPerScheduler_">
            <summary>
            List of user tasks per scheduler.
            </summary>
        </member>
        <member name="F:Starcounter.DbSession.roundRobinSchedId_">
            <summary>
            Current round robin scheduler id value.
            </summary>
        </member>
        <member name="M:Starcounter.DbSession.Init">
            <summary>
            Initializes schdeduling data.
            </summary>
        </member>
        <member name="M:Starcounter.DbSession.GetAndExecuteQueuedTasks(System.Action{System.Action,System.String})">
            <summary>
            Gets and executes already scheduled tasks on current scheduler.
            </summary>
        </member>
        <member name="M:Starcounter.DbSession.RunAsync(System.Action,System.Byte)">
            <summary>
            Runs the task represented by the action delegate asynchronously.
            </summary>
            <remarks>
            Schedules a task on a given scheduler (even if current scheduler is the same).
            In case if invalid scheduler is supplied then all schedulers are tried in round robin
            manner. When all schedulers are tried but the queues are full - then task is put into
            the awaiting queue.
            </remarks>
        </member>
        <member name="M:Starcounter.DbSession.RunSync(System.Action,System.Byte)">
            <summary>
            Runs the task represented by the action delegate on given scheduler and waits for its finish.
            </summary>
        </member>
        <member name="M:Starcounter.DbSession.RunSyncPrevious(System.Action,System.Byte)">
            <summary>
            Runs the task represented by the action delegate synchronously.
            </summary>
            <remarks>
            <para>
            If the calling thread is attached to a Starcounter scheduler, the
            thread simply calls the action delegate representing the task. If
            the calling thread is not a Starcounter thread, the task is
            scheduled on a Starcounter thread and the current thread blocks
            waiting for the task to complete.
            </para>
            <para>
            On unhandled exception in the action delegate representing the task,
            the exception is intercepted and an exception referencing that
            exception, as an inner exception, is thrown by RunSync.
            </para>
            </remarks>
        </member>
        <member name="T:Starcounter.SynonymousToAttribute">
            <summary>
            Attribute to allow entity fields to indicate they are mearly synonyms, or "casts",
            of an allready defined field, declared in the same class or one of the base-classes
            to the class declaring the synonym.
            </summary>
        </member>
        <member name="M:Starcounter.SynonymousToAttribute.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Starcounter.SynonymousToAttribute"/> instance.
            </summary>
        </member>
        <member name="P:Starcounter.SynonymousToAttribute.Target">
            <summary>
            The name of the field this one is synonymous to.
            </summary>
        </member>
        <member name="T:Starcounter.Transaction">
            <summary>
            Represents a longrunning transaction.
            </summary>
        </member>
        <member name="F:Starcounter.Transaction._current">
            <summary>
            Current longrunning user transaction.
            </summary>
            <remarks>
            This instance will be used together with TransactionManager.current
            </remarks>
        </member>
        <member name="M:Starcounter.Transaction.#ctor(System.Boolean,System.Boolean)">
            <summary>
            New transaction constructor.
            </summary>
            <param name="readOnly">Transaction read-only flag.</param>
        </member>
        <member name="M:Starcounter.Transaction.CheckForRefOrDispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starcounter.Transaction.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Transaction.Dispose">
            <summary>
            <c>System.IDisposable</c> interface implementation.
            </summary>
        </member>
        <member name="P:Starcounter.Transaction.IsReadOnly">
            <summary>
            Gets a value indicating if the current transaction is a
            read-only transaction, i.e. a transaction where commits
            are not allowed.
            </summary>
        </member>
        <member name="P:Starcounter.Transaction.Current">
            <summary>
            Returns current transaction if any.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Transaction.Touch(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Transaction.Touch(Starcounter.Binding.IObjectProxy)" -->
        <member name="M:Starcounter.Transaction.Scope(System.Action)">
            <summary>
            Executes some code within this transaction scope.
            </summary>
            <remarks>
            If this transaction already is in use (i.e. scoped) on another scheduler
            an exception will be thrown.
            </remarks>
            <param name="action">Delegate that is called on transaction.</param>
        </member>
        <member name="M:Starcounter.Transaction.Commit">
            <summary>
            Commits changes made on transaction.
            </summary>
        </member>
        <member name="M:Starcounter.Transaction.Rollback">
            <summary>
            Rollbacks uncommitted changes on transaction.
            </summary>
        </member>
        <member name="P:Starcounter.Transaction.IsDirty">
            <summary>
            Checks if there are any changes on transaction since last commit.
            </summary>
        </member>
        <member name="T:Starcounter.ScrapHeap">
            <summary>
            Used to clean up garbage collected objects that could not be freed by
            garbage collector directly because the associated memory is associated
            with a specific scheduler.
            </summary>
        </member>
        <member name="M:Starcounter.ScrapHeap.Setup(System.Void*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.ScrapHeap.RecycleScrap">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.ScrapHeap._scheduleOnNextAdd">
            <summary>
            This is here to provide a workaround to avoid unhandled exception
            should the scheduler input queue be full. See ThrowAway for
            details.
            </summary>
        </member>
        <member name="T:Starcounter.TransactionAbortedException">
            <summary>
            Exception thrown on when a transaction is aborted (8000 series error codes).
            </summary>
        </member>
        <member name="M:Starcounter.TransactionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.TransactionAbortedException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Starcounter.TransactionConflictDbException">
            <summary>
            Variant of <see cref="T:Starcounter.DbException" /> thrown when it wraps a
            <see cref="T:Starcounter.ITransactionConflictException" />. Used to make sure that
            automatic restarts and such are triggered because of conflicts detected
            in hooks.
            </summary>
        </member>
        <member name="M:Starcounter.TransactionConflictDbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.TransactionConflictDbException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Starcounter.TransactionConflictException">
            <summary>
            Exception thrown when a transaction is aborted because of a conflict with another
            transaction (error code 8002, ScErrTransactionConflictAbort).
            </summary>
        </member>
        <member name="M:Starcounter.TransactionConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.TransactionConflictException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Starcounter.TypeAttribute">
            <summary>
            Custom attribute that, when applied to a non-transient field or a property
            in a database class, instructs Starcounter to treat the tagged target as a
            reference to a type.
            </summary>
        </member>
        <member name="T:Starcounter.TypeNameAttribute">
            <summary>
            Custom attribute that, when applied to a non-transient field or a property
            in a database class, instructs Starcounter to treat the tagged target the
            name of a dynamic type.
            </summary>
        </member>
        <member name="T:Starcounter.UnhandledTransactionConflictException">
            <summary>
            Exception thrown on failure to restart transaction aborted because of a transaction
            conflict at transaction boundary (error code 4090, ScErrUnhandledTransactConflict).
            </summary>
            <seealso cref="T:Starcounter.TransactionConflictException"/>
            <seealso cref="!:Starcounter.Db.Transact(System.Action)"/>
        </member>
        <member name="M:Starcounter.UnhandledTransactionConflictException.#ctor(System.Exception)">
            <summary>
            For internal use, not to be used in user code (used in generated
            transaction scopes).
            </summary>
        </member>
        <member name="M:Starcounter.UnhandledTransactionConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.UnhandledTransactionConflictException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="F:GlobalQueryCache.DefaultUniqueQueries">
            <summary>
            Maximum number of unique queries in cache.
            </summary>
        </member>
        <member name="M:GlobalQueryCache.AddNewQuery``1(System.String,Starcounter.Query.Execution.IExecutionEnumerator)">
            <summary>
            Adds a new query to the cache if its already not there.
            Mutually exclusive.
            </summary>
        </member>
        <member name="M:GlobalQueryCache.GetEnumIndex(System.String)">
            <summary>
            Fetches enumerator index if its cached.
            Otherwise returns negative number.
            </summary>
        </member>
        <member name="M:GlobalQueryCache.EnumExists(System.Int32)">
            <summary>
            Returns true if indicated enumerator exists in cache.
            </summary>
        </member>
        <member name="M:GlobalQueryCache.GetEnumClone(System.Int32)">
            <summary>
            Returns a clone of SQL enumerator specified by index.
            Returns NULL if query is not cached yet.
            </summary>
        </member>
        <member name="M:GlobalQueryCache.GetQueryString(System.Int32)">
            <summary>
            Fetches cached enumerator query string.
            </summary>
        </member>
        <member name="M:GlobalQueryCache.SQLCacheStatus">
            <summary>
            Logs the current status of server SQL query cache.
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeFlags">
            <summary>
            Flags that influence the behaviour/semantics of the database
            attrbute they are applied to.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeFlags.TypeReference">
            <summary>
            Indicates the target database attribute is a type reference.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeFlags.IneritsReference">
            <summary>
            Indicates the target database attribute is a inherits reference.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeFlags.TypeName">
            <summary>
            Indicates the target database attribute contains the type name
            of the declaring class.
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseArrayType">
            <summary>
            Represents an array type in the database schema.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseArrayType.#ctor(Sc.Server.Weaver.Schema.DatabaseSchemaElement,Sc.Server.Weaver.Schema.IDatabaseAttributeType)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseArrayType" />.
            </summary>
            <param name="parent">The parent.</param>
            <param name="itemType">Type of array items.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseArrayType.ItemType">
            <summary>
            Gets the type of array elements.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseArrayType.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseArrayType.Schema">
            <summary>
            Gets the <see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema" /> to which the current object belong.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAssembly">
            <summary>
            Represents an assembly in the database schema.
            </summary>
            <remarks>
            The database server has no notion of assembly. Type names for the database
            server does not contain the assembly name. This concept exists for the database
            schema so that it is possible to save the part of the database schema that
            is defined by a single assembly, so that it can be loaded later without
            requiring the complete assembly to be reloaded.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly" />.
            </summary>
            <param name="name">Assembly name.</param>
            <param name="fullName">The full name.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.Schema">
            <summary>
            Gets or sets the schema to which the current assembly belongs.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.SetSchema(Sc.Server.Weaver.Schema.DatabaseSchema)">
            <summary>
            </summary>
            <param name="schema"></param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.Name">
            <summary>
            Gets the assembly name.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.FullName">
            <summary>
            Gets the assembly full name.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.DatabaseClasses">
            <summary>
            Gets the collection of database classes contained in this assembly.
            </summary>
            <remarks>
            This collection contains all database classes without exception.
            Consumer code should filter them if it is only interested by entity classes,
            for instance.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.IsTransformed">
            <summary>
            Determines whether the current assembly is transformed
            (user assemblies are transformed, system assemblies are typically not).
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.HasDebuggingSymbols">
            <summary>
            Determines whether the current assembly has debugging symbols
            (a PDB file).
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.Dependencies">
            <summary>
            Gets the dictionary of dependent assemblies.
            </summary>
            <remarks>
            The item key is the assembly name (without file extension). The item value
            is the hash value coded in hexadecimal.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.DebugOutput(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            Formats the current assembly and all its members to a writer.
            </summary>
            <param name="writer">The writer to which the object should be formatted.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.Serialize(System.String)">
            <summary>
            Serializes the current assembly to a file.
            </summary>
            <param name="fileName">Name of the file to which the assembly should be serialized.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.Deserialize(System.String)">
            <summary>
            Deserializes a file representing a <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/>.
            </summary>
            <param name="fileName">Name of the file containing the serialized <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/>.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/> stored in <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a file representing a <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/>.
            </summary>
            <param name="stream">A stream containing the serialized <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/>.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/> stored in <paramref name="stream"/>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.OnSchemaComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection">
            <summary>
            Collection of <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/> with indexing by name.
            </summary>
            <remarks>
            This collection may only be owned by a <see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema"/>. When an assembly
            is added to the collection, the database classes it contains are automatically indexed
            in the schema.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.#ctor(Sc.Server.Weaver.Schema.DatabaseSchema)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection"/>.
            </summary>
            <param name="schema"><see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema"/> to which the new collection belongs</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Add(Sc.Server.Weaver.Schema.DatabaseAssembly)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Contains(Sc.Server.Weaver.Schema.DatabaseAssembly)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.CopyTo(Sc.Server.Weaver.Schema.DatabaseAssembly[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Remove(Sc.Server.Weaver.Schema.DatabaseAssembly)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttribute">
            <summary>
            Represents a database attribute.
            </summary>
            <remarks>
            See the property <see cref="P:Sc.Server.Weaver.Schema.DatabaseAttribute.AttributeType"/> to determine if the
            attribute is a persistent field, a regular field or a persistent property.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttribute.#ctor(Sc.Server.Weaver.Schema.DatabaseClass,System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/>.
            </summary>
            <param name="declaringClass">Class declaring the attribute.</param>
            <param name="name">Name of the attribute.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.DeclaringClass">
            <summary>
            Gets the class declaring the attribute.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.Name">
            <summary>
            Gets the CLR name of the field.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.Index">
            <summary>
            Gets or sets the field index in the database kernel.
            </summary>
            <remarks>
            <para>This field is set only <i>after</i> calls the method see cref="ITypeResolver.SetSchema".</para>
            <para>This property is only meaningful for persistent fields that are not synonymous.</para>
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsInitOnly">
            <summary>
            Determines whether the field is forbidden to be set outside a constructor (<b>readonly</b> qualifier
            in C#).
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsPublicRead">
            <summary>
            Gets or sets a value indicating whether this instance is public read.
            </summary>
            <remarks>
            An attribute is not considered public read only if it is explicitly
            declared public. As an example, a protected field in a public class is
            considered public as well. Basically, this property indicates if its
            possible to read the property outside the assembly in which it is
            defined.
            </remarks>
            <value><c>true</c> if this instance is public read; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsDeclaredPublic">
            <summary>
            Gets or sets a value if the attribute was originally declared
            as public (i.e. the original field or property was).
            </summary>
            <remarks>
            If the attribute originates from a property, the visibility of
            the getter is used to derive this value; if no getter exist,
            false is returned.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsTypeReference">
            <summary>
            Gets a value indicating of the current attribute is to be
            considered a type reference, part of Starcounter dynamic
            types.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsInheritsReference">
            <summary>
            Gets a value indicating if the current attribute is to be
            considered a reference to a base type, part of Starcounter
            dynamic types.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsTypeName">
            <summary>
            Gets a value indicating if the current attribute is to be
            considered holding the type name of a class part of the new
            dynamic types domain.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.AttributeType">
            <summary>
            Gets the type of the attribute.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsNullable">
            <summary>
            Determines whether the database attribute is nullable.
            </summary>
            <remarks>
            Value types normally not nullable, unless their type is <see cref="T:System.Nullable`1"/>
            (<b>?</b> type postfix in C#). Reference types are always nullable. In the future,
            we may define a custom attribute forbidden null values to be assigned on reference
            types.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.SynonymousTo">
            <summary>
            Gets or sets the database attribute of which the current attribute is a synonymous.
            </summary>
            <value>
            The <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/> of which the current attribute is a synonymous,
            or <b>null</b> if the current attribute is not a synonymous of any field.
            </value>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.WeaverId">
            <summary>
            Unique identifier of the current custom attribute, as assigned by the weaver.
            </summary>
            <remarks>
            This identifier is during the resolution of the database schema. Passing the field
            identifier instead of the complete field reduces the volume of serialized data and
            improves performance.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.InitialValue">
            <summary>
            Gets or sets the initial value of the current attribute.
            </summary>
            <value>
            The initial value of the proper type (typically a boxed intrincic), or <b>null</b>
            if the initial value has not been set (which means that the initial value should
            be the default value for this type, i.e. the zero value).
            </value>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.AttributeKind">
            <summary>
            Gets the kind (persistent field, regular field, persistent property) of attribute
            the current instance is.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsPersistent">
            <summary>
            Determines whether the current attribute is persistent.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsField">
            <summary>
            Determines whether the current attribute is a field (persistent or not).
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsTransient">
            <summary>
            Gets a value indicating of the current attribute is considered
            transient, i.e. not stored in the database or part of the database
            schema.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.Schema">
            <summary>
            Gets the <see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema"/> to which the current database attribute belongs.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.BackingField">
            <summary>
            When not null, indicates that the proprerty is the trivial accessor for a field of the current instance.
            This property is then set to this this field.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.SpecialFlags">
            <summary>
            Gets the current attributes special flags.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttribute.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeCollection.GetKeyForItem(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeArrayOnIndexCompararer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeArrayOnIndexCompararer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeKind">
            <summary>
            Defines the different kinds of attributes emitted by the
            weaver analysis engine when database classes are being analyzed.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeKind.Field">
            <summary>
            Indicates a regular database field, i.e. a field
            defined in a database class and not marked with
            any particular attribute meaninful to Starcounter.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeKind.TransientField">
            <summary>
            Indicates a field in a database class tagged with the
            <see cref="!:TransientAttribute"/>.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeKind.Property">
            <summary>
            Indicates a regular database property, i.e. a property
            defined in a database class and not marked with any 
            particular attribute meaninful to Starcounter.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeKind.TransientProperty">
            <summary>
            Indicates a property in a database class tagged with the
            <see cref="!:TransientAttribute"/>.
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeRef">
            <summary>
            Serializable reference to a <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/>.
            </summary>
            <remarks>
            The purpose of this object is to store a cross-assembly reference that is serializable
            without hard-linking to the assembly, so that assemblies can be serialized separately.
            References are resolved transparently and are never exposed to consumer code.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRef.#ctor(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            Initialize a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttributeRef"/>.
            </summary>
            <param name="target">Referenced <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/>.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRef.MakeRef(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            Makes a <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttributeRef"/>.
            </summary>
            <param name="attribute">Referenced <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/>.</param>
            <returns>A <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttributeRef"/> referencing <paramref name="attribute"/>,
            or <b>null</b> if <paramref name="attribute"/> is <b>null</b>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRef.Resolve(Sc.Server.Weaver.Schema.DatabaseAttributeRef,Sc.Server.Weaver.Schema.DatabaseSchemaElement)">
            <summary>
            Gets the <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/> referenced to by the a <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttributeRef"/>.
            </summary>
            <param name="databaseAttributeRef">Reference to be resolved.</param>
            <param name="element">Element of the schema w.r.t. which the referenced should be resolved.
            Theoritically only the schema is used, but since we cache the reference, passing the schema
            element allows to avoid taking the schema from the element in case of a cache hit.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/> represented by <paramref name="databaseAttributeRef"/></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.#ctor(Sc.Server.Weaver.Schema.DatabaseSchemaElement)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Add(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Contains(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.CopyTo(Sc.Server.Weaver.Schema.DatabaseAttribute[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Remove(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Schema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseClass">
            <summary>
            Represents any class whose instances are to be stored in the database.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly,System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>.
            </summary>
            <param name="assembly">Assembly to which the class belong.</param>
            <param name="name">Full name of the class.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly,System.String,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>.
            </summary>
            <param name="assembly">Assembly to which the class belong.</param>
            <param name="name">Full name of the class.</param>
            <param name="internalMetadataClass">
            If true this class is an internal class for starcounter that should be handled a bit different.
            for example it should be filtered out when doing an unload.
            </param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.Assembly">
            <summary>
            Gets the assembly to which the class belong.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.BaseClass">
            <summary>
            Gets or sets the base class.
            </summary>
            <remarks>
            A <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>, or <b>null</b> if the base class
            is the <b>Entity</b> class.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.Name">
            <summary>
            Gets or sets the class name, including the namespace.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.IsQualifiedOnlyByFullNameInQueries">
            <summary>
            Gets or sets a value indicating if the current type should be qualified
            only by its full name.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.Attributes">
            <summary>
            Gets the collection of database attributes defined in the current class.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.FindAttributeInAncestors(System.String)">
            <summary>
            Searches an attribute by name in the current class and in all ancestors.
            </summary>
            <param name="name">Name of the searched field.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/> named <paramref name="name"/>, or <b>null</b>
            if the type and its ancestors don't contain a field with that name.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.FindAttributeInAncestors(System.Func{Sc.Server.Weaver.Schema.DatabaseAttribute,System.Boolean})">
            <summary>
            Searches an attribute by name in the current class and in all ancestors, using
            a specified predicate to determine if attributes are considered matches or not.
            </summary>
            <param name="predicate">The predicate that determine if an attribute match.</param>
            <returns>An attribute if found; null if not.</returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.Schema">
            <summary>
            Gets the schema to which the current class belong.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.DebugOutput(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            Formats the current assembly and all its members to a writer.
            </summary>
            <param name="writer">The writer to which the object should be formatted.</param>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseClassCollection">
            <summary>
            Collection of database classes (<see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>).
            </summary>
            <remarks>
            This collection has the particularity to index classes by name and
            and to update the schema-level index of classes.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassCollection.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseClassCollection"/>.
            </summary>
            <param name="assembly">Assembly to which the collection belong.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassCollection.GetKeyForItem(Sc.Server.Weaver.Schema.DatabaseClass)">
            <summary>
            Gets the class name.
            </summary>
            <param name="item">The database class.</param>
            <returns>The database class name.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassCollection.InsertItem(System.Int32,Sc.Server.Weaver.Schema.DatabaseClass)">
            <summary>
            Called when an item is inserted. We update the index located in the database schema.
            </summary>
            <param name="index">Index.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassCollection.RemoveItem(System.Int32)">
            <summary>
            The <b>Remove</b> operation is not supported.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassCollection.SetItem(System.Int32,Sc.Server.Weaver.Schema.DatabaseClass)">
            <summary>
            The <b>Set</b> operation is not supported.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseClassRef">
            <summary>
            Serializable reference to a <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>.
            </summary>
            <remarks>
            The purpose of this object is to store a cross-assembly reference that is serializable
            without hard-linking to the assembly, so that assemblies can be serialized separately.
            References are resolved transparently and are never exposed to consumer code.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.#ctor(Sc.Server.Weaver.Schema.DatabaseClass)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseClassRef"/>.
            </summary>
            <param name="target">Referenced <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.MakeRef(Sc.Server.Weaver.Schema.DatabaseClass)">
            <summary>
            Makes a <see cref="T:Sc.Server.Weaver.Schema.DatabaseClassRef"/>.
            </summary>
            <param name="databaseClass">Referenced <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>.</param>
            <returns>A <see cref="T:Sc.Server.Weaver.Schema.DatabaseClassRef"/> referencing <paramref name="databaseClass"/>,
            or <b>null</b> if <paramref name="databaseClass"/> is <b>null</b>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.MakeRef(Sc.Server.Weaver.Schema.IDatabaseAttributeType)">
            <summary>
            Makes the ref.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <returns>IDatabaseAttributeType.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.Resolve(Sc.Server.Weaver.Schema.DatabaseClassRef,Sc.Server.Weaver.Schema.DatabaseSchemaElement)">
            <summary>
            Gets the <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/> referenced to by the a <see cref="T:Sc.Server.Weaver.Schema.DatabaseClassRef"/>.
            </summary>
            <param name="databaseClassRef">Reference to be resolved.</param>
            <param name="element">Element of the schema w.r.t. which the referenced should be resolved.
            Theoritically only the schema is used, but since we cache the reference, passing the schema
            element allows to avoid taking the schema from the element in case of a cache hit.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/> represented by <paramref name="databaseClassRef"/></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.Equals(Sc.Server.Weaver.Schema.DatabaseClassRef)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseEntityClass">
            <summary>
            Represents an entity class, i.e. a class derived from the <b>Entity</b>
            class.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEntityClass.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly,System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseEntityClass"/>.
            </summary>
            <param name="assembly">Assembly to which the class belong.</param>
            <param name="name">Class name.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEntityClass.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <param name="internalMetadataClass"></param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseEntityClass.ExtensionClasses">
            <summary>
            Gets the collection of extension classes defined for the current entity class.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEntityClass.DebugOutput(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            Formats the current assembly and all its members to a writer.
            </summary>
            <param name="writer">The writer to which the object should be formatted.</param>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseEnumType">
            <summary>
            Represents an enumeration type (<b>enum</b> in C#).
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEnumType.#ctor(System.String,Sc.Server.Weaver.Schema.DatabasePrimitive)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseEnumType"/>.
            </summary>
            <param name="name">Name of the enumeration.</param>
            <param name="underlyingType">Underlying type of the enumeration (typically <see cref="T:System.Int32"/>).</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEnumType.GetInstance(System.String,Sc.Server.Weaver.Schema.DatabasePrimitive)">
            <summary>
            Gets a cached instance of <see cref="T:Sc.Server.Weaver.Schema.DatabaseEnumType"/>.
            </summary>
            <param name="name">Name of the enumeration.</param>
            <param name="underlyingType">Underlying type of the enumeration (typically <see cref="T:System.Int32"/>).</param>
            <returns>The instance <see cref="T:Sc.Server.Weaver.Schema.DatabaseEnumType"/> representing this enumeration.</returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseEnumType.Name">
            <summary>
            Gets the name of the current enumeration.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseEnumType.UnderlyingType">
            <summary>
            Gets the underlying type of the
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEnumType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseExtensionClass">
            <summary>
            Represents a database extension class (i.e. a class derived from <b>Extension&lt;T&gt;</b>).
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseExtensionClass.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly,System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseExtensionClass"/>.
            </summary>
            <param name="assembly">Assembly to which the class belong.</param>
            <param name="name">Full name of the class.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseExtensionClass.Extends">
            <summary>
            Gets of sets the database class that this extension extends.
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseIndex">
            <summary>
            Class DatabaseIndex
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabasePrimitive">
            <summary>
            Enumeration of primitives supported by the database.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Boolean">
            <summary>
            The boolean
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Byte">
            <summary>
            The byte
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.SByte">
            <summary>
            The S byte
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Int16">
            <summary>
            The int16
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.UInt16">
            <summary>
            The U int16
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Int32">
            <summary>
            The int32
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.UInt32">
            <summary>
            The U int32
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Int64">
            <summary>
            The int64
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.UInt64">
            <summary>
            The U int64
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Decimal">
            <summary>
            The decimal
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Single">
            <summary>
            The single
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Double">
            <summary>
            The double
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.String">
            <summary>
            The string
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.DateTime">
            <summary>
            The date time
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.TimeSpan">
            <summary>
            The time span
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Binary">
            <summary>
            The binary
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabasePrimitiveType">
            <summary>
            Encapsulates a <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitive"/> into a <see cref="T:Sc.Server.Weaver.Schema.IDatabaseAttributeType"/>.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabasePrimitiveType.#ctor(Sc.Server.Weaver.Schema.DatabasePrimitive)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitiveType"/>.
            </summary>
            <param name="primitive">The encapsulated <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitive"/>.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabasePrimitiveType.GetInstance(Sc.Server.Weaver.Schema.DatabasePrimitive)">
            <summary>
            Gets a cached instance of <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitiveType"/>
            </summary>
            <param name="primitive">The encapsulated <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitive"/>.</param>
            <returns>The instance of <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitiveType"/> encapsulating <paramref name="primitive"/>.</returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabasePrimitiveType.Primitive">
            <summary>
            Gets the encapsulated <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitive"/>.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabasePrimitiveType.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseSchema">
            <summary>
            Closed set of assemblies and database classes forming a single and consistent database schema.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseSchema.EmbeddedResourceName">
            <summary>
            Name we use when embedding a serialized schema into an assembly
            as part of weaving.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.#ctor">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema"/>.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseSchema.Assemblies">
            <summary>
            Gets the collection of assemblies forming the current schema.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.AddStarcounterAssembly">
            <summary>
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.FindDatabaseClass(System.String)">
            <summary>
            Finds a class in the current schema given its name.
            </summary>
            <param name="name">Name of the requested class.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/> named <paramref name="name"/>, or
            <b>null</b> if the schema does not contain a class named <paramref name="name"/>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.IndexDatabaseClass(Sc.Server.Weaver.Schema.DatabaseClass)">
             <summary>
             Index a <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/> in the current schema.
             </summary>
             <param name="databaseClass">Class to index.</param>
             <remarks>
             This method is called when an assembly is added to the schema or when a class
             is added to an assembly of this schema. It ensures that all classes in this schema
            
             </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.FindDatabaseClassByShortname(System.String,Sc.Server.Weaver.Schema.DatabaseClass@)">
            <summary>
            Finds a class in the current schema given its shortname.
            </summary>
            <param name="name">
            Name of the requested class.
            </param>
            <param name="databaseClass">
            Out parameter. contains the <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>, 
            or null if not found or on an ambiguous match.
            </param>
            <returns>
            True if found (including ambiguous match), false if no 
            class is found.
            </returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.FindDatabaseAttribute(System.String,System.String)">
            <summary>
            </summary>
            <param name="fieldName"></param>
            <param name="fieldDeclaringTypeReflectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.EnumerateDatabaseClasses">
            <summary>
            Enumerates all classes contained in the current schema.
            </summary>
            <returns>An enumerator for all classes contained in the current schema.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.PopulateDatabaseEntityClasses(System.Collections.Generic.IList{Sc.Server.Weaver.Schema.DatabaseEntityClass})">
            <summary>
            Populates a list with the entity classes (different than the root class)
            in the current database schema.
            </summary>
            <param name="classes">Collection to be populated.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.PopulateOrderedDatabaseClasses(System.Collections.Generic.IList{Sc.Server.Weaver.Schema.DatabaseClass})">
            <summary>
            Populates a list (ordered collection) with the database classes present in the
            database schema, sorted by order of inheritance (if A is the parent of B, A is
            before B in the list).
            </summary>
            <param name="list">The list to be populate.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.PopulateOrderedDatabaseEntityClasses(System.Collections.Generic.IList{Sc.Server.Weaver.Schema.DatabaseClass})">
             <summary>
             Populates a list (ordered collection) with the database classes present in the
             database schema, sorted by order of inheritance (if A is the parent of B, A is
             before B in the list).
            
             Excludes extension classes.
             </summary>
             <param name="list">The list to be populate.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.PopulateOrderedDatabaseEntityClasses2(System.Collections.Generic.IList{Sc.Server.Weaver.Schema.DatabaseEntityClass})">
            <summary>
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.DebugOutput(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            Formats the current assembly and all its members to a writer.
            </summary>
            <param name="writer">The writer to which the object should be formatted.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.AfterDeserialization">
            <summary>
            Asserts all assemblies are properly initialized in the domain
            they live. Should be invoked every time the schema has been
            deserialized in a new AppDomain (i.e either after it was fully
            assembled from disk .schema files or after it was serialized
            accross an AppDomain boundary.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.RecursivePopulateOrderedClasses(Sc.Server.Weaver.Schema.DatabaseClass,System.Collections.Generic.IList{Sc.Server.Weaver.Schema.DatabaseClass},System.Collections.Generic.Dictionary{Sc.Server.Weaver.Schema.DatabaseClass,System.Object})">
            <summary>
            Inserts a given class and its ancestors in a collection of classes that should be
            ordered by inheritance (parent first, children after).
            </summary>
            <param name="databaseClass">The database class that has to be inserted (as well
            as its ancestors) to the collection.</param>
            <param name="orderedClasses">The collection into which the classes have to
            be added.</param>
            <param name="index">Index of classes that are already present in <paramref name="orderedClasses"/>.
            </param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.Serialize">
            <summary>
            Serialize the current instance into a new <c>MemoryStream</c>.
            </summary>
            <returns>A stream with the serialized schema.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.DeserializeFrom(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            Produces a <see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema"/> from a set of schema files.
            </summary>
            <param name="schemaFiles">Files that are to be deserialized.</param>
            <returns>Materialized schema based on the given file.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.DeserializeFrom(System.IO.Stream)">
            <summary>
            Deserialize an instance of a schema from a stream.
            </summary>
            <param name="stream">The stream in which the serialized schema is contained.</param>
            <returns>A materialized schema.</returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseSchemaElement">
            <summary>
            Class DatabaseSchemaElement
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseSchemaElement.tags">
            <summary>
            The tags
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseSchemaElement.serializedTags">
            <summary>
            The serialized tags
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchemaElement.OnDeserializedInitializeTags(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when [deserialized initialize tags].
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseSchemaElement.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseSchemaElement.SerializedTag">
            <summary>
            Gets the serialized tag.
            </summary>
            <value>The serialized tag.</value>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseSchemaElement.Schema">
            <summary>
            Gets the <see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema" /> to which the current object belong.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseUnsupportedType">
            <summary>
            Represents a type that is not supported by the database,
            and that was consequently not parsed.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseUnsupportedType.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseUnsupportedType" />.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseUnsupportedType.TypeName">
            <summary>
            Ges the name of the unsupported field.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseUnsupportedType.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.IDatabaseAttributeType">
            <summary>
            Interface that should be inherited by all possible types of a database attributes.
            </summary>
            <remarks>
            This interface has no property. We use it only for strong typing.
            </remarks>
        </member>
        <member name="T:se.sics.prologbeans.Bindings">
            <summary> <c>Bindings</c> handles the variable bindings in the
            communication with the prolog server. Using variable bindings
            ensures that the values are properly quoted when sent to the
            prolog server.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.#ctor">
            <summary> Creates a new <c>Bindings</c> instance with no variable bindings.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.#ctor(se.sics.prologbeans.Bindings)">
             <summary> Creates a new <c>Bindings</c> instance and copies all existing
             variable bindings from the specified bindings.
             </summary>
             <param name="binds">the variable bindings to copy
            
             </param>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.bind(System.String,System.Int32)">
            <summary> Adds the specified variable binding. The variable name must start
            with an upper case letter or '_'.
            </summary>
            <param name="name">a prolog variable name
            </param>
            <param name="bvalue">the value to bind to the variable
            </param>
            <returns> a reference to this <c>Bindings</c> object
            </returns>
            <exception cref="T:System.ArgumentException"> if the name is not a
            valid prolog variable name
            </exception>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.bind(System.String,System.Int64)">
            <summary> Adds the specified variable binding. The variable name must start
            with an upper case letter or '_'.
            </summary>
            <param name="name">a prolog variable name
            </param>
            <param name="bvalue">the value to bind to the variable
            </param>
            <returns> a reference to this <c>Bindings</c> object
            </returns>
            <exception cref="T:System.ArgumentException"> if the name is not a
            valid prolog variable name
            </exception>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.bind(System.String,System.Single)">
            <summary> Adds the specified variable binding. The variable name must start
            with an upper case letter or '_'.
            </summary>
            <param name="name">a prolog variable name
            </param>
            <param name="bvalue">the value to bind to the variable
            </param>
            <returns> a reference to this <c>Bindings</c> object
            </returns>
            <exception cref="T:System.ArgumentException"> if the name is not a
            valid prolog variable name
            </exception>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.bind(System.String,System.Double)">
            <summary> Adds the specified variable binding. The variable name must start
            with an upper case letter or '_'.
            </summary>
            <param name="name">a prolog variable name
            </param>
            <param name="bvalue">the value to bind to the variable
            </param>
            <returns> a reference to this <c>Bindings</c> object
            </returns>
            <exception cref="T:System.ArgumentException"> if the name is not a
            valid prolog variable name
            </exception>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.bind(System.String,System.String)">
            <summary> Adds the specified variable binding. The variable name must start
            with an upper case letter or '_'.
            </summary>
            <param name="name">a prolog variable name
            </param>
            <param name="bvalue">the value to bind to the variable
            </param>
            <returns> a reference to this <c>Bindings</c> object
            </returns>
            <exception cref="T:System.ArgumentException"> if the name is not a
            valid prolog variable name
            </exception>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.bind(System.String,se.sics.prologbeans.Term)">
            <summary> Adds the specified variable binding. The variable name must start
            with an upper case letter or '_'.
            </summary>
            <param name="name">a prolog variable name
            </param>
            <param name="bvalue">the value to bind to the variable
            </param>
            <returns> a reference to this <c>Bindings</c> object
            </returns>
            <exception cref="T:System.ArgumentException"> if the name is not a
            valid prolog variable name
            </exception>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.bindAtom(System.String,System.String)">
            <summary> Adds the specified variable binding. The variable name must start
            with an upper case letter or '_'. The value will be bound as an
            atom.
            </summary>
            <param name="name">a prolog variable name
            </param>
            <param name="bvalue">the value to bind to the variable as an atom
            </param>
            <returns> a reference to this <c>Bindings</c> object
            </returns>
            <exception cref="T:System.ArgumentException"> if the name is not a
            valid prolog variable name
            </exception>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.getValue(System.String)">
             <summary> Returns the value for the specified variable or <c>null</c>
             if the variable is not bound.
             </summary>
             <param name="name">the name of the variable
             </param>
             <returns> the value of the variable as a <c>Term</c> or
             <c>null</c> if the variable is not bound
            
             </returns>
        </member>
        <member name="M:se.sics.prologbeans.Bindings.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.FastParser">
            <summary> <c>FastParser</c>
            Documentation of the fast_write/read "protocol"
            Each "string" looks like:
            [PM] 3.10.2 Updated specification
            D TYPE [type-specific data]
            D -> start of fastrw Term (D is also the version number)
            TYPE, one byte for type:
            I - integer - argument is a arbitrary long, nonempty string of
            ASCII decimal digits, prefixed by a minus sign if negative
            There should be no plus sign prefixed. There is no size restriction.
            F - float - argument is an ASCII string of digits with a decimal
            point preceeded by at least one digit, optionally using
            E-notation (capital E) with exponent optionally prefixed by
            minus sign. The floating point number is prefixed by minus if
            negative
            A - atom - argument is an ATOMNAME (*)
            Make UTF-8 explicit (QP loses here). (Luckily this should be exactly
            the Java String.getbytes bytes.)
            _ - variable (followed by DATA which is a string of digits). The
            variables are numbered 0..n in depth first traversal
            increasing argument order. This is the change in version 'D'
            compared to version 'C'. The variable numbering is strictly defined.
            S ATOMNAME n - compound with n terms [followed by n terms] - n is
            an (unsigned) byte
            " - a list prefix consisting of only integers in [1..255] (*)
            the sequence is terminated by zero byte followed by the tail
            term. Note that this is just a compact representation of
            nested compound terms with functor ./2.
            Example "ab", i.e., .(97, .(98, [])) becomes (using C
            char-constant notation) '"' 'a' 'b' '\0' ']'; [x,97,98|y]
            becomes '[' 'A' 'x' '\0' '"' 'a' 'b' '\0' 'A' 'y' '\0'
            > Clarified that this encoding is used for any "list"-prefix with
            > suitable elements. In particular it is not always followed by ']'.
            > Also note that the elements of this kind of list should *not* be
            > treated by the reader as individual bytes of an UTF-8 encoded
            > string. If a list is to be treated as a string then each element
            > should be treated as a single UNICODE character, this holds for
            > lists transmitted using any of the three ('"', '[' or 'S' '.' '\0'
            > '\2') possible serialization-formats.
            >
            [ - a list cell, i.e, a shortcut for 'S' '.' '\0' '\2' (*)
            ] - empty list, i.e, a shortcut for 'A' '[' ']' '\0' (*)
            DATA - a byte sequence terminated by '\0'
            NOTE: As of verson 'D' the numbering must be sequential from
            _0.._n, the prolog side fast_read will most likely
            crash if * this invariant is not maintained when
            sending data to * prolog.
            ATOMNAME is DATA where the bytes make up the UTF-8 name of the
            atom.
            (*) These could be optional in the writer since there are longer
            equivalent forms from which the reader could produce the same term.
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.FastWriter">
            <summary> <c>FastWriter</c>
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.PBAtomic">
            <summary> <c>PBAtomic</c> is the .NET representation of Prolog constants
            and variables.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBAtomic.Atom">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBAtomic.Integer">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBAtomic.Float">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBAtomic.Atomic">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBAtomic.Variable">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PBAtomic.#ctor(System.String,System.Int32)">
            <summary> Creates a new <c>PBAtomic</c> instance with the specified name
            and of the specified Prolog type (integer, floating-point number,
            atom, or variable).
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PBAtomic.intValue">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PBAtomic.longValue">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PBAtomic.floatValue">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PBAtomic.doubleValue">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PBAtomic.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.PBCompound">
            <summary> <c>PBCompound</c> is the .NET representation of Prolog compound
            terms and atoms (such as the empty list).
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBCompound.Atom">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBCompound.Atomic">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBCompound.Arity">
            <summary>
            </summary>
        </member>
        <member name="F:se.sics.prologbeans.PBCompound.arguments">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PBCompound.getArgument(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PBCompound.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.PBList">
            <summary> <c>PBList</c> is the .NET representation of Prolog lists.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBList.List">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBList.Arity">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBList.Length">
            <summary> Returns the length of this list.
            Please note: this does not correspond to the predicate <code>length/1</code>.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBList.End">
            <summary> Returns the end of this list. For closed lists this element is
            the empty list.
            </summary>
        </member>
        <member name="F:se.sics.prologbeans.PBList.nextTerm">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PBList.getArgument(System.Int32)">
            <summary> Returns the first or second argument of this list node. Only
            non-empty lists have arguments. Note: the arguments are indexed
            from 1 to 2.
            Due to performance reasons this should be avoided if not 100%
            necessary. Please use <c>getTermAt(int index)</c> for
            accessing the elements of lists.
            </summary>
            <param name="index">the (one based) index of the argument
            </param>
            <returns> the argument as a Term
            </returns>
            <exception cref="T:System.SystemException"> if this term is not compound
            </exception>
            <seealso cref="M:se.sics.prologbeans.PBList.getTermAt(System.Int32)"/>
        </member>
        <member name="M:se.sics.prologbeans.PBList.getTermAt(System.Int32)">
            <summary> Returns the element at the specified index in this list. Note:
            the elements are indexed from 1 to length.
            </summary>
            <param name="index">the (one based) index of the element in this list
            </param>
            <returns> the element as a Term
            </returns>
            <seealso cref="P:se.sics.prologbeans.PBList.Length"/>
        </member>
        <member name="M:se.sics.prologbeans.PBList.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.PBMonitor">
            <summary> <c>PBMonitor</c> is used to supervise and cancel queries that
            takes too long time.
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.PBString">
            <summary> <c>PBString</c> is the .NET representation of Prolog strings
            (e.g. lists of integers that are interpretable as characters).
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBString.IsString">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBString.Arity">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBString.String">
            <summary> Returns the string value of this term.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PBString.Length">
            <summary> Returns the number of characters in this string.
            Please note: this does not correspond to the predicate <code>length/1</code>.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PBString.getArgument(System.Int32)">
            <summary> Returns the first or second argument of this list node. Only
            non-empty lists have arguments. Note: the arguments are indexed
            from 1 to 2.
            <para>
            Due to performance reasons this should be avoided if not 100%
            necessary. Please use <c>getCharAt(int index)</c> or
            <c>getString()</c> for accessing the value of strings.
            </para>
            </summary>
            <param name="index">the (one based) index of the argument
            </param>
            <returns> the argument as a Term
            </returns>
            <exception cref="T:System.SystemException"> if this term is not compound
            </exception>
        </member>
        <member name="M:se.sics.prologbeans.PBString.getTermAt(System.Int32)">
            <summary> Returns the element at the specified index in this list. Note:
            the elements are indexed from 1 to length.
            <para>
            Due to performance reasons this should be avoided if not 100%
            necessary. Please use <c>getCharAt(int index)</c> or
            <c>getString()</c> for accessing the value of strings.
            </para>
            </summary>
            <param name="index">the (one based) index of the element in this list
            </param>
            <returns> the element as a Term
            </returns>
            <seealso cref="P:se.sics.prologbeans.PBString.Length" />
            <seealso cref="M:se.sics.prologbeans.PBString.getCharAt(System.Int32)" />
            <seealso cref="P:se.sics.prologbeans.PBString.String" />
        </member>
        <member name="M:se.sics.prologbeans.PBString.getCharAt(System.Int32)">
            <summary> Returns the character at the specified index in this
            string. Note: characters are indexed from 1 to length
            </summary>
            <param name="index">the (one based) index of the character in this string
            </param>
            <returns> the character
            </returns>
            <seealso cref="P:se.sics.prologbeans.PBString.Length"/>
        </member>
        <member name="M:se.sics.prologbeans.PBString.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.PrologSession">
            <summary> <c>PrologSession</c> handles the connection with the Prolog
            Server. Currently only synchronous connections with the server are
            supported.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PrologSession.Timeout">
            <summary> Returns the timeout in milliseconds before the connection to the
            Prolog server is reset (when a query is not answered).
            </summary>
            <summary> Sets the timeout in milliseconds before the connection to the
            Prolog server is reset (when a query is not answered). Setting
            the timeout to <c>0</c> will disable timeouts for this
            prolog session. Default is 2000 milliseconds.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PrologSession.Port">
            <summary> Returns the port of the Prolog server.
            </summary>
            <summary> Sets the port of the Prolog server (default <c>StarcounterEnvironment.DefaultPorts.SQLProlog</c>).
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PrologSession.Host">
            <summary> Returns the host of the Prolog server (exactly as registered in
            <c>setHost</c>).
            </summary>
            <summary> Sets the host of the Prolog server (default is
            <c>localhost</c>). The host can be specified as either
            IP-address or host name.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PrologSession.AlwaysClosing">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PrologSession.AlwaysClose">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PrologSession.AutoConnecting">
            <summary> Returns the state of the auto connect mode.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.PrologSession.Connected">
            <summary> Returns <c>true</c> if a connection with the Prolog server
            is open and <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PrologSession.#ctor">
            <summary> Creates a new <c>PrologSession</c> instance with default
            Prolog server settings.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PrologSession.executeQuery(System.String)">
            <summary> Sends a query to the Prolog server and waits for the answer
            before returning the <c>QueryAnswer</c>. Anonymous
            variables (underscore, <c>_</c>), will be ignored, and thus
            not accessible in the <c>QueryAnswer</c>.
            <c>executeQuery</c> throws <c>IOException</c> if
            communication problems with the server occurs. Please note:
            <c>executeQuery</c> will only return one answer.
            </summary>
            <param name="query">the query to send to the prolog server
                        The characters in the query are restricted to ISO-8859-1.
            </param>
            <returns> the answer from the prolog server
            </returns>
            <exception cref="T:System.IO.IOException">Thrown if an error occurs. A possible cause is a timeout.
            </exception>
            <seealso cref="P:se.sics.prologbeans.PrologSession.Timeout"/>
        </member>
        <member name="M:se.sics.prologbeans.PrologSession.executeQuery(System.String,se.sics.prologbeans.Bindings)">
            <summary> Sends a query to the Prolog server and waits for the answer
            before returning the
            <c>QueryAnswer</c>. <c>Bindings</c> are variable
            bindings for the given query and will ensure that the values are
            stuffed correctly.
            <para>
            An example:
            <example>
            <code>QueryAnswer answer = executeQuery("evaluate(In,Out)",
            new Bindings().bind("In","4*9."));
            </code>
            </example>
            </para>
            </summary>
            <param name="query">the query to send to the prolog server
                        The characters in the query are restricted to ISO-8859-1.
            </param>
            <param name="bindings">the variable bindings to use in the query
            </param>
            <returns> the answer from the prolog server
            </returns>
            <exception cref="T:System.IO.IOException"> if an error occurs. A possible cause is a timeout.
            </exception>
            <seealso cref="P:se.sics.prologbeans.PrologSession.Timeout"/>
        </member>
        <member name="M:se.sics.prologbeans.PrologSession.executeQuery(System.String,se.sics.prologbeans.Bindings,System.String)">
            <summary> Sends a query to the Prolog server and waits for the answer
            before returning the
            <c>QueryAnswer</c>. <c>Bindings</c> are variable
            bindings for the given query and will ensure that the values are
            stuffed correctly.
            </summary>
            <param name="query">the query to send to the prolog server
                        The characters in the query are restricted to ISO-8859-1.
            </param>
            <param name="bindings">the variable bindings to use in the query
            </param>
            <param name="sessionID">the session id to give to the prolog server
            </param>
            <returns> the answer from the prolog server
            </returns>
            <exception cref="T:System.IO.IOException"> if an error occurs. A possible cause is a timeout.
            </exception>
            <seealso cref="P:se.sics.prologbeans.PrologSession.Timeout"/>
        </member>
        <member name="M:se.sics.prologbeans.PrologSession.connect">
            <summary> Connects to the Prolog server. By default
            <c>executeQuery</c> will automatically connect to the
            server when called.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.PrologSession.disconnect">
            <summary> Closes the connection with the Prolog server. The connection can
            be opened again with <c>connect</c>.
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.QueryAnswer">
            <summary> <c>QueryAnswer</c> is the .NET representation of an answer
            from the Prolog server. The <c>QueryAnswer</c> is returned by
            <see cref="T:se.sics.prologbeans.PrologSession"/> in response to a query
            and contains variable bindings, errors, and success/failure
            information. It also contains the variable bindings specified in
            the query.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.QueryAnswer.IsError">
            <summary> Returns <c>true</c> if an error occurred while processing
            the query and <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.QueryAnswer.Error">
            <summary> Returns the error reason or <c>null</c> if an error has not
            occurred or if no error reason is known.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.QueryAnswer.#ctor(se.sics.prologbeans.Term,se.sics.prologbeans.Bindings)">
             <summary> Creates a new <c>QueryAnswer</c> instance with the
             specified information.
             </summary>
             <param name="answer">a <c>Term</c> value representing the Prolog response
             </param>
             <param name="bindings">the variable bindings for the query to which this
             is an answer
            
             </param>
        </member>
        <member name="M:se.sics.prologbeans.QueryAnswer.getValue(System.String)">
             <summary> Returns the value of the specified variable or <c>null</c>
             if the variable is not bound.
             </summary>
             <param name="variable">the name of the variable
             </param>
             <returns> the value of the variable as a <c>Term</c> or
             <c>null</c> if the variable is not bound
            
             </returns>
        </member>
        <member name="M:se.sics.prologbeans.QueryAnswer.queryFailed">
            <summary> Returns <c>true</c> if the query failed (i.e. the Prolog
            responded with 'no') and <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.QueryAnswer.ToString">
            <summary> Returns a string description of this answer.
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.IThreadRunnable">
            <summary>
            Internal interface for PrologBeans.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.IThreadRunnable.Run">
            <summary>
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.SupportClass">
            <summary>
            Internal class for PrologBeans.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.PutElement(System.Collections.Hashtable,System.Object,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.Identity(System.Int64)">
            <summary>
            This method is used as a dummy method to simulate VJ++ behavior
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.Identity(System.UInt64)">
            <summary>
            This method is used as a dummy method to simulate VJ++ behavior
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.Identity(System.Single)">
            <summary>
            This method is used as a dummy method to simulate VJ++ behavior
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.Identity(System.Double)">
            <summary>
            This method is used as a dummy method to simulate VJ++ behavior
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ToByteArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of bytes
            </summary>
            <param name="sbyteArray">The array of sbytes to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ToSByteArray(System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="T:se.sics.prologbeans.SupportClass.ThreadClass">
            <summary>
            Internal class for PrologBeans.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.#ctor(System.Threading.ThreadStart)">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.Run">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.Start">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.SupportClass.ThreadClass.Instance">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.SupportClass.ThreadClass.Name">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.SupportClass.ThreadClass.Priority">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.SupportClass.ThreadClass.IsAlive">
            <summary>
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.SupportClass.ThreadClass.IsBackground">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.Join">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.Join(System.Int64)">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.Join(System.Int64,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.Abort">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.Abort(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.ToString">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.ThreadClass.Current">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.WriteStackTrace(System.Exception,System.IO.TextWriter)">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.SupportClass.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[]@,System.Int32)">
            <summary>
            Copies an array of chars obtained from a String into a specified array of chars
            </summary>
            <param name="sourceString">The String to get the chars from</param>
            <param name="sourceStart">Position of the String to start getting the chars</param>
            <param name="sourceEnd">Position of the String to end getting the chars</param>
            <param name="destinationArray">Array to return the chars</param>
            <param name="destinationStart">Position of the destination array of chars to start storing the chars</param>
            <returns>An array of chars</returns>
        </member>
        <member name="T:se.sics.prologbeans.Term">
            <summary> <c>Term</c> is the base for .NET representations of Prolog terms.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.Term.Atom">
            <summary> Returns <c>true</c> if this term is an atom and
            <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.Term.Integer">
            <summary> Returns <c>true</c> if this term is an integer and
            <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.Term.Float">
            <summary> Returns <c>true</c> if this term is a floating-point number
            and <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.Term.Compound">
            <summary> Returns <c>true</c> if this term is a compund term and
            <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.Term.List">
            <summary> Returns <c>true</c> if this term is a list and
            <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.Term.IsString">
            <summary> Returns <c>true</c> if this term is an instance
            of <c>PBString</c> (which can be used for fast string access) and
            <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.Term.Atomic">
            <summary> Returns <c>true</c> if this term is a constant
            (e.g. integer, floating-point number, or atom) and
            <c>false</c> if this term is a compound term or variable.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.Term.Variable">
            <summary> Returns <c>true</c> if this term is a variable and
            <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.Term.Name">
            <summary> Returns the name of this constant or compound term.
            </summary>
        </member>
        <member name="P:se.sics.prologbeans.Term.Arity">
            <summary> Returns the number of arguments of this compound term or 0 if this
            term is not a compound term.
            </summary>
        </member>
        <member name="F:se.sics.prologbeans.Term.name">
            <summary>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.Term.#ctor(System.String)">
            <summary> Creates a new <c>Term</c> instance with the specified name.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.Term.getArgument(System.Int32)">
            <summary> Returns the argument at the specified index. Only compound terms
            have arguments. Note: the arguments are indexed from 1 to arity.
            </summary>
            <param name="index">the (one based) index of the argument
            </param>
            <returns> the argument as a Term
            </returns>
            <exception cref="T:System.SystemException"> if this term is not compound
            </exception>
        </member>
        <member name="M:se.sics.prologbeans.Term.intValue">
            <summary> Returns the integer value of this term.
            <exception cref="T:System.SystemException"> if this term is not an integer
            </exception>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.Term.longValue">
            <summary> Returns the integer value of this term.
            <exception cref="T:System.SystemException"> if this term is not an integer
            </exception>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.Term.floatValue">
            <summary> Returns the floating-point value of this term.
            <exception cref="T:System.SystemException"> if this term is not a number
            </exception>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.Term.doubleValue">
            <summary> Returns the floating-point value of this term.
            <exception cref="T:System.SystemException"> if this term is not a number
            </exception>
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.Term.toPrologString">
            <summary> For internal use by PrologBeans.
            Returns a string representation of this term in a format that can be
            parsed by a Prolog parser.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.Term.ToString">
            <summary> Returns a string description of this term.
            </summary>
        </member>
        <member name="M:se.sics.prologbeans.Term.stuffAtom(System.String)">
            <summary>
            </summary>
        </member>
    </members>
</doc>
